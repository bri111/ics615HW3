TruffleHog Analysis Report for project3
============================================================
Total secrets detected: 5

Secret #1:
{
  "branch": "origin/main",
  "commit": "update\n",
  "commitHash": "838e2643a52018f5d3eeee7ed3ebd6dc411c818b",
  "date": "2023-12-22 07:20:51",
  "diff": "@@ -1,334 +0,0 @@\n-# Copyright (c) Facebook, Inc. and its affiliates.\n-import re\n-\n-from tqdm import tqdm\n-\n-\n-class EvalAIAnswerProcessor:\n-    \"\"\"\n-    Processes an answer similar to Eval AI\n-        copied from\n-        https://github.com/facebookresearch/mmf/blob/c46b3b3391275b4181567db80943473a89ab98ab/pythia/tasks/processors.py#L897\n-    \"\"\"\n-\n-    CONTRACTIONS = {\n-        \"aint\": \"ain't\",\n-        \"arent\": \"aren't\",\n-        \"cant\": \"can't\",\n-        \"couldve\": \"could've\",\n-        \"couldnt\": \"couldn't\",\n-        \"couldn'tve\": \"couldn't've\",\n-        \"couldnt've\": \"couldn't've\",\n-        \"didnt\": \"didn't\",\n-        \"doesnt\": \"doesn't\",\n-        \"dont\": \"don't\",\n-        \"hadnt\": \"hadn't\",\n-        \"hadnt've\": \"hadn't've\",\n-        \"hadn'tve\": \"hadn't've\",\n-        \"hasnt\": \"hasn't\",\n-        \"havent\": \"haven't\",\n-        \"hed\": \"he'd\",\n-        \"hed've\": \"he'd've\",\n-        \"he'dve\": \"he'd've\",\n-        \"hes\": \"he's\",\n-        \"howd\": \"how'd\",\n-        \"howll\": \"how'll\",\n-        \"hows\": \"how's\",\n-        \"Id've\": \"I'd've\",\n-        \"I'dve\": \"I'd've\",\n-        \"Im\": \"I'm\",\n-        \"Ive\": \"I've\",\n-        \"isnt\": \"isn't\",\n-        \"itd\": \"it'd\",\n-        \"itd've\": \"it'd've\",\n-        \"it'dve\": \"it'd've\",\n-        \"itll\": \"it'll\",\n-        \"let's\": \"let's\",\n-        \"maam\": \"ma'am\",\n-        \"mightnt\": \"mightn't\",\n-        \"mightnt've\": \"mightn't've\",\n-        \"mightn'tve\": \"mightn't've\",\n-        \"mightve\": \"might've\",\n-        \"mustnt\": \"mustn't\",\n-        \"mustve\": \"must've\",\n-        \"neednt\": \"needn't\",\n-        \"notve\": \"not've\",\n-        \"oclock\": \"o'clock\",\n-        \"oughtnt\": \"oughtn't\",\n-        \"ow's'at\": \"'ow's'at\",\n-        \"'ows'at\": \"'ow's'at\",\n-        \"'ow'sat\": \"'ow's'at\",\n-        \"shant\": \"shan't\",\n-        \"shed've\": \"she'd've\",\n-        \"she'dve\": \"she'd've\",\n-        \"she's\": \"she's\",\n-        \"shouldve\": \"should've\",\n-        \"shouldnt\": \"shouldn't\",\n-        \"shouldnt've\": \"shouldn't've\",\n-        \"shouldn'tve\": \"shouldn't've\",\n-        \"somebody'd\": \"somebodyd\",\n-        \"somebodyd've\": \"somebody'd've\",\n-        \"somebody'dve\": \"somebody'd've\",\n-        \"somebodyll\": \"somebody'll\",\n-        \"somebodys\": \"somebody's\",\n-        \"someoned\": \"someone'd\",\n-        \"someoned've\": \"someone'd've\",\n-        \"someone'dve\": \"someone'd've\",\n-        \"someonell\": \"someone'll\",\n-        \"someones\": \"someone's\",\n-        \"somethingd\": \"something'd\",\n-        \"somethingd've\": \"something'd've\",\n-        \"something'dve\": \"something'd've\",\n-        \"somethingll\": \"something'll\",\n-        \"thats\": \"that's\",\n-        \"thered\": \"there'd\",\n-        \"thered've\": \"there'd've\",\n-        \"there'dve\": \"there'd've\",\n-        \"therere\": \"there're\",\n-        \"theres\": \"there's\",\n-        \"theyd\": \"they'd\",\n-        \"theyd've\": \"they'd've\",\n-        \"they'dve\": \"they'd've\",\n-        \"theyll\": \"they'll\",\n-        \"theyre\": \"they're\",\n-        \"theyve\": \"they've\",\n-        \"twas\": \"'twas\",\n-        \"wasnt\": \"wasn't\",\n-        \"wed've\": \"we'd've\",\n-        \"we'dve\": \"we'd've\",\n-        \"weve\": \"we've\",\n-        \"werent\": \"weren't\",\n-        \"whatll\": \"what'll\",\n-        \"whatre\": \"what're\",\n-        \"whats\": \"what's\",\n-        \"whatve\": \"what've\",\n-        \"whens\": \"when's\",\n-        \"whered\": \"where'd\",\n-        \"wheres\": \"where's\",\n-        \"whereve\": \"where've\",\n-        \"whod\": \"who'd\",\n-        \"whod've\": \"who'd've\",\n-        \"who'dve\": \"who'd've\",\n-        \"wholl\": \"who'll\",\n-        \"whos\": \"who's\",\n-        \"whove\": \"who've\",\n-        \"whyll\": \"why'll\",\n-        \"whyre\": \"why're\",\n-        \"whys\": \"why's\",\n-        \"wont\": \"won't\",\n-        \"wouldve\": \"would've\",\n-        \"wouldnt\": \"wouldn't\",\n-        \"wouldnt've\": \"wouldn't've\",\n-        \"wouldn'tve\": \"wouldn't've\",\n-        \"yall\": \"y'all\",\n-        \"yall'll\": \"y'all'll\",\n-        \"y'allll\": \"y'all'll\",\n-        \"yall'd've\": \"y'all'd've\",\n-        \"y'alld've\": \"y'all'd've\",\n-        \"y'all'dve\": \"y'all'd've\",\n-        \"youd\": \"you'd\",\n-        \"youd've\": \"you'd've\",\n-        \"you'dve\": \"you'd've\",\n-        \"youll\": \"you'll\",\n-        \"youre\": \"you're\",\n-        \"youve\": \"you've\",\n-    }\n-\n-    NUMBER_MAP = {\n-        \"none\": \"0\",\n-        \"zero\": \"0\",\n-        \"one\": \"1\",\n-        \"two\": \"2\",\n-        \"three\": \"3\",\n-        \"four\": \"4\",\n-        \"five\": \"5\",\n-        \"six\": \"6\",\n-        \"seven\": \"7\",\n-        \"eight\": \"8\",\n-        \"nine\": \"9\",\n-        \"ten\": \"10\",\n-    }\n-    ARTICLES = [\"a\", \"an\", \"the\"]\n-    PERIOD_STRIP = re.compile(r\"(?!<=\\d)(\\.)(?!\\d)\")\n-    COMMA_STRIP = re.compile(r\"(?<=\\d)(\\,)+(?=\\d)\")\n-    PUNCTUATIONS = [\n-        \";\",\n-        r\"/\",\n-        \"[\",\n-        \"]\",\n-        '\"',\n-        \"{\",\n-        \"}\",\n-        \"(\",\n-        \")\",\n-        \"=\",\n-        \"+\",\n-        \"\\\\\",\n-        \"_\",\n-        \"-\",\n-        \">\",\n-        \"<\",\n-        \"@\",\n-        \"`\",\n-        \",\",\n-        \"?\",\n-        \"!\",\n-    ]\n-\n-    def __init__(self, *args, **kwargs):\n-        pass\n-\n-    def word_tokenize(self, word):\n-        word = word.lower()\n-        word = word.replace(\",\", \"\").replace(\"?\", \"\").replace(\"'s\", \" 's\")\n-        return word.strip()\n-\n-    def process_punctuation(self, in_text):\n-        out_text = in_text\n-        for p in self.PUNCTUATIONS:\n-            if (p + \" \" in in_text or \" \" + p in in_text) or (\n-                re.search(self.COMMA_STRIP, in_text) is not None\n-            ):\n-                out_text = out_text.replace(p, \"\")\n-            else:\n-                out_text = out_text.replace(p, \" \")\n-        out_text = self.PERIOD_STRIP.sub(\"\", out_text, re.UNICODE)\n-        return out_text\n-\n-    def process_digit_article(self, in_text):\n-        out_text = []\n-        temp_text = in_text.lower().split()\n-        for word in temp_text:\n-            word = self.NUMBER_MAP.setdefault(word, word)\n-            if word not in self.ARTICLES:\n-                out_text.append(word)\n-            else:\n-                pass\n-        for word_id, word in enumerate(out_text):\n-            if word in self.CONTRACTIONS:\n-                out_text[word_id] = self.CONTRACTIONS[word]\n-        out_text = \" \".join(out_text)\n-        return out_text\n-\n-    def __call__(self, item):\n-        item = self.word_tokenize(item)\n-        item = item.replace(\"\\n\", \" \").replace(\"\\t\", \" \").strip()\n-        item = self.process_punctuation(item)\n-        item = self.process_digit_article(item)\n-        return item\n-\n-\n-class TextVQAAccuracyEvaluator:\n-    def __init__(self):\n-        self.answer_processor = EvalAIAnswerProcessor()\n-\n-    def _compute_answer_scores(self, raw_answers):\n-        \"\"\"\n-        compute the accuracy (soft score) of human answers\n-        \"\"\"\n-        answers = [self.answer_processor(a) for a in raw_answers]\n-        assert len(answers) == 10\n-        gt_answers = list(enumerate(answers))\n-        unique_answers = set(answers)\n-        unique_answer_scores = {}\n-\n-        for unique_answer in unique_answers:\n-            accs = []\n-            for gt_answer in gt_answers:\n-                other_answers = [item for item in gt_answers if item != gt_answer]\n-                matching_answers = [\n-                    item for item in other_answers if item[1] == unique_answer\n-                ]\n-                acc = min(1, float(len(matching_answers)) / 3)\n-                accs.append(acc)\n-            unique_answer_scores[unique_answer] = sum(accs) / len(accs)\n-\n-        return unique_answer_scores\n-\n-    def eval_pred_list(self, pred_list):\n-        pred_scores = []\n-        for entry in tqdm(pred_list):\n-            pred_answer = self.answer_processor(entry[\"pred_answer\"])\n-            unique_answer_scores = self._compute_answer_scores(entry[\"gt_answers\"])\n-            score = unique_answer_scores.get(pred_answer, 0.0)\n-            pred_scores.append(score)\n-\n-        accuracy = sum(pred_scores) / len(pred_scores)\n-        return accuracy\n-\n-\n-class STVQAAccuracyEvaluator:\n-    def __init__(self):\n-        self.answer_processor = EvalAIAnswerProcessor()\n-\n-    def eval_pred_list(self, pred_list):\n-        pred_scores = []\n-        for entry in pred_list:\n-            pred_answer = self.answer_processor(entry[\"pred_answer\"])\n-            gts = [self.answer_processor(a) for a in entry[\"gt_answers\"]]\n-            score = 1.0 if pred_answer in gts else 0.0\n-            pred_scores.append(score)\n-\n-        accuracy = sum(pred_scores) / len(pred_scores)\n-        return accuracy\n-\n-\n-class STVQAANLSEvaluator:\n-    def __init__(self):\n-        import editdistance  # install with `pip install editdistance`\n-\n-        self.get_edit_distance = editdistance.eval\n-\n-    def get_anls(self, s1, s2):\n-        s1 = s1.lower().strip()\n-        s2 = s2.lower().strip()\n-        iou = 1 - self.get_edit_distance(s1, s2) / max(len(s1), len(s2))\n-        anls = iou if iou >= 0.5 else 0.0\n-        return anls\n-\n-    def eval_pred_list(self, pred_list):\n-        pred_scores = []\n-        for entry in pred_list:\n-            anls = max(\n-                self.get_anls(entry[\"pred_answer\"], gt) for gt in entry[\"gt_answers\"]\n-            )\n-            pred_scores.append(anls)\n-\n-        accuracy = sum(pred_scores) / len(pred_scores)\n-        return accuracy\n-\n-\n-class TextCapsBleu4Evaluator:\n-    def __init__(self):\n-        # The following script requires Java 1.8.0 and pycocotools installed.\n-        # The pycocoevalcap can be installed with pip as\n-        # pip install git+https://github.com/ronghanghu/coco-caption.git@python23\n-        # Original pycocoevalcap code is at https://github.com/tylin/coco-caption\n-        # but has no python3 support yet.\n-        try:\n-            from pycocoevalcap.bleu.bleu import Bleu\n-            from pycocoevalcap.tokenizer.ptbtokenizer import PTBTokenizer\n-        except ModuleNotFoundError:\n-            print(\n-                \"Please install pycocoevalcap module using \"\n-                \"pip install git+https://github.com/ronghanghu/coco-caption.git@python23\"  # noqa\n-            )\n-            raise\n-\n-        self.tokenizer = PTBTokenizer()\n-        self.scorer = Bleu(4)\n-\n-    def eval_pred_list(self, pred_list):\n-        # Create reference and hypotheses captions.\n-        gts = {}\n-        res = {}\n-        for idx, entry in enumerate(pred_list):\n-            gts[idx] = [{\"caption\": a} for a in entry[\"gt_answers\"]]\n-            res[idx] = [{\"caption\": entry[\"pred_answer\"]}]\n-\n-        gts = self.tokenizer.tokenize(gts)\n-        res = self.tokenizer.tokenize(res)\n-        score, _ = self.scorer.compute_score(gts, res)\n-\n-        bleu4 = score[3]  # score is (Bleu-1, Bleu-2, Bleu-3, Bleu-4)\n-        return bleu4\n",
  "path": "gllava/eval/m4c_evaluator.py",
  "printDiff": "@@ -1,334 +0,0 @@\n-# Copyright (c) Facebook, Inc. and its affiliates.\n-import re\n-\n-from tqdm import tqdm\n-\n-\n-class EvalAIAnswerProcessor:\n-    \"\"\"\n-    Processes an answer similar to Eval AI\n-        copied from\n-        https://github.\u001b[93mcom/facebookresearch/mmf/blob/\u001b[93mc46b3b3391275b4181567db80943473a89ab98ab\u001b[0m/pythia/tasks/processors\u001b[0m.py#L897\n-    \"\"\"\n-\n-    CONTRACTIONS = {\n-        \"aint\": \"ain't\",\n-        \"arent\": \"aren't\",\n-        \"cant\": \"can't\",\n-        \"couldve\": \"could've\",\n-        \"couldnt\": \"couldn't\",\n-        \"couldn'tve\": \"couldn't've\",\n-        \"couldnt've\": \"couldn't've\",\n-        \"didnt\": \"didn't\",\n-        \"doesnt\": \"doesn't\",\n-        \"dont\": \"don't\",\n-        \"hadnt\": \"hadn't\",\n-        \"hadnt've\": \"hadn't've\",\n-        \"hadn'tve\": \"hadn't've\",\n-        \"hasnt\": \"hasn't\",\n-        \"havent\": \"haven't\",\n-        \"hed\": \"he'd\",\n-        \"hed've\": \"he'd've\",\n-        \"he'dve\": \"he'd've\",\n-        \"hes\": \"he's\",\n-        \"howd\": \"how'd\",\n-        \"howll\": \"how'll\",\n-        \"hows\": \"how's\",\n-        \"Id've\": \"I'd've\",\n-        \"I'dve\": \"I'd've\",\n-        \"Im\": \"I'm\",\n-        \"Ive\": \"I've\",\n-        \"isnt\": \"isn't\",\n-        \"itd\": \"it'd\",\n-        \"itd've\": \"it'd've\",\n-        \"it'dve\": \"it'd've\",\n-        \"itll\": \"it'll\",\n-        \"let's\": \"let's\",\n-        \"maam\": \"ma'am\",\n-        \"mightnt\": \"mightn't\",\n-        \"mightnt've\": \"mightn't've\",\n-        \"mightn'tve\": \"mightn't've\",\n-        \"mightve\": \"might've\",\n-        \"mustnt\": \"mustn't\",\n-        \"mustve\": \"must've\",\n-        \"neednt\": \"needn't\",\n-        \"notve\": \"not've\",\n-        \"oclock\": \"o'clock\",\n-        \"oughtnt\": \"oughtn't\",\n-        \"ow's'at\": \"'ow's'at\",\n-        \"'ows'at\": \"'ow's'at\",\n-        \"'ow'sat\": \"'ow's'at\",\n-        \"shant\": \"shan't\",\n-        \"shed've\": \"she'd've\",\n-        \"she'dve\": \"she'd've\",\n-        \"she's\": \"she's\",\n-        \"shouldve\": \"should've\",\n-        \"shouldnt\": \"shouldn't\",\n-        \"shouldnt've\": \"shouldn't've\",\n-        \"shouldn'tve\": \"shouldn't've\",\n-        \"somebody'd\": \"somebodyd\",\n-        \"somebodyd've\": \"somebody'd've\",\n-        \"somebody'dve\": \"somebody'd've\",\n-        \"somebodyll\": \"somebody'll\",\n-        \"somebodys\": \"somebody's\",\n-        \"someoned\": \"someone'd\",\n-        \"someoned've\": \"someone'd've\",\n-        \"someone'dve\": \"someone'd've\",\n-        \"someonell\": \"someone'll\",\n-        \"someones\": \"someone's\",\n-        \"somethingd\": \"something'd\",\n-        \"somethingd've\": \"something'd've\",\n-        \"something'dve\": \"something'd've\",\n-        \"somethingll\": \"something'll\",\n-        \"thats\": \"that's\",\n-        \"thered\": \"there'd\",\n-        \"thered've\": \"there'd've\",\n-        \"there'dve\": \"there'd've\",\n-        \"therere\": \"there're\",\n-        \"theres\": \"there's\",\n-        \"theyd\": \"they'd\",\n-        \"theyd've\": \"they'd've\",\n-        \"they'dve\": \"they'd've\",\n-        \"theyll\": \"they'll\",\n-        \"theyre\": \"they're\",\n-        \"theyve\": \"they've\",\n-        \"twas\": \"'twas\",\n-        \"wasnt\": \"wasn't\",\n-        \"wed've\": \"we'd've\",\n-        \"we'dve\": \"we'd've\",\n-        \"weve\": \"we've\",\n-        \"werent\": \"weren't\",\n-        \"whatll\": \"what'll\",\n-        \"whatre\": \"what're\",\n-        \"whats\": \"what's\",\n-        \"whatve\": \"what've\",\n-        \"whens\": \"when's\",\n-        \"whered\": \"where'd\",\n-        \"wheres\": \"where's\",\n-        \"whereve\": \"where've\",\n-        \"whod\": \"who'd\",\n-        \"whod've\": \"who'd've\",\n-        \"who'dve\": \"who'd've\",\n-        \"wholl\": \"who'll\",\n-        \"whos\": \"who's\",\n-        \"whove\": \"who've\",\n-        \"whyll\": \"why'll\",\n-        \"whyre\": \"why're\",\n-        \"whys\": \"why's\",\n-        \"wont\": \"won't\",\n-        \"wouldve\": \"would've\",\n-        \"wouldnt\": \"wouldn't\",\n-        \"wouldnt've\": \"wouldn't've\",\n-        \"wouldn'tve\": \"wouldn't've\",\n-        \"yall\": \"y'all\",\n-        \"yall'll\": \"y'all'll\",\n-        \"y'allll\": \"y'all'll\",\n-        \"yall'd've\": \"y'all'd've\",\n-        \"y'alld've\": \"y'all'd've\",\n-        \"y'all'dve\": \"y'all'd've\",\n-        \"youd\": \"you'd\",\n-        \"youd've\": \"you'd've\",\n-        \"you'dve\": \"you'd've\",\n-        \"youll\": \"you'll\",\n-        \"youre\": \"you're\",\n-        \"youve\": \"you've\",\n-    }\n-\n-    NUMBER_MAP = {\n-        \"none\": \"0\",\n-        \"zero\": \"0\",\n-        \"one\": \"1\",\n-        \"two\": \"2\",\n-        \"three\": \"3\",\n-        \"four\": \"4\",\n-        \"five\": \"5\",\n-        \"six\": \"6\",\n-        \"seven\": \"7\",\n-        \"eight\": \"8\",\n-        \"nine\": \"9\",\n-        \"ten\": \"10\",\n-    }\n-    ARTICLES = [\"a\", \"an\", \"the\"]\n-    PERIOD_STRIP = re.compile(r\"(?!<=\\d)(\\.)(?!\\d)\")\n-    COMMA_STRIP = re.compile(r\"(?<=\\d)(\\,)+(?=\\d)\")\n-    PUNCTUATIONS = [\n-        \";\",\n-        r\"/\",\n-        \"[\",\n-        \"]\",\n-        '\"',\n-        \"{\",\n-        \"}\",\n-        \"(\",\n-        \")\",\n-        \"=\",\n-        \"+\",\n-        \"\\\\\",\n-        \"_\",\n-        \"-\",\n-        \">\",\n-        \"<\",\n-        \"@\",\n-        \"`\",\n-        \",\",\n-        \"?\",\n-        \"!\",\n-    ]\n-\n-    def __init__(self, *args, **kwargs):\n-        pass\n-\n-    def word_tokenize(self, word):\n-        word = word.lower()\n-        word = word.replace(\",\", \"\").replace(\"?\", \"\").replace(\"'s\", \" 's\")\n-        return word.strip()\n-\n-    def process_punctuation(self, in_text):\n-        out_text = in_text\n-        for p in self.PUNCTUATIONS:\n-            if (p + \" \" in in_text or \" \" + p in in_text) or (\n-                re.search(self.COMMA_STRIP, in_text) is not None\n-            ):\n-                out_text = out_text.replace(p, \"\")\n-            else:\n-                out_text = out_text.replace(p, \" \")\n-        out_text = self.PERIOD_STRIP.sub(\"\", out_text, re.UNICODE)\n-        return out_text\n-\n-    def process_digit_article(self, in_text):\n-        out_text = []\n-        temp_text = in_text.lower().split()\n-        for word in temp_text:\n-            word = self.NUMBER_MAP.setdefault(word, word)\n-            if word not in self.ARTICLES:\n-                out_text.append(word)\n-            else:\n-                pass\n-        for word_id, word in enumerate(out_text):\n-            if word in self.CONTRACTIONS:\n-                out_text[word_id] = self.CONTRACTIONS[word]\n-        out_text = \" \".join(out_text)\n-        return out_text\n-\n-    def __call__(self, item):\n-        item = self.word_tokenize(item)\n-        item = item.replace(\"\\n\", \" \").replace(\"\\t\", \" \").strip()\n-        item = self.process_punctuation(item)\n-        item = self.process_digit_article(item)\n-        return item\n-\n-\n-class TextVQAAccuracyEvaluator:\n-    def __init__(self):\n-        self.answer_processor = EvalAIAnswerProcessor()\n-\n-    def _compute_answer_scores(self, raw_answers):\n-        \"\"\"\n-        compute the accuracy (soft score) of human answers\n-        \"\"\"\n-        answers = [self.answer_processor(a) for a in raw_answers]\n-        assert len(answers) == 10\n-        gt_answers = list(enumerate(answers))\n-        unique_answers = set(answers)\n-        unique_answer_scores = {}\n-\n-        for unique_answer in unique_answers:\n-            accs = []\n-            for gt_answer in gt_answers:\n-                other_answers = [item for item in gt_answers if item != gt_answer]\n-                matching_answers = [\n-                    item for item in other_answers if item[1] == unique_answer\n-                ]\n-                acc = min(1, float(len(matching_answers)) / 3)\n-                accs.append(acc)\n-            unique_answer_scores[unique_answer] = sum(accs) / len(accs)\n-\n-        return unique_answer_scores\n-\n-    def eval_pred_list(self, pred_list):\n-        pred_scores = []\n-        for entry in tqdm(pred_list):\n-            pred_answer = self.answer_processor(entry[\"pred_answer\"])\n-            unique_answer_scores = self._compute_answer_scores(entry[\"gt_answers\"])\n-            score = unique_answer_scores.get(pred_answer, 0.0)\n-            pred_scores.append(score)\n-\n-        accuracy = sum(pred_scores) / len(pred_scores)\n-        return accuracy\n-\n-\n-class STVQAAccuracyEvaluator:\n-    def __init__(self):\n-        self.answer_processor = EvalAIAnswerProcessor()\n-\n-    def eval_pred_list(self, pred_list):\n-        pred_scores = []\n-        for entry in pred_list:\n-            pred_answer = self.answer_processor(entry[\"pred_answer\"])\n-            gts = [self.answer_processor(a) for a in entry[\"gt_answers\"]]\n-            score = 1.0 if pred_answer in gts else 0.0\n-            pred_scores.append(score)\n-\n-        accuracy = sum(pred_scores) / len(pred_scores)\n-        return accuracy\n-\n-\n-class STVQAANLSEvaluator:\n-    def __init__(self):\n-        import editdistance  # install with `pip install editdistance`\n-\n-        self.get_edit_distance = editdistance.eval\n-\n-    def get_anls(self, s1, s2):\n-        s1 = s1.lower().strip()\n-        s2 = s2.lower().strip()\n-        iou = 1 - self.get_edit_distance(s1, s2) / max(len(s1), len(s2))\n-        anls = iou if iou >= 0.5 else 0.0\n-        return anls\n-\n-    def eval_pred_list(self, pred_list):\n-        pred_scores = []\n-        for entry in pred_list:\n-            anls = max(\n-                self.get_anls(entry[\"pred_answer\"], gt) for gt in entry[\"gt_answers\"]\n-            )\n-            pred_scores.append(anls)\n-\n-        accuracy = sum(pred_scores) / len(pred_scores)\n-        return accuracy\n-\n-\n-class TextCapsBleu4Evaluator:\n-    def __init__(self):\n-        # The following script requires Java 1.8.0 and pycocotools installed.\n-        # The pycocoevalcap can be installed with pip as\n-        # pip install git+https://github.com/ronghanghu/coco-caption.git@python23\n-        # Original pycocoevalcap code is at https://github.com/tylin/coco-caption\n-        # but has no python3 support yet.\n-        try:\n-            from pycocoevalcap.bleu.bleu import Bleu\n-            from pycocoevalcap.tokenizer.ptbtokenizer import PTBTokenizer\n-        except ModuleNotFoundError:\n-            print(\n-                \"Please install pycocoevalcap module using \"\n-                \"pip install git+https://github.com/ronghanghu/coco-caption.git@python23\"  # noqa\n-            )\n-            raise\n-\n-        self.tokenizer = PTBTokenizer()\n-        self.scorer = Bleu(4)\n-\n-    def eval_pred_list(self, pred_list):\n-        # Create reference and hypotheses captions.\n-        gts = {}\n-        res = {}\n-        for idx, entry in enumerate(pred_list):\n-            gts[idx] = [{\"caption\": a} for a in entry[\"gt_answers\"]]\n-            res[idx] = [{\"caption\": entry[\"pred_answer\"]}]\n-\n-        gts = self.tokenizer.tokenize(gts)\n-        res = self.tokenizer.tokenize(res)\n-        score, _ = self.scorer.compute_score(gts, res)\n-\n-        bleu4 = score[3]  # score is (Bleu-1, Bleu-2, Bleu-3, Bleu-4)\n-        return bleu4\n",
  "reason": "High Entropy",
  "stringsFound": [
    "com/facebookresearch/mmf/blob/c46b3b3391275b4181567db80943473a89ab98ab/pythia/tasks/processors",
    "c46b3b3391275b4181567db80943473a89ab98ab"
  ]
}
----------------------------------------
Secret #2:
{
  "branch": "origin/main",
  "commit": "update\n",
  "commitHash": "838e2643a52018f5d3eeee7ed3ebd6dc411c818b",
  "date": "2023-12-22 07:20:51",
  "diff": "@@ -1,484 +0,0 @@\n-\"\"\"\n-Copied from https://github.com/HazyResearch/flash-attention/blob/eff9fe6b8076df59d64d7a3f464696738a3c7c24/flash_attn/flash_attn_triton.py\n-update imports to use 'triton_pre_mlir'\n-\n-*Experimental* implementation of FlashAttention in Triton.\n-Tested with triton==2.0.0.dev20221202.\n-Triton 2.0 has a new backend (MLIR) but seems like it doesn't yet work for head dimensions\n-other than 64:\n-https://github.com/openai/triton/blob/d376020f90002757eea3ea9475d4f7cfc2ec5ead/python/triton/ops/flash_attention.py#L207\n-We'll update this implementation with the new Triton backend once this is fixed.\n-\n-We use the FlashAttention implementation from Phil Tillet a starting point.\n-https://github.com/openai/triton/blob/master/python/tutorials/06-fused-attention.py\n-\n-Changes:\n-- Implement both causal and non-causal attention.\n-- Implement both self-attention and cross-attention.\n-- Support arbitrary seqlens (not just multiples of 128), for both forward and backward.\n-- Support all head dimensions up to 128 (not just 16, 32, 64, 128), for both forward and backward.\n-- Support attention bias.\n-- Speed up the forward pass a bit, and only store the LSE instead of m and l.\n-- Make the backward for d=128 much faster by reducing register spilling.\n-- Optionally parallelize the backward pass across seqlen_k, to deal with the case of\n-small batch size * nheads.\n-\n-Caution:\n-- This is an *experimental* implementation. The forward pass should be quite robust but\n-I'm not 100% sure that the backward pass doesn't have race conditions (due to the Triton compiler).\n-- This implementation has only been tested on A100.\n-- If you plan to use headdim other than 64 and 128, you should test for race conditions\n-(due to the Triton compiler), as done in tests/test_flash_attn.py\n-\"test_flash_attn_triton_race_condition\". I've tested and fixed many race conditions\n-for different head dimensions (40, 48, 64, 128, 80, 88, 96), but I'm still not 100% confident\n-that there are none left for other head dimensions.\n-\n-Differences between this Triton version and the CUDA version:\n-- Triton version doesn't support dropout.\n-- Triton forward is generally faster than CUDA forward, while Triton backward is\n-generally slower than CUDA backward. Overall Triton forward + backward is slightly slower\n-than CUDA forward + backward.\n-- Triton version doesn't support different sequence lengths in a batch (i.e., RaggedTensor/NestedTensor).\n-- Triton version supports attention bias, while CUDA version doesn't.\n-\"\"\"\n-import math\n-import torch\n-import triton_pre_mlir as triton\n-import triton_pre_mlir.language as tl\n-\n-@triton.heuristics({'EVEN_M': lambda args: args['seqlen_q'] % args['BLOCK_M'] == 0, 'EVEN_N': lambda args: args['seqlen_k'] % args['BLOCK_N'] == 0, 'EVEN_HEADDIM': lambda args: args['headdim'] == args['BLOCK_HEADDIM']})\n-@triton.jit\n-def _fwd_kernel(Q, K, V, Bias, Out, Lse, TMP, softmax_scale, stride_qb, stride_qh, stride_qm, stride_kb, stride_kh, stride_kn, stride_vb, stride_vh, stride_vn, stride_bb, stride_bh, stride_bm, stride_ob, stride_oh, stride_om, nheads, seqlen_q, seqlen_k, seqlen_q_rounded, headdim, CACHE_KEY_SEQLEN_Q, CACHE_KEY_SEQLEN_K, BIAS_TYPE: tl.constexpr, IS_CAUSAL: tl.constexpr, BLOCK_HEADDIM: tl.constexpr, EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n-    start_m = tl.program_id(0)\n-    off_hb = tl.program_id(1)\n-    off_b = off_hb // nheads\n-    off_h = off_hb % nheads\n-    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n-    offs_n = tl.arange(0, BLOCK_N)\n-    offs_d = tl.arange(0, BLOCK_HEADDIM)\n-    q_ptrs = Q + off_b * stride_qb + off_h * stride_qh + (offs_m[:, None] * stride_qm + offs_d[None, :])\n-    k_ptrs = K + off_b * stride_kb + off_h * stride_kh + (offs_n[:, None] * stride_kn + offs_d[None, :])\n-    v_ptrs = V + off_b * stride_vb + off_h * stride_vh + (offs_n[:, None] * stride_vn + offs_d[None, :])\n-    if BIAS_TYPE == 'vector':\n-        b_ptrs = Bias + off_b * stride_bb + off_h * stride_bh + offs_n\n-    elif BIAS_TYPE == 'matrix':\n-        b_ptrs = Bias + off_b * stride_bb + off_h * stride_bh + (offs_m[:, None] * stride_bm + offs_n[None, :])\n-    t_ptrs = TMP + off_hb * seqlen_q_rounded + offs_m\n-    lse_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float('inf')\n-    m_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float('inf')\n-    acc_o = tl.zeros([BLOCK_M, BLOCK_HEADDIM], dtype=tl.float32)\n-    if EVEN_M & EVEN_N:\n-        if EVEN_HEADDIM:\n-            q = tl.load(q_ptrs)\n-        else:\n-            q = tl.load(q_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n-    elif EVEN_HEADDIM:\n-        q = tl.load(q_ptrs, mask=offs_m[:, None] < seqlen_q, other=0.0)\n-    else:\n-        q = tl.load(q_ptrs, mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0)\n-    end_n = seqlen_k if not IS_CAUSAL else tl.minimum((start_m + 1) * BLOCK_M, seqlen_k)\n-    for start_n in range(0, end_n, BLOCK_N):\n-        start_n = tl.multiple_of(start_n, BLOCK_N)\n-        if EVEN_N & EVEN_M:\n-            if EVEN_HEADDIM:\n-                k = tl.load(k_ptrs + start_n * stride_kn)\n-            else:\n-                k = tl.load(k_ptrs + start_n * stride_kn, mask=offs_d[None, :] < headdim, other=0.0)\n-        elif EVEN_HEADDIM:\n-            k = tl.load(k_ptrs + start_n * stride_kn, mask=(start_n + offs_n)[:, None] < seqlen_k, other=0.0)\n-        else:\n-            k = tl.load(k_ptrs + start_n * stride_kn, mask=((start_n + offs_n)[:, None] < seqlen_k) & (offs_d[None, :] < headdim), other=0.0)\n-        qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n-        qk += tl.dot(q, k, trans_b=True)\n-        if not EVEN_N:\n-            qk += tl.where((start_n + offs_n)[None, :] < seqlen_k, 0, float('-inf'))\n-        if IS_CAUSAL:\n-            qk += tl.where(offs_m[:, None] >= (start_n + offs_n)[None, :], 0, float('-inf'))\n-        if BIAS_TYPE != 'none':\n-            if BIAS_TYPE == 'vector':\n-                if EVEN_N:\n-                    bias = tl.load(b_ptrs + start_n).to(tl.float32)\n-                else:\n-                    bias = tl.load(b_ptrs + start_n, mask=start_n + offs_n < seqlen_k, other=0.0).to(tl.float32)\n-                bias = bias[None, :]\n-            elif BIAS_TYPE == 'matrix':\n-                if EVEN_M & EVEN_N:\n-                    bias = tl.load(b_ptrs + start_n).to(tl.float32)\n-                else:\n-                    bias = tl.load(b_ptrs + start_n, mask=(offs_m[:, None] < seqlen_q) & ((start_n + offs_n)[None, :] < seqlen_k), other=0.0).to(tl.float32)\n-            qk = qk * softmax_scale + bias\n-            m_ij = tl.maximum(tl.max(qk, 1), lse_i)\n-            p = tl.exp(qk - m_ij[:, None])\n-        else:\n-            m_ij = tl.maximum(tl.max(qk, 1) * softmax_scale, lse_i)\n-            p = tl.exp(qk * softmax_scale - m_ij[:, None])\n-        l_ij = tl.sum(p, 1)\n-        acc_o_scale = tl.exp(m_i - m_ij)\n-        tl.store(t_ptrs, acc_o_scale)\n-        acc_o_scale = tl.load(t_ptrs)\n-        acc_o = acc_o * acc_o_scale[:, None]\n-        if EVEN_N & EVEN_M:\n-            if EVEN_HEADDIM:\n-                v = tl.load(v_ptrs + start_n * stride_vn)\n-            else:\n-                v = tl.load(v_ptrs + start_n * stride_vn, mask=offs_d[None, :] < headdim, other=0.0)\n-        elif EVEN_HEADDIM:\n-            v = tl.load(v_ptrs + start_n * stride_vn, mask=(start_n + offs_n)[:, None] < seqlen_k, other=0.0)\n-        else:\n-            v = tl.load(v_ptrs + start_n * stride_vn, mask=((start_n + offs_n)[:, None] < seqlen_k) & (offs_d[None, :] < headdim), other=0.0)\n-        p = p.to(v.dtype)\n-        acc_o += tl.dot(p, v)\n-        m_i = m_ij\n-        l_i_new = tl.exp(lse_i - m_ij) + l_ij\n-        lse_i = m_ij + tl.log(l_i_new)\n-    o_scale = tl.exp(m_i - lse_i)\n-    tl.store(t_ptrs, o_scale)\n-    o_scale = tl.load(t_ptrs)\n-    acc_o = acc_o * o_scale[:, None]\n-    start_m = tl.program_id(0)\n-    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n-    lse_ptrs = Lse + off_hb * seqlen_q_rounded + offs_m\n-    tl.store(lse_ptrs, lse_i)\n-    offs_d = tl.arange(0, BLOCK_HEADDIM)\n-    out_ptrs = Out + off_b * stride_ob + off_h * stride_oh + (offs_m[:, None] * stride_om + offs_d[None, :])\n-    if EVEN_M:\n-        if EVEN_HEADDIM:\n-            tl.store(out_ptrs, acc_o)\n-        else:\n-            tl.store(out_ptrs, acc_o, mask=offs_d[None, :] < headdim)\n-    elif EVEN_HEADDIM:\n-        tl.store(out_ptrs, acc_o, mask=offs_m[:, None] < seqlen_q)\n-    else:\n-        tl.store(out_ptrs, acc_o, mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim))\n-\n-@triton.jit\n-def _bwd_preprocess_do_o_dot(Out, DO, Delta, stride_ob, stride_oh, stride_om, stride_dob, stride_doh, stride_dom, nheads, seqlen_q, seqlen_q_rounded, headdim, BLOCK_M: tl.constexpr, BLOCK_HEADDIM: tl.constexpr):\n-    start_m = tl.program_id(0)\n-    off_hb = tl.program_id(1)\n-    off_b = off_hb // nheads\n-    off_h = off_hb % nheads\n-    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n-    offs_d = tl.arange(0, BLOCK_HEADDIM)\n-    o = tl.load(Out + off_b * stride_ob + off_h * stride_oh + offs_m[:, None] * stride_om + offs_d[None, :], mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0).to(tl.float32)\n-    do = tl.load(DO + off_b * stride_dob + off_h * stride_doh + offs_m[:, None] * stride_dom + offs_d[None, :], mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0).to(tl.float32)\n-    delta = tl.sum(o * do, axis=1)\n-    tl.store(Delta + off_hb * seqlen_q_rounded + offs_m, delta)\n-\n-@triton.jit\n-def _bwd_store_dk_dv(dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim, EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr):\n-    if EVEN_N & EVEN_M:\n-        if EVEN_HEADDIM:\n-            tl.store(dv_ptrs, dv)\n-            tl.store(dk_ptrs, dk)\n-        else:\n-            tl.store(dv_ptrs, dv, mask=offs_d[None, :] < headdim)\n-            tl.store(dk_ptrs, dk, mask=offs_d[None, :] < headdim)\n-    elif EVEN_HEADDIM:\n-        tl.store(dv_ptrs, dv, mask=offs_n[:, None] < seqlen_k)\n-        tl.store(dk_ptrs, dk, mask=offs_n[:, None] < seqlen_k)\n-    else:\n-        tl.store(dv_ptrs, dv, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim))\n-        tl.store(dk_ptrs, dk, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim))\n-\n-@triton.jit\n-def _bwd_kernel_one_col_block(start_n, Q, K, V, Bias, DO, DQ, DK, DV, LSE, D, softmax_scale, stride_qm, stride_kn, stride_vn, stride_bm, stride_dom, stride_dqm, stride_dkn, stride_dvn, seqlen_q, seqlen_k, headdim, ATOMIC_ADD: tl.constexpr, BIAS_TYPE: tl.constexpr, IS_CAUSAL: tl.constexpr, BLOCK_HEADDIM: tl.constexpr, EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n-    begin_m = 0 if not IS_CAUSAL else start_n * BLOCK_N // BLOCK_M * BLOCK_M\n-    offs_qm = begin_m + tl.arange(0, BLOCK_M)\n-    offs_n = start_n * BLOCK_N + tl.arange(0, BLOCK_N)\n-    offs_m = tl.arange(0, BLOCK_M)\n-    offs_d = tl.arange(0, BLOCK_HEADDIM)\n-    q_ptrs = Q + (offs_qm[:, None] * stride_qm + offs_d[None, :])\n-    k_ptrs = K + (offs_n[:, None] * stride_kn + offs_d[None, :])\n-    v_ptrs = V + (offs_n[:, None] * stride_vn + offs_d[None, :])\n-    do_ptrs = DO + (offs_qm[:, None] * stride_dom + offs_d[None, :])\n-    dq_ptrs = DQ + (offs_qm[:, None] * stride_dqm + offs_d[None, :])\n-    if BIAS_TYPE == 'vector':\n-        b_ptrs = Bias + offs_n\n-    elif BIAS_TYPE == 'matrix':\n-        b_ptrs = Bias + (offs_qm[:, None] * stride_bm + offs_n[None, :])\n-    dv = tl.zeros([BLOCK_N, BLOCK_HEADDIM], dtype=tl.float32)\n-    dk = tl.zeros([BLOCK_N, BLOCK_HEADDIM], dtype=tl.float32)\n-    if begin_m >= seqlen_q:\n-        dv_ptrs = DV + (offs_n[:, None] * stride_dvn + offs_d[None, :])\n-        dk_ptrs = DK + (offs_n[:, None] * stride_dkn + offs_d[None, :])\n-        _bwd_store_dk_dv(dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim, EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM)\n-        return\n-    if EVEN_N & EVEN_M:\n-        if EVEN_HEADDIM:\n-            k = tl.load(k_ptrs)\n-            v = tl.load(v_ptrs)\n-        else:\n-            k = tl.load(k_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n-            v = tl.load(v_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n-    elif EVEN_HEADDIM:\n-        k = tl.load(k_ptrs, mask=offs_n[:, None] < seqlen_k, other=0.0)\n-        v = tl.load(v_ptrs, mask=offs_n[:, None] < seqlen_k, other=0.0)\n-    else:\n-        k = tl.load(k_ptrs, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim), other=0.0)\n-        v = tl.load(v_ptrs, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim), other=0.0)\n-    num_block_m = tl.cdiv(seqlen_q, BLOCK_M)\n-    for start_m in range(begin_m, num_block_m * BLOCK_M, BLOCK_M):\n-        start_m = tl.multiple_of(start_m, BLOCK_M)\n-        offs_m_curr = start_m + offs_m\n-        if EVEN_M & EVEN_HEADDIM:\n-            q = tl.load(q_ptrs)\n-        elif EVEN_HEADDIM:\n-            q = tl.load(q_ptrs, mask=offs_m_curr[:, None] < seqlen_q, other=0.0)\n-        else:\n-            q = tl.load(q_ptrs, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0)\n-        qk = tl.dot(q, k, trans_b=True)\n-        if not EVEN_N:\n-            qk = tl.where(offs_n[None, :] < seqlen_k, qk, float('-inf'))\n-        if IS_CAUSAL:\n-            qk = tl.where(offs_m_curr[:, None] >= offs_n[None, :], qk, float('-inf'))\n-        if BIAS_TYPE != 'none':\n-            tl.debug_barrier()\n-            if BIAS_TYPE == 'vector':\n-                if EVEN_N:\n-                    bias = tl.load(b_ptrs).to(tl.float32)\n-                else:\n-                    bias = tl.load(b_ptrs, mask=offs_n < seqlen_k, other=0.0).to(tl.float32)\n-                bias = bias[None, :]\n-            elif BIAS_TYPE == 'matrix':\n-                if EVEN_M & EVEN_N:\n-                    bias = tl.load(b_ptrs).to(tl.float32)\n-                else:\n-                    bias = tl.load(b_ptrs, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_n[None, :] < seqlen_k), other=0.0).to(tl.float32)\n-            qk = qk * softmax_scale + bias\n-        if not EVEN_M & EVEN_HEADDIM:\n-            tl.debug_barrier()\n-        lse_i = tl.load(LSE + offs_m_curr)\n-        if BIAS_TYPE == 'none':\n-            p = tl.exp(qk * softmax_scale - lse_i[:, None])\n-        else:\n-            p = tl.exp(qk - lse_i[:, None])\n-        if EVEN_M & EVEN_HEADDIM:\n-            do = tl.load(do_ptrs)\n-        else:\n-            do = tl.load(do_ptrs, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0)\n-        dv += tl.dot(p.to(do.dtype), do, trans_a=True)\n-        if not EVEN_M & EVEN_HEADDIM:\n-            tl.debug_barrier()\n-        dp = tl.dot(do, v, trans_b=True)\n-        if not EVEN_HEADDIM:\n-            tl.debug_barrier()\n-        Di = tl.load(D + offs_m_curr)\n-        ds = (p * (dp - Di[:, None]) * softmax_scale).to(q.dtype)\n-        dk += tl.dot(ds, q, trans_a=True)\n-        if not EVEN_M & EVEN_HEADDIM:\n-            tl.debug_barrier()\n-        if not ATOMIC_ADD:\n-            if EVEN_M & EVEN_HEADDIM:\n-                dq = tl.load(dq_ptrs, eviction_policy='evict_last')\n-                dq += tl.dot(ds, k)\n-                tl.store(dq_ptrs, dq, eviction_policy='evict_last')\n-            elif EVEN_HEADDIM:\n-                dq = tl.load(dq_ptrs, mask=offs_m_curr[:, None] < seqlen_q, other=0.0, eviction_policy='evict_last')\n-                dq += tl.dot(ds, k)\n-                tl.store(dq_ptrs, dq, mask=offs_m_curr[:, None] < seqlen_q, eviction_policy='evict_last')\n-            else:\n-                dq = tl.load(dq_ptrs, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0, eviction_policy='evict_last')\n-                dq += tl.dot(ds, k)\n-                tl.store(dq_ptrs, dq, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim), eviction_policy='evict_last')\n-        else:\n-            dq = tl.dot(ds, k)\n-            if EVEN_M & EVEN_HEADDIM:\n-                tl.atomic_add(dq_ptrs, dq)\n-            elif EVEN_HEADDIM:\n-                tl.atomic_add(dq_ptrs, dq, mask=offs_m_curr[:, None] < seqlen_q)\n-            else:\n-                tl.atomic_add(dq_ptrs, dq, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim))\n-        dq_ptrs += BLOCK_M * stride_dqm\n-        q_ptrs += BLOCK_M * stride_qm\n-        do_ptrs += BLOCK_M * stride_dom\n-        if BIAS_TYPE == 'matrix':\n-            b_ptrs += BLOCK_M * stride_bm\n-    dv_ptrs = DV + (offs_n[:, None] * stride_dvn + offs_d[None, :])\n-    dk_ptrs = DK + (offs_n[:, None] * stride_dkn + offs_d[None, :])\n-    _bwd_store_dk_dv(dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim, EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM)\n-\n-def init_to_zero(name):\n-    return lambda nargs: nargs[name].zero_()\n-\n-@triton.autotune(configs=[triton.Config({'BLOCK_M': 128, 'BLOCK_N': 128, 'SEQUENCE_PARALLEL': False}, num_warps=8, num_stages=1, pre_hook=init_to_zero('DQ')), triton.Config({'BLOCK_M': 128, 'BLOCK_N': 128, 'SEQUENCE_PARALLEL': True}, num_warps=8, num_stages=1, pre_hook=init_to_zero('DQ'))], key=['CACHE_KEY_SEQLEN_Q', 'CACHE_KEY_SEQLEN_K', 'BIAS_TYPE', 'IS_CAUSAL', 'BLOCK_HEADDIM'])\n-@triton.heuristics({'EVEN_M': lambda args: args['seqlen_q'] % args['BLOCK_M'] == 0, 'EVEN_N': lambda args: args['seqlen_k'] % args['BLOCK_N'] == 0, 'EVEN_HEADDIM': lambda args: args['headdim'] == args['BLOCK_HEADDIM']})\n-@triton.jit\n-def _bwd_kernel(Q, K, V, Bias, DO, DQ, DK, DV, LSE, D, softmax_scale, stride_qb, stride_qh, stride_qm, stride_kb, stride_kh, stride_kn, stride_vb, stride_vh, stride_vn, stride_bb, stride_bh, stride_bm, stride_dob, stride_doh, stride_dom, stride_dqb, stride_dqh, stride_dqm, stride_dkb, stride_dkh, stride_dkn, stride_dvb, stride_dvh, stride_dvn, nheads, seqlen_q, seqlen_k, seqlen_q_rounded, headdim, CACHE_KEY_SEQLEN_Q, CACHE_KEY_SEQLEN_K, BIAS_TYPE: tl.constexpr, IS_CAUSAL: tl.constexpr, BLOCK_HEADDIM: tl.constexpr, SEQUENCE_PARALLEL: tl.constexpr, EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n-    off_hb = tl.program_id(1)\n-    off_b = off_hb // nheads\n-    off_h = off_hb % nheads\n-    Q += off_b * stride_qb + off_h * stride_qh\n-    K += off_b * stride_kb + off_h * stride_kh\n-    V += off_b * stride_vb + off_h * stride_vh\n-    DO += off_b * stride_dob + off_h * stride_doh\n-    DQ += off_b * stride_dqb + off_h * stride_dqh\n-    DK += off_b * stride_dkb + off_h * stride_dkh\n-    DV += off_b * stride_dvb + off_h * stride_dvh\n-    if BIAS_TYPE != 'none':\n-        Bias += off_b * stride_bb + off_h * stride_bh\n-    D += off_hb * seqlen_q_rounded\n-    LSE += off_hb * seqlen_q_rounded\n-    if not SEQUENCE_PARALLEL:\n-        num_block_n = tl.cdiv(seqlen_k, BLOCK_N)\n-        for start_n in range(0, num_block_n):\n-            _bwd_kernel_one_col_block(start_n, Q, K, V, Bias, DO, DQ, DK, DV, LSE, D, softmax_scale, stride_qm, stride_kn, stride_vn, stride_bm, stride_dom, stride_dqm, stride_dkn, stride_dvn, seqlen_q, seqlen_k, headdim, ATOMIC_ADD=False, BIAS_TYPE=BIAS_TYPE, IS_CAUSAL=IS_CAUSAL, BLOCK_HEADDIM=BLOCK_HEADDIM, EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM, BLOCK_M=BLOCK_M, BLOCK_N=BLOCK_N)\n-    else:\n-        start_n = tl.program_id(0)\n-        _bwd_kernel_one_col_block(start_n, Q, K, V, Bias, DO, DQ, DK, DV, LSE, D, softmax_scale, stride_qm, stride_kn, stride_vn, stride_bm, stride_dom, stride_dqm, stride_dkn, stride_dvn, seqlen_q, seqlen_k, headdim, ATOMIC_ADD=True, BIAS_TYPE=BIAS_TYPE, IS_CAUSAL=IS_CAUSAL, BLOCK_HEADDIM=BLOCK_HEADDIM, EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM, BLOCK_M=BLOCK_M, BLOCK_N=BLOCK_N)\n-\n-def _flash_attn_forward(q, k, v, bias=None, causal=False, softmax_scale=None):\n-    (batch, seqlen_q, nheads, d) = q.shape\n-    (_, seqlen_k, _, _) = k.shape\n-    assert k.shape == (batch, seqlen_k, nheads, d)\n-    assert v.shape == (batch, seqlen_k, nheads, d)\n-    assert d <= 128, 'FlashAttention only support head dimensions up to 128'\n-    assert q.dtype == k.dtype == v.dtype, 'All tensors must have the same type'\n-    assert q.dtype in [torch.float16, torch.bfloat16], 'Only support fp16 and bf16'\n-    assert q.is_cuda and k.is_cuda and v.is_cuda\n-    softmax_scale = softmax_scale or 1.0 / math.sqrt(d)\n-    has_bias = bias is not None\n-    bias_type = 'none'\n-    if has_bias:\n-        assert bias.dtype in [q.dtype, torch.float]\n-        assert bias.is_cuda\n-        assert bias.dim() == 4\n-        if bias.stride(-1) != 1:\n-            bias = bias.contiguous()\n-        if bias.shape[2:] == (1, seqlen_k):\n-            bias_type = 'vector'\n-        elif bias.shape[2:] == (seqlen_q, seqlen_k):\n-            bias_type = 'matrix'\n-        else:\n-            raise RuntimeError('Last 2 dimensions of bias must be (1, seqlen_k) or (seqlen_q, seqlen_k)')\n-        bias = bias.expand(batch, nheads, seqlen_q, seqlen_k)\n-    bias_strides = (bias.stride(0), bias.stride(1), bias.stride(2)) if has_bias else (0, 0, 0)\n-    seqlen_q_rounded = math.ceil(seqlen_q / 128) * 128\n-    lse = torch.empty((batch, nheads, seqlen_q_rounded), device=q.device, dtype=torch.float32)\n-    tmp = torch.empty((batch, nheads, seqlen_q_rounded), device=q.device, dtype=torch.float32)\n-    o = torch.empty_like(q)\n-    BLOCK_HEADDIM = max(triton.next_power_of_2(d), 16)\n-    BLOCK = 128\n-    num_warps = 4 if d <= 64 else 8\n-    grid = lambda META: (triton.cdiv(seqlen_q, META['BLOCK_M']), batch * nheads)\n-    _fwd_kernel[grid](q, k, v, bias, o, lse, tmp, softmax_scale, q.stride(0), q.stride(2), q.stride(1), k.stride(0), k.stride(2), k.stride(1), v.stride(0), v.stride(2), v.stride(1), *bias_strides, o.stride(0), o.stride(2), o.stride(1), nheads, seqlen_q, seqlen_k, seqlen_q_rounded, d, seqlen_q // 32, seqlen_k // 32, bias_type, causal, BLOCK_HEADDIM, BLOCK_M=BLOCK, BLOCK_N=BLOCK, num_warps=num_warps, num_stages=1)\n-    return (o, lse, softmax_scale)\n-\n-def _flash_attn_backward(do, q, k, v, o, lse, dq, dk, dv, bias=None, causal=False, softmax_scale=None):\n-    if do.stride(-1) != 1:\n-        do = do.contiguous()\n-    (batch, seqlen_q, nheads, d) = q.shape\n-    (_, seqlen_k, _, _) = k.shape\n-    assert d <= 128\n-    seqlen_q_rounded = math.ceil(seqlen_q / 128) * 128\n-    assert lse.shape == (batch, nheads, seqlen_q_rounded)\n-    assert q.stride(-1) == k.stride(-1) == v.stride(-1) == o.stride(-1) == 1\n-    assert dq.stride(-1) == dk.stride(-1) == dv.stride(-1) == 1\n-    softmax_scale = softmax_scale or 1.0 / math.sqrt(d)\n-    dq_accum = torch.empty_like(q, dtype=torch.float32)\n-    delta = torch.empty_like(lse)\n-    BLOCK_HEADDIM = max(triton.next_power_of_2(d), 16)\n-    grid = lambda META: (triton.cdiv(seqlen_q, META['BLOCK_M']), batch * nheads)\n-    _bwd_preprocess_do_o_dot[grid](o, do, delta, o.stride(0), o.stride(2), o.stride(1), do.stride(0), do.stride(2), do.stride(1), nheads, seqlen_q, seqlen_q_rounded, d, BLOCK_M=128, BLOCK_HEADDIM=BLOCK_HEADDIM)\n-    has_bias = bias is not None\n-    bias_type = 'none'\n-    if has_bias:\n-        assert bias.dtype in [q.dtype, torch.float]\n-        assert bias.is_cuda\n-        assert bias.dim() == 4\n-        assert bias.stride(-1) == 1\n-        if bias.shape[2:] == (1, seqlen_k):\n-            bias_type = 'vector'\n-        elif bias.shape[2:] == (seqlen_q, seqlen_k):\n-            bias_type = 'matrix'\n-        else:\n-            raise RuntimeError('Last 2 dimensions of bias must be (1, seqlen_k) or (seqlen_q, seqlen_k)')\n-        bias = bias.expand(batch, nheads, seqlen_q, seqlen_k)\n-    bias_strides = (bias.stride(0), bias.stride(1), bias.stride(2)) if has_bias else (0, 0, 0)\n-    grid = lambda META: (triton.cdiv(seqlen_k, META['BLOCK_N']) if META['SEQUENCE_PARALLEL'] else 1, batch * nheads)\n-    _bwd_kernel[grid](q, k, v, bias, do, dq_accum, dk, dv, lse, delta, softmax_scale, q.stride(0), q.stride(2), q.stride(1), k.stride(0), k.stride(2), k.stride(1), v.stride(0), v.stride(2), v.stride(1), *bias_strides, do.stride(0), do.stride(2), do.stride(1), dq_accum.stride(0), dq_accum.stride(2), dq_accum.stride(1), dk.stride(0), dk.stride(2), dk.stride(1), dv.stride(0), dv.stride(2), dv.stride(1), nheads, seqlen_q, seqlen_k, seqlen_q_rounded, d, seqlen_q // 32, seqlen_k // 32, bias_type, causal, BLOCK_HEADDIM)\n-    dq.copy_(dq_accum)\n-\n-class FlashAttnQKVPackedFunc(torch.autograd.Function):\n-\n-    @staticmethod\n-    def forward(ctx, qkv, bias=None, causal=False, softmax_scale=None):\n-        \"\"\"\n-            qkv: (batch, seqlen, 3, nheads, headdim)\n-            bias: optional, shape broadcastible to (batch, nheads, seqlen, seqlen).\n-                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen).\n-                ALiBi mask for non-causal would have shape (1, nheads, seqlen, seqlen)\n-        \"\"\"\n-        if qkv.stride(-1) != 1:\n-            qkv = qkv.contiguous()\n-        (o, lse, ctx.softmax_scale) = _flash_attn_forward(qkv[:, :, 0], qkv[:, :, 1], qkv[:, :, 2], bias=bias, causal=causal, softmax_scale=softmax_scale)\n-        ctx.save_for_backward(qkv, o, lse, bias)\n-        ctx.causal = causal\n-        return o\n-\n-    @staticmethod\n-    def backward(ctx, do):\n-        (qkv, o, lse, bias) = ctx.saved_tensors\n-        assert not ctx.needs_input_grad[1], 'FlashAttention does not support bias gradient yet'\n-        with torch.inference_mode():\n-            dqkv = torch.empty_like(qkv)\n-            _flash_attn_backward(do, qkv[:, :, 0], qkv[:, :, 1], qkv[:, :, 2], o, lse, dqkv[:, :, 0], dqkv[:, :, 1], dqkv[:, :, 2], bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n-        return (dqkv, None, None, None)\n-flash_attn_qkvpacked_func = FlashAttnQKVPackedFunc.apply\n-\n-class FlashAttnKVPackedFunc(torch.autograd.Function):\n-\n-    @staticmethod\n-    def forward(ctx, q, kv, bias=None, causal=False, softmax_scale=None):\n-        \"\"\"\n-            q: (batch, seqlen_q, nheads, headdim)\n-            kv: (batch, seqlen_k, 2, nheads, headdim)\n-            bias: optional, shape broadcastible to (batch, nheads, seqlen_q, seqlen_k).\n-                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen_k).\n-                ALiBi mask for non-causal would have shape (1, nheads, seqlen_q, seqlen_k)\n-        \"\"\"\n-        (q, kv) = [x if x.stride(-1) == 1 else x.contiguous() for x in [q, kv]]\n-        (o, lse, ctx.softmax_scale) = _flash_attn_forward(q, kv[:, :, 0], kv[:, :, 1], bias=bias, causal=causal, softmax_scale=softmax_scale)\n-        ctx.save_for_backward(q, kv, o, lse, bias)\n-        ctx.causal = causal\n-        return o\n-\n-    @staticmethod\n-    def backward(ctx, do):\n-        (q, kv, o, lse, bias) = ctx.saved_tensors\n-        if len(ctx.needs_input_grad) >= 3:\n-            assert not ctx.needs_input_grad[2], 'FlashAttention does not support bias gradient yet'\n-        with torch.inference_mode():\n-            dq = torch.empty_like(q)\n-            dkv = torch.empty_like(kv)\n-            _flash_attn_backward(do, q, kv[:, :, 0], kv[:, :, 1], o, lse, dq, dkv[:, :, 0], dkv[:, :, 1], bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n-        return (dq, dkv, None, None, None)\n-flash_attn_kvpacked_func = FlashAttnKVPackedFunc.apply\n-\n-class FlashAttnFunc(torch.autograd.Function):\n-\n-    @staticmethod\n-    def forward(ctx, q, k, v, bias=None, causal=False, softmax_scale=None):\n-        \"\"\"\n-            q: (batch_size, seqlen_q, nheads, headdim)\n-            k, v: (batch_size, seqlen_k, nheads, headdim)\n-            bias: optional, shape broadcastible to (batch, nheads, seqlen_q, seqlen_k).\n-                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen_k).\n-                ALiBi mask for non-causal would have shape (1, nheads, seqlen_q, seqlen_k)\n-        \"\"\"\n-        (q, k, v) = [x if x.stride(-1) == 1 else x.contiguous() for x in [q, k, v]]\n-        (o, lse, ctx.softmax_scale) = _flash_attn_forward(q, k, v, bias=bias, causal=causal, softmax_scale=softmax_scale)\n-        ctx.save_for_backward(q, k, v, o, lse, bias)\n-        ctx.causal = causal\n-        return o\n-\n-    @staticmethod\n-    def backward(ctx, do):\n-        (q, k, v, o, lse, bias) = ctx.saved_tensors\n-        assert not ctx.needs_input_grad[3], 'FlashAttention does not support bias gradient yet'\n-        with torch.inference_mode():\n-            dq = torch.empty_like(q)\n-            dk = torch.empty_like(k)\n-            dv = torch.empty_like(v)\n-            _flash_attn_backward(do, q, k, v, o, lse, dq, dk, dv, bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n-        return (dq, dk, dv, None, None, None)\n-flash_attn_func = FlashAttnFunc.apply\n\\ No newline at end of file\n",
  "path": "gllava/model/language_model/mpt/flash_attn_triton.py",
  "printDiff": "@@ -1,484 +0,0 @@\n-\"\"\"\n-Copied from https://github.com/HazyResearch/flash-attention/blob/\u001b[93meff9fe6b8076df59d64d7a3f464696738a3c7c24\u001b[0m/flash_attn/flash_attn_triton.py\n-update imports to use 'triton_pre_mlir'\n-\n-*Experimental* implementation of FlashAttention in Triton.\n-Tested with triton==2.0.0.dev20221202.\n-Triton 2.0 has a new backend (MLIR) but seems like it doesn't yet work for head dimensions\n-other than 64:\n-https://github.com/openai/triton/blob/\u001b[93md376020f90002757eea3ea9475d4f7cfc2ec5ead\u001b[0m/python/triton/ops/flash_attention.py#L207\n-We'll update this implementation with the new Triton backend once this is fixed.\n-\n-We use the FlashAttention implementation from Phil Tillet a starting point.\n-https://github.com/openai/triton/blob/master/python/tutorials/06-fused-attention.py\n-\n-Changes:\n-- Implement both causal and non-causal attention.\n-- Implement both self-attention and cross-attention.\n-- Support arbitrary seqlens (not just multiples of 128), for both forward and backward.\n-- Support all head dimensions up to 128 (not just 16, 32, 64, 128), for both forward and backward.\n-- Support attention bias.\n-- Speed up the forward pass a bit, and only store the LSE instead of m and l.\n-- Make the backward for d=128 much faster by reducing register spilling.\n-- Optionally parallelize the backward pass across seqlen_k, to deal with the case of\n-small batch size * nheads.\n-\n-Caution:\n-- This is an *experimental* implementation. The forward pass should be quite robust but\n-I'm not 100% sure that the backward pass doesn't have race conditions (due to the Triton compiler).\n-- This implementation has only been tested on A100.\n-- If you plan to use headdim other than 64 and 128, you should test for race conditions\n-(due to the Triton compiler), as done in tests/test_flash_attn.py\n-\"test_flash_attn_triton_race_condition\". I've tested and fixed many race conditions\n-for different head dimensions (40, 48, 64, 128, 80, 88, 96), but I'm still not 100% confident\n-that there are none left for other head dimensions.\n-\n-Differences between this Triton version and the CUDA version:\n-- Triton version doesn't support dropout.\n-- Triton forward is generally faster than CUDA forward, while Triton backward is\n-generally slower than CUDA backward. Overall Triton forward + backward is slightly slower\n-than CUDA forward + backward.\n-- Triton version doesn't support different sequence lengths in a batch (i.e., RaggedTensor/NestedTensor).\n-- Triton version supports attention bias, while CUDA version doesn't.\n-\"\"\"\n-import math\n-import torch\n-import triton_pre_mlir as triton\n-import triton_pre_mlir.language as tl\n-\n-@triton.heuristics({'EVEN_M': lambda args: args['seqlen_q'] % args['BLOCK_M'] == 0, 'EVEN_N': lambda args: args['seqlen_k'] % args['BLOCK_N'] == 0, 'EVEN_HEADDIM': lambda args: args['headdim'] == args['BLOCK_HEADDIM']})\n-@triton.jit\n-def _fwd_kernel(Q, K, V, Bias, Out, Lse, TMP, softmax_scale, stride_qb, stride_qh, stride_qm, stride_kb, stride_kh, stride_kn, stride_vb, stride_vh, stride_vn, stride_bb, stride_bh, stride_bm, stride_ob, stride_oh, stride_om, nheads, seqlen_q, seqlen_k, seqlen_q_rounded, headdim, CACHE_KEY_SEQLEN_Q, CACHE_KEY_SEQLEN_K, BIAS_TYPE: tl.constexpr, IS_CAUSAL: tl.constexpr, BLOCK_HEADDIM: tl.constexpr, EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n-    start_m = tl.program_id(0)\n-    off_hb = tl.program_id(1)\n-    off_b = off_hb // nheads\n-    off_h = off_hb % nheads\n-    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n-    offs_n = tl.arange(0, BLOCK_N)\n-    offs_d = tl.arange(0, BLOCK_HEADDIM)\n-    q_ptrs = Q + off_b * stride_qb + off_h * stride_qh + (offs_m[:, None] * stride_qm + offs_d[None, :])\n-    k_ptrs = K + off_b * stride_kb + off_h * stride_kh + (offs_n[:, None] * stride_kn + offs_d[None, :])\n-    v_ptrs = V + off_b * stride_vb + off_h * stride_vh + (offs_n[:, None] * stride_vn + offs_d[None, :])\n-    if BIAS_TYPE == 'vector':\n-        b_ptrs = Bias + off_b * stride_bb + off_h * stride_bh + offs_n\n-    elif BIAS_TYPE == 'matrix':\n-        b_ptrs = Bias + off_b * stride_bb + off_h * stride_bh + (offs_m[:, None] * stride_bm + offs_n[None, :])\n-    t_ptrs = TMP + off_hb * seqlen_q_rounded + offs_m\n-    lse_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float('inf')\n-    m_i = tl.zeros([BLOCK_M], dtype=tl.float32) - float('inf')\n-    acc_o = tl.zeros([BLOCK_M, BLOCK_HEADDIM], dtype=tl.float32)\n-    if EVEN_M & EVEN_N:\n-        if EVEN_HEADDIM:\n-            q = tl.load(q_ptrs)\n-        else:\n-            q = tl.load(q_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n-    elif EVEN_HEADDIM:\n-        q = tl.load(q_ptrs, mask=offs_m[:, None] < seqlen_q, other=0.0)\n-    else:\n-        q = tl.load(q_ptrs, mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0)\n-    end_n = seqlen_k if not IS_CAUSAL else tl.minimum((start_m + 1) * BLOCK_M, seqlen_k)\n-    for start_n in range(0, end_n, BLOCK_N):\n-        start_n = tl.multiple_of(start_n, BLOCK_N)\n-        if EVEN_N & EVEN_M:\n-            if EVEN_HEADDIM:\n-                k = tl.load(k_ptrs + start_n * stride_kn)\n-            else:\n-                k = tl.load(k_ptrs + start_n * stride_kn, mask=offs_d[None, :] < headdim, other=0.0)\n-        elif EVEN_HEADDIM:\n-            k = tl.load(k_ptrs + start_n * stride_kn, mask=(start_n + offs_n)[:, None] < seqlen_k, other=0.0)\n-        else:\n-            k = tl.load(k_ptrs + start_n * stride_kn, mask=((start_n + offs_n)[:, None] < seqlen_k) & (offs_d[None, :] < headdim), other=0.0)\n-        qk = tl.zeros([BLOCK_M, BLOCK_N], dtype=tl.float32)\n-        qk += tl.dot(q, k, trans_b=True)\n-        if not EVEN_N:\n-            qk += tl.where((start_n + offs_n)[None, :] < seqlen_k, 0, float('-inf'))\n-        if IS_CAUSAL:\n-            qk += tl.where(offs_m[:, None] >= (start_n + offs_n)[None, :], 0, float('-inf'))\n-        if BIAS_TYPE != 'none':\n-            if BIAS_TYPE == 'vector':\n-                if EVEN_N:\n-                    bias = tl.load(b_ptrs + start_n).to(tl.float32)\n-                else:\n-                    bias = tl.load(b_ptrs + start_n, mask=start_n + offs_n < seqlen_k, other=0.0).to(tl.float32)\n-                bias = bias[None, :]\n-            elif BIAS_TYPE == 'matrix':\n-                if EVEN_M & EVEN_N:\n-                    bias = tl.load(b_ptrs + start_n).to(tl.float32)\n-                else:\n-                    bias = tl.load(b_ptrs + start_n, mask=(offs_m[:, None] < seqlen_q) & ((start_n + offs_n)[None, :] < seqlen_k), other=0.0).to(tl.float32)\n-            qk = qk * softmax_scale + bias\n-            m_ij = tl.maximum(tl.max(qk, 1), lse_i)\n-            p = tl.exp(qk - m_ij[:, None])\n-        else:\n-            m_ij = tl.maximum(tl.max(qk, 1) * softmax_scale, lse_i)\n-            p = tl.exp(qk * softmax_scale - m_ij[:, None])\n-        l_ij = tl.sum(p, 1)\n-        acc_o_scale = tl.exp(m_i - m_ij)\n-        tl.store(t_ptrs, acc_o_scale)\n-        acc_o_scale = tl.load(t_ptrs)\n-        acc_o = acc_o * acc_o_scale[:, None]\n-        if EVEN_N & EVEN_M:\n-            if EVEN_HEADDIM:\n-                v = tl.load(v_ptrs + start_n * stride_vn)\n-            else:\n-                v = tl.load(v_ptrs + start_n * stride_vn, mask=offs_d[None, :] < headdim, other=0.0)\n-        elif EVEN_HEADDIM:\n-            v = tl.load(v_ptrs + start_n * stride_vn, mask=(start_n + offs_n)[:, None] < seqlen_k, other=0.0)\n-        else:\n-            v = tl.load(v_ptrs + start_n * stride_vn, mask=((start_n + offs_n)[:, None] < seqlen_k) & (offs_d[None, :] < headdim), other=0.0)\n-        p = p.to(v.dtype)\n-        acc_o += tl.dot(p, v)\n-        m_i = m_ij\n-        l_i_new = tl.exp(lse_i - m_ij) + l_ij\n-        lse_i = m_ij + tl.log(l_i_new)\n-    o_scale = tl.exp(m_i - lse_i)\n-    tl.store(t_ptrs, o_scale)\n-    o_scale = tl.load(t_ptrs)\n-    acc_o = acc_o * o_scale[:, None]\n-    start_m = tl.program_id(0)\n-    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n-    lse_ptrs = Lse + off_hb * seqlen_q_rounded + offs_m\n-    tl.store(lse_ptrs, lse_i)\n-    offs_d = tl.arange(0, BLOCK_HEADDIM)\n-    out_ptrs = Out + off_b * stride_ob + off_h * stride_oh + (offs_m[:, None] * stride_om + offs_d[None, :])\n-    if EVEN_M:\n-        if EVEN_HEADDIM:\n-            tl.store(out_ptrs, acc_o)\n-        else:\n-            tl.store(out_ptrs, acc_o, mask=offs_d[None, :] < headdim)\n-    elif EVEN_HEADDIM:\n-        tl.store(out_ptrs, acc_o, mask=offs_m[:, None] < seqlen_q)\n-    else:\n-        tl.store(out_ptrs, acc_o, mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim))\n-\n-@triton.jit\n-def _bwd_preprocess_do_o_dot(Out, DO, Delta, stride_ob, stride_oh, stride_om, stride_dob, stride_doh, stride_dom, nheads, seqlen_q, seqlen_q_rounded, headdim, BLOCK_M: tl.constexpr, BLOCK_HEADDIM: tl.constexpr):\n-    start_m = tl.program_id(0)\n-    off_hb = tl.program_id(1)\n-    off_b = off_hb // nheads\n-    off_h = off_hb % nheads\n-    offs_m = start_m * BLOCK_M + tl.arange(0, BLOCK_M)\n-    offs_d = tl.arange(0, BLOCK_HEADDIM)\n-    o = tl.load(Out + off_b * stride_ob + off_h * stride_oh + offs_m[:, None] * stride_om + offs_d[None, :], mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0).to(tl.float32)\n-    do = tl.load(DO + off_b * stride_dob + off_h * stride_doh + offs_m[:, None] * stride_dom + offs_d[None, :], mask=(offs_m[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0).to(tl.float32)\n-    delta = tl.sum(o * do, axis=1)\n-    tl.store(Delta + off_hb * seqlen_q_rounded + offs_m, delta)\n-\n-@triton.jit\n-def _bwd_store_dk_dv(dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim, EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr):\n-    if EVEN_N & EVEN_M:\n-        if EVEN_HEADDIM:\n-            tl.store(dv_ptrs, dv)\n-            tl.store(dk_ptrs, dk)\n-        else:\n-            tl.store(dv_ptrs, dv, mask=offs_d[None, :] < headdim)\n-            tl.store(dk_ptrs, dk, mask=offs_d[None, :] < headdim)\n-    elif EVEN_HEADDIM:\n-        tl.store(dv_ptrs, dv, mask=offs_n[:, None] < seqlen_k)\n-        tl.store(dk_ptrs, dk, mask=offs_n[:, None] < seqlen_k)\n-    else:\n-        tl.store(dv_ptrs, dv, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim))\n-        tl.store(dk_ptrs, dk, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim))\n-\n-@triton.jit\n-def _bwd_kernel_one_col_block(start_n, Q, K, V, Bias, DO, DQ, DK, DV, LSE, D, softmax_scale, stride_qm, stride_kn, stride_vn, stride_bm, stride_dom, stride_dqm, stride_dkn, stride_dvn, seqlen_q, seqlen_k, headdim, ATOMIC_ADD: tl.constexpr, BIAS_TYPE: tl.constexpr, IS_CAUSAL: tl.constexpr, BLOCK_HEADDIM: tl.constexpr, EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n-    begin_m = 0 if not IS_CAUSAL else start_n * BLOCK_N // BLOCK_M * BLOCK_M\n-    offs_qm = begin_m + tl.arange(0, BLOCK_M)\n-    offs_n = start_n * BLOCK_N + tl.arange(0, BLOCK_N)\n-    offs_m = tl.arange(0, BLOCK_M)\n-    offs_d = tl.arange(0, BLOCK_HEADDIM)\n-    q_ptrs = Q + (offs_qm[:, None] * stride_qm + offs_d[None, :])\n-    k_ptrs = K + (offs_n[:, None] * stride_kn + offs_d[None, :])\n-    v_ptrs = V + (offs_n[:, None] * stride_vn + offs_d[None, :])\n-    do_ptrs = DO + (offs_qm[:, None] * stride_dom + offs_d[None, :])\n-    dq_ptrs = DQ + (offs_qm[:, None] * stride_dqm + offs_d[None, :])\n-    if BIAS_TYPE == 'vector':\n-        b_ptrs = Bias + offs_n\n-    elif BIAS_TYPE == 'matrix':\n-        b_ptrs = Bias + (offs_qm[:, None] * stride_bm + offs_n[None, :])\n-    dv = tl.zeros([BLOCK_N, BLOCK_HEADDIM], dtype=tl.float32)\n-    dk = tl.zeros([BLOCK_N, BLOCK_HEADDIM], dtype=tl.float32)\n-    if begin_m >= seqlen_q:\n-        dv_ptrs = DV + (offs_n[:, None] * stride_dvn + offs_d[None, :])\n-        dk_ptrs = DK + (offs_n[:, None] * stride_dkn + offs_d[None, :])\n-        _bwd_store_dk_dv(dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim, EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM)\n-        return\n-    if EVEN_N & EVEN_M:\n-        if EVEN_HEADDIM:\n-            k = tl.load(k_ptrs)\n-            v = tl.load(v_ptrs)\n-        else:\n-            k = tl.load(k_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n-            v = tl.load(v_ptrs, mask=offs_d[None, :] < headdim, other=0.0)\n-    elif EVEN_HEADDIM:\n-        k = tl.load(k_ptrs, mask=offs_n[:, None] < seqlen_k, other=0.0)\n-        v = tl.load(v_ptrs, mask=offs_n[:, None] < seqlen_k, other=0.0)\n-    else:\n-        k = tl.load(k_ptrs, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim), other=0.0)\n-        v = tl.load(v_ptrs, mask=(offs_n[:, None] < seqlen_k) & (offs_d[None, :] < headdim), other=0.0)\n-    num_block_m = tl.cdiv(seqlen_q, BLOCK_M)\n-    for start_m in range(begin_m, num_block_m * BLOCK_M, BLOCK_M):\n-        start_m = tl.multiple_of(start_m, BLOCK_M)\n-        offs_m_curr = start_m + offs_m\n-        if EVEN_M & EVEN_HEADDIM:\n-            q = tl.load(q_ptrs)\n-        elif EVEN_HEADDIM:\n-            q = tl.load(q_ptrs, mask=offs_m_curr[:, None] < seqlen_q, other=0.0)\n-        else:\n-            q = tl.load(q_ptrs, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0)\n-        qk = tl.dot(q, k, trans_b=True)\n-        if not EVEN_N:\n-            qk = tl.where(offs_n[None, :] < seqlen_k, qk, float('-inf'))\n-        if IS_CAUSAL:\n-            qk = tl.where(offs_m_curr[:, None] >= offs_n[None, :], qk, float('-inf'))\n-        if BIAS_TYPE != 'none':\n-            tl.debug_barrier()\n-            if BIAS_TYPE == 'vector':\n-                if EVEN_N:\n-                    bias = tl.load(b_ptrs).to(tl.float32)\n-                else:\n-                    bias = tl.load(b_ptrs, mask=offs_n < seqlen_k, other=0.0).to(tl.float32)\n-                bias = bias[None, :]\n-            elif BIAS_TYPE == 'matrix':\n-                if EVEN_M & EVEN_N:\n-                    bias = tl.load(b_ptrs).to(tl.float32)\n-                else:\n-                    bias = tl.load(b_ptrs, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_n[None, :] < seqlen_k), other=0.0).to(tl.float32)\n-            qk = qk * softmax_scale + bias\n-        if not EVEN_M & EVEN_HEADDIM:\n-            tl.debug_barrier()\n-        lse_i = tl.load(LSE + offs_m_curr)\n-        if BIAS_TYPE == 'none':\n-            p = tl.exp(qk * softmax_scale - lse_i[:, None])\n-        else:\n-            p = tl.exp(qk - lse_i[:, None])\n-        if EVEN_M & EVEN_HEADDIM:\n-            do = tl.load(do_ptrs)\n-        else:\n-            do = tl.load(do_ptrs, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0)\n-        dv += tl.dot(p.to(do.dtype), do, trans_a=True)\n-        if not EVEN_M & EVEN_HEADDIM:\n-            tl.debug_barrier()\n-        dp = tl.dot(do, v, trans_b=True)\n-        if not EVEN_HEADDIM:\n-            tl.debug_barrier()\n-        Di = tl.load(D + offs_m_curr)\n-        ds = (p * (dp - Di[:, None]) * softmax_scale).to(q.dtype)\n-        dk += tl.dot(ds, q, trans_a=True)\n-        if not EVEN_M & EVEN_HEADDIM:\n-            tl.debug_barrier()\n-        if not ATOMIC_ADD:\n-            if EVEN_M & EVEN_HEADDIM:\n-                dq = tl.load(dq_ptrs, eviction_policy='evict_last')\n-                dq += tl.dot(ds, k)\n-                tl.store(dq_ptrs, dq, eviction_policy='evict_last')\n-            elif EVEN_HEADDIM:\n-                dq = tl.load(dq_ptrs, mask=offs_m_curr[:, None] < seqlen_q, other=0.0, eviction_policy='evict_last')\n-                dq += tl.dot(ds, k)\n-                tl.store(dq_ptrs, dq, mask=offs_m_curr[:, None] < seqlen_q, eviction_policy='evict_last')\n-            else:\n-                dq = tl.load(dq_ptrs, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim), other=0.0, eviction_policy='evict_last')\n-                dq += tl.dot(ds, k)\n-                tl.store(dq_ptrs, dq, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim), eviction_policy='evict_last')\n-        else:\n-            dq = tl.dot(ds, k)\n-            if EVEN_M & EVEN_HEADDIM:\n-                tl.atomic_add(dq_ptrs, dq)\n-            elif EVEN_HEADDIM:\n-                tl.atomic_add(dq_ptrs, dq, mask=offs_m_curr[:, None] < seqlen_q)\n-            else:\n-                tl.atomic_add(dq_ptrs, dq, mask=(offs_m_curr[:, None] < seqlen_q) & (offs_d[None, :] < headdim))\n-        dq_ptrs += BLOCK_M * stride_dqm\n-        q_ptrs += BLOCK_M * stride_qm\n-        do_ptrs += BLOCK_M * stride_dom\n-        if BIAS_TYPE == 'matrix':\n-            b_ptrs += BLOCK_M * stride_bm\n-    dv_ptrs = DV + (offs_n[:, None] * stride_dvn + offs_d[None, :])\n-    dk_ptrs = DK + (offs_n[:, None] * stride_dkn + offs_d[None, :])\n-    _bwd_store_dk_dv(dk_ptrs, dv_ptrs, dk, dv, offs_n, offs_d, seqlen_k, headdim, EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM)\n-\n-def init_to_zero(name):\n-    return lambda nargs: nargs[name].zero_()\n-\n-@triton.autotune(configs=[triton.Config({'BLOCK_M': 128, 'BLOCK_N': 128, 'SEQUENCE_PARALLEL': False}, num_warps=8, num_stages=1, pre_hook=init_to_zero('DQ')), triton.Config({'BLOCK_M': 128, 'BLOCK_N': 128, 'SEQUENCE_PARALLEL': True}, num_warps=8, num_stages=1, pre_hook=init_to_zero('DQ'))], key=['CACHE_KEY_SEQLEN_Q', 'CACHE_KEY_SEQLEN_K', 'BIAS_TYPE', 'IS_CAUSAL', 'BLOCK_HEADDIM'])\n-@triton.heuristics({'EVEN_M': lambda args: args['seqlen_q'] % args['BLOCK_M'] == 0, 'EVEN_N': lambda args: args['seqlen_k'] % args['BLOCK_N'] == 0, 'EVEN_HEADDIM': lambda args: args['headdim'] == args['BLOCK_HEADDIM']})\n-@triton.jit\n-def _bwd_kernel(Q, K, V, Bias, DO, DQ, DK, DV, LSE, D, softmax_scale, stride_qb, stride_qh, stride_qm, stride_kb, stride_kh, stride_kn, stride_vb, stride_vh, stride_vn, stride_bb, stride_bh, stride_bm, stride_dob, stride_doh, stride_dom, stride_dqb, stride_dqh, stride_dqm, stride_dkb, stride_dkh, stride_dkn, stride_dvb, stride_dvh, stride_dvn, nheads, seqlen_q, seqlen_k, seqlen_q_rounded, headdim, CACHE_KEY_SEQLEN_Q, CACHE_KEY_SEQLEN_K, BIAS_TYPE: tl.constexpr, IS_CAUSAL: tl.constexpr, BLOCK_HEADDIM: tl.constexpr, SEQUENCE_PARALLEL: tl.constexpr, EVEN_M: tl.constexpr, EVEN_N: tl.constexpr, EVEN_HEADDIM: tl.constexpr, BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr):\n-    off_hb = tl.program_id(1)\n-    off_b = off_hb // nheads\n-    off_h = off_hb % nheads\n-    Q += off_b * stride_qb + off_h * stride_qh\n-    K += off_b * stride_kb + off_h * stride_kh\n-    V += off_b * stride_vb + off_h * stride_vh\n-    DO += off_b * stride_dob + off_h * stride_doh\n-    DQ += off_b * stride_dqb + off_h * stride_dqh\n-    DK += off_b * stride_dkb + off_h * stride_dkh\n-    DV += off_b * stride_dvb + off_h * stride_dvh\n-    if BIAS_TYPE != 'none':\n-        Bias += off_b * stride_bb + off_h * stride_bh\n-    D += off_hb * seqlen_q_rounded\n-    LSE += off_hb * seqlen_q_rounded\n-    if not SEQUENCE_PARALLEL:\n-        num_block_n = tl.cdiv(seqlen_k, BLOCK_N)\n-        for start_n in range(0, num_block_n):\n-            _bwd_kernel_one_col_block(start_n, Q, K, V, Bias, DO, DQ, DK, DV, LSE, D, softmax_scale, stride_qm, stride_kn, stride_vn, stride_bm, stride_dom, stride_dqm, stride_dkn, stride_dvn, seqlen_q, seqlen_k, headdim, ATOMIC_ADD=False, BIAS_TYPE=BIAS_TYPE, IS_CAUSAL=IS_CAUSAL, BLOCK_HEADDIM=BLOCK_HEADDIM, EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM, BLOCK_M=BLOCK_M, BLOCK_N=BLOCK_N)\n-    else:\n-        start_n = tl.program_id(0)\n-        _bwd_kernel_one_col_block(start_n, Q, K, V, Bias, DO, DQ, DK, DV, LSE, D, softmax_scale, stride_qm, stride_kn, stride_vn, stride_bm, stride_dom, stride_dqm, stride_dkn, stride_dvn, seqlen_q, seqlen_k, headdim, ATOMIC_ADD=True, BIAS_TYPE=BIAS_TYPE, IS_CAUSAL=IS_CAUSAL, BLOCK_HEADDIM=BLOCK_HEADDIM, EVEN_M=EVEN_M, EVEN_N=EVEN_N, EVEN_HEADDIM=EVEN_HEADDIM, BLOCK_M=BLOCK_M, BLOCK_N=BLOCK_N)\n-\n-def _flash_attn_forward(q, k, v, bias=None, causal=False, softmax_scale=None):\n-    (batch, seqlen_q, nheads, d) = q.shape\n-    (_, seqlen_k, _, _) = k.shape\n-    assert k.shape == (batch, seqlen_k, nheads, d)\n-    assert v.shape == (batch, seqlen_k, nheads, d)\n-    assert d <= 128, 'FlashAttention only support head dimensions up to 128'\n-    assert q.dtype == k.dtype == v.dtype, 'All tensors must have the same type'\n-    assert q.dtype in [torch.float16, torch.bfloat16], 'Only support fp16 and bf16'\n-    assert q.is_cuda and k.is_cuda and v.is_cuda\n-    softmax_scale = softmax_scale or 1.0 / math.sqrt(d)\n-    has_bias = bias is not None\n-    bias_type = 'none'\n-    if has_bias:\n-        assert bias.dtype in [q.dtype, torch.float]\n-        assert bias.is_cuda\n-        assert bias.dim() == 4\n-        if bias.stride(-1) != 1:\n-            bias = bias.contiguous()\n-        if bias.shape[2:] == (1, seqlen_k):\n-            bias_type = 'vector'\n-        elif bias.shape[2:] == (seqlen_q, seqlen_k):\n-            bias_type = 'matrix'\n-        else:\n-            raise RuntimeError('Last 2 dimensions of bias must be (1, seqlen_k) or (seqlen_q, seqlen_k)')\n-        bias = bias.expand(batch, nheads, seqlen_q, seqlen_k)\n-    bias_strides = (bias.stride(0), bias.stride(1), bias.stride(2)) if has_bias else (0, 0, 0)\n-    seqlen_q_rounded = math.ceil(seqlen_q / 128) * 128\n-    lse = torch.empty((batch, nheads, seqlen_q_rounded), device=q.device, dtype=torch.float32)\n-    tmp = torch.empty((batch, nheads, seqlen_q_rounded), device=q.device, dtype=torch.float32)\n-    o = torch.empty_like(q)\n-    BLOCK_HEADDIM = max(triton.next_power_of_2(d), 16)\n-    BLOCK = 128\n-    num_warps = 4 if d <= 64 else 8\n-    grid = lambda META: (triton.cdiv(seqlen_q, META['BLOCK_M']), batch * nheads)\n-    _fwd_kernel[grid](q, k, v, bias, o, lse, tmp, softmax_scale, q.stride(0), q.stride(2), q.stride(1), k.stride(0), k.stride(2), k.stride(1), v.stride(0), v.stride(2), v.stride(1), *bias_strides, o.stride(0), o.stride(2), o.stride(1), nheads, seqlen_q, seqlen_k, seqlen_q_rounded, d, seqlen_q // 32, seqlen_k // 32, bias_type, causal, BLOCK_HEADDIM, BLOCK_M=BLOCK, BLOCK_N=BLOCK, num_warps=num_warps, num_stages=1)\n-    return (o, lse, softmax_scale)\n-\n-def _flash_attn_backward(do, q, k, v, o, lse, dq, dk, dv, bias=None, causal=False, softmax_scale=None):\n-    if do.stride(-1) != 1:\n-        do = do.contiguous()\n-    (batch, seqlen_q, nheads, d) = q.shape\n-    (_, seqlen_k, _, _) = k.shape\n-    assert d <= 128\n-    seqlen_q_rounded = math.ceil(seqlen_q / 128) * 128\n-    assert lse.shape == (batch, nheads, seqlen_q_rounded)\n-    assert q.stride(-1) == k.stride(-1) == v.stride(-1) == o.stride(-1) == 1\n-    assert dq.stride(-1) == dk.stride(-1) == dv.stride(-1) == 1\n-    softmax_scale = softmax_scale or 1.0 / math.sqrt(d)\n-    dq_accum = torch.empty_like(q, dtype=torch.float32)\n-    delta = torch.empty_like(lse)\n-    BLOCK_HEADDIM = max(triton.next_power_of_2(d), 16)\n-    grid = lambda META: (triton.cdiv(seqlen_q, META['BLOCK_M']), batch * nheads)\n-    _bwd_preprocess_do_o_dot[grid](o, do, delta, o.stride(0), o.stride(2), o.stride(1), do.stride(0), do.stride(2), do.stride(1), nheads, seqlen_q, seqlen_q_rounded, d, BLOCK_M=128, BLOCK_HEADDIM=BLOCK_HEADDIM)\n-    has_bias = bias is not None\n-    bias_type = 'none'\n-    if has_bias:\n-        assert bias.dtype in [q.dtype, torch.float]\n-        assert bias.is_cuda\n-        assert bias.dim() == 4\n-        assert bias.stride(-1) == 1\n-        if bias.shape[2:] == (1, seqlen_k):\n-            bias_type = 'vector'\n-        elif bias.shape[2:] == (seqlen_q, seqlen_k):\n-            bias_type = 'matrix'\n-        else:\n-            raise RuntimeError('Last 2 dimensions of bias must be (1, seqlen_k) or (seqlen_q, seqlen_k)')\n-        bias = bias.expand(batch, nheads, seqlen_q, seqlen_k)\n-    bias_strides = (bias.stride(0), bias.stride(1), bias.stride(2)) if has_bias else (0, 0, 0)\n-    grid = lambda META: (triton.cdiv(seqlen_k, META['BLOCK_N']) if META['SEQUENCE_PARALLEL'] else 1, batch * nheads)\n-    _bwd_kernel[grid](q, k, v, bias, do, dq_accum, dk, dv, lse, delta, softmax_scale, q.stride(0), q.stride(2), q.stride(1), k.stride(0), k.stride(2), k.stride(1), v.stride(0), v.stride(2), v.stride(1), *bias_strides, do.stride(0), do.stride(2), do.stride(1), dq_accum.stride(0), dq_accum.stride(2), dq_accum.stride(1), dk.stride(0), dk.stride(2), dk.stride(1), dv.stride(0), dv.stride(2), dv.stride(1), nheads, seqlen_q, seqlen_k, seqlen_q_rounded, d, seqlen_q // 32, seqlen_k // 32, bias_type, causal, BLOCK_HEADDIM)\n-    dq.copy_(dq_accum)\n-\n-class FlashAttnQKVPackedFunc(torch.autograd.Function):\n-\n-    @staticmethod\n-    def forward(ctx, qkv, bias=None, causal=False, softmax_scale=None):\n-        \"\"\"\n-            qkv: (batch, seqlen, 3, nheads, headdim)\n-            bias: optional, shape broadcastible to (batch, nheads, seqlen, seqlen).\n-                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen).\n-                ALiBi mask for non-causal would have shape (1, nheads, seqlen, seqlen)\n-        \"\"\"\n-        if qkv.stride(-1) != 1:\n-            qkv = qkv.contiguous()\n-        (o, lse, ctx.softmax_scale) = _flash_attn_forward(qkv[:, :, 0], qkv[:, :, 1], qkv[:, :, 2], bias=bias, causal=causal, softmax_scale=softmax_scale)\n-        ctx.save_for_backward(qkv, o, lse, bias)\n-        ctx.causal = causal\n-        return o\n-\n-    @staticmethod\n-    def backward(ctx, do):\n-        (qkv, o, lse, bias) = ctx.saved_tensors\n-        assert not ctx.needs_input_grad[1], 'FlashAttention does not support bias gradient yet'\n-        with torch.inference_mode():\n-            dqkv = torch.empty_like(qkv)\n-            _flash_attn_backward(do, qkv[:, :, 0], qkv[:, :, 1], qkv[:, :, 2], o, lse, dqkv[:, :, 0], dqkv[:, :, 1], dqkv[:, :, 2], bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n-        return (dqkv, None, None, None)\n-flash_attn_qkvpacked_func = FlashAttnQKVPackedFunc.apply\n-\n-class FlashAttnKVPackedFunc(torch.autograd.Function):\n-\n-    @staticmethod\n-    def forward(ctx, q, kv, bias=None, causal=False, softmax_scale=None):\n-        \"\"\"\n-            q: (batch, seqlen_q, nheads, headdim)\n-            kv: (batch, seqlen_k, 2, nheads, headdim)\n-            bias: optional, shape broadcastible to (batch, nheads, seqlen_q, seqlen_k).\n-                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen_k).\n-                ALiBi mask for non-causal would have shape (1, nheads, seqlen_q, seqlen_k)\n-        \"\"\"\n-        (q, kv) = [x if x.stride(-1) == 1 else x.contiguous() for x in [q, kv]]\n-        (o, lse, ctx.softmax_scale) = _flash_attn_forward(q, kv[:, :, 0], kv[:, :, 1], bias=bias, causal=causal, softmax_scale=softmax_scale)\n-        ctx.save_for_backward(q, kv, o, lse, bias)\n-        ctx.causal = causal\n-        return o\n-\n-    @staticmethod\n-    def backward(ctx, do):\n-        (q, kv, o, lse, bias) = ctx.saved_tensors\n-        if len(ctx.needs_input_grad) >= 3:\n-            assert not ctx.needs_input_grad[2], 'FlashAttention does not support bias gradient yet'\n-        with torch.inference_mode():\n-            dq = torch.empty_like(q)\n-            dkv = torch.empty_like(kv)\n-            _flash_attn_backward(do, q, kv[:, :, 0], kv[:, :, 1], o, lse, dq, dkv[:, :, 0], dkv[:, :, 1], bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n-        return (dq, dkv, None, None, None)\n-flash_attn_kvpacked_func = FlashAttnKVPackedFunc.apply\n-\n-class FlashAttnFunc(torch.autograd.Function):\n-\n-    @staticmethod\n-    def forward(ctx, q, k, v, bias=None, causal=False, softmax_scale=None):\n-        \"\"\"\n-            q: (batch_size, seqlen_q, nheads, headdim)\n-            k, v: (batch_size, seqlen_k, nheads, headdim)\n-            bias: optional, shape broadcastible to (batch, nheads, seqlen_q, seqlen_k).\n-                For example, ALiBi mask for causal would have shape (1, nheads, 1, seqlen_k).\n-                ALiBi mask for non-causal would have shape (1, nheads, seqlen_q, seqlen_k)\n-        \"\"\"\n-        (q, k, v) = [x if x.stride(-1) == 1 else x.contiguous() for x in [q, k, v]]\n-        (o, lse, ctx.softmax_scale) = _flash_attn_forward(q, k, v, bias=bias, causal=causal, softmax_scale=softmax_scale)\n-        ctx.save_for_backward(q, k, v, o, lse, bias)\n-        ctx.causal = causal\n-        return o\n-\n-    @staticmethod\n-    def backward(ctx, do):\n-        (q, k, v, o, lse, bias) = ctx.saved_tensors\n-        assert not ctx.needs_input_grad[3], 'FlashAttention does not support bias gradient yet'\n-        with torch.inference_mode():\n-            dq = torch.empty_like(q)\n-            dk = torch.empty_like(k)\n-            dv = torch.empty_like(v)\n-            _flash_attn_backward(do, q, k, v, o, lse, dq, dk, dv, bias=bias, causal=ctx.causal, softmax_scale=ctx.softmax_scale)\n-        return (dq, dk, dv, None, None, None)\n-flash_attn_func = FlashAttnFunc.apply\n\\ No newline at end of file\n",
  "reason": "High Entropy",
  "stringsFound": [
    "eff9fe6b8076df59d64d7a3f464696738a3c7c24",
    "d376020f90002757eea3ea9475d4f7cfc2ec5ead"
  ]
}
----------------------------------------
Secret #3:
{
  "branch": "origin/main",
  "commit": "update\n",
  "commitHash": "838e2643a52018f5d3eeee7ed3ebd6dc411c818b",
  "date": "2023-12-22 07:20:51",
  "diff": "@@ -1,331 +0,0 @@\n-\"\"\"A simple, flexible implementation of a GPT model.\n-\n-Inspired by https://github.com/karpathy/minGPT/blob/master/mingpt/model.py\n-\"\"\"\n-import math\n-import warnings\n-from typing import List, Optional, Tuple, Union\n-import torch\n-import torch.nn as nn\n-import torch.nn.functional as F\n-from transformers import PreTrainedModel, PreTrainedTokenizer, PreTrainedTokenizerFast\n-from transformers.modeling_outputs import BaseModelOutputWithPast, CausalLMOutputWithPast\n-from .attention import attn_bias_shape, build_attn_bias\n-from .blocks import MPTBlock\n-from .custom_embedding import SharedEmbedding\n-from .norm import NORM_CLASS_REGISTRY\n-from .configuration_mpt import MPTConfig\n-from .adapt_tokenizer import AutoTokenizerForMOD, adapt_tokenizer_for_denoising\n-from .hf_prefixlm_converter import add_bidirectional_mask_if_missing, convert_hf_causal_lm_to_prefix_lm\n-from .meta_init_context import init_empty_weights\n-from .param_init_fns import MODEL_INIT_REGISTRY, generic_param_init_fn_\n-try:\n-    from .flash_attn_triton import flash_attn_func\n-except:\n-    pass\n-Tokenizer = Union[PreTrainedTokenizer, PreTrainedTokenizerFast]\n-\n-class MPTPreTrainedModel(PreTrainedModel):\n-    config_class = MPTConfig\n-    base_model_prefix = 'model'\n-    _no_split_modules = ['MPTBlock']\n-\n-class MPTModel(MPTPreTrainedModel):\n-\n-    def __init__(self, config: MPTConfig):\n-        config._validate_config()\n-        super().__init__(config)\n-        self.attn_impl = config.attn_config['attn_impl']\n-        self.prefix_lm = config.attn_config['prefix_lm']\n-        self.attn_uses_sequence_id = config.attn_config['attn_uses_sequence_id']\n-        self.alibi = config.attn_config['alibi']\n-        self.alibi_bias_max = config.attn_config['alibi_bias_max']\n-        if config.init_device == 'mixed':\n-            if dist.get_local_rank() == 0:\n-                config.init_device = 'cpu'\n-            else:\n-                config.init_device = 'meta'\n-        if config.norm_type.lower() not in NORM_CLASS_REGISTRY.keys():\n-            norm_options = ' | '.join(NORM_CLASS_REGISTRY.keys())\n-            raise NotImplementedError(f'Requested norm type ({config.norm_type}) is not implemented within this repo (Options: {norm_options}).')\n-        norm_class = NORM_CLASS_REGISTRY[config.norm_type.lower()]\n-        self.embedding_fraction = config.embedding_fraction\n-        self.wte = SharedEmbedding(config.vocab_size, config.d_model, device=config.init_device)\n-        if not self.alibi:\n-            self.wpe = torch.nn.Embedding(config.max_seq_len, config.d_model, device=config.init_device)\n-        self.emb_drop = nn.Dropout(config.emb_pdrop)\n-        self.blocks = nn.ModuleList([MPTBlock(device=config.init_device, **config.to_dict()) for _ in range(config.n_layers)])\n-        self.norm_f = norm_class(config.d_model, device=config.init_device)\n-        if config.init_device != 'meta':\n-            print(f'You are using config.init_device={config.init_device!r}, but you can also use config.init_device=\"meta\" with Composer + FSDP for fast initialization.')\n-            self.apply(self.param_init_fn)\n-        self.is_causal = not self.prefix_lm\n-        self._attn_bias_initialized = False\n-        self.attn_bias = None\n-        self.attn_bias_shape = attn_bias_shape(self.attn_impl, config.n_heads, config.max_seq_len, self.alibi, prefix_lm=self.prefix_lm, causal=self.is_causal, use_sequence_id=self.attn_uses_sequence_id)\n-        if config.no_bias:\n-            for module in self.modules():\n-                if hasattr(module, 'bias') and isinstance(module.bias, nn.Parameter):\n-                    if config.verbose:\n-                        warnings.warn(f'Removing bias ({module.bias}) from {module}.')\n-                    module.register_parameter('bias', None)\n-        if config.verbose and config.verbose > 2:\n-            print(self)\n-        if 'verbose' not in self.config.init_config:\n-            self.config.init_config['verbose'] = self.config.verbose\n-        if self.config.init_config['verbose'] > 1:\n-            init_fn_name = self.config.init_config['name']\n-            warnings.warn(f'Using {init_fn_name} initialization.')\n-        self.gradient_checkpointing = False\n-\n-    def get_input_embeddings(self):\n-        return self.wte\n-\n-    def set_input_embeddings(self, value):\n-        self.wte = value\n-\n-    @torch.no_grad()\n-    def _attn_bias(self, device, dtype, attention_mask: Optional[torch.ByteTensor]=None, prefix_mask: Optional[torch.ByteTensor]=None, sequence_id: Optional[torch.LongTensor]=None):\n-        if not self._attn_bias_initialized:\n-            if self.attn_bias_shape:\n-                self.attn_bias = torch.zeros(self.attn_bias_shape, device=device, dtype=dtype)\n-                self.attn_bias = build_attn_bias(self.attn_impl, self.attn_bias, self.config.n_heads, self.config.max_seq_len, causal=self.is_causal, alibi=self.alibi, alibi_bias_max=self.alibi_bias_max)\n-            self._attn_bias_initialized = True\n-        if self.attn_impl == 'flash':\n-            return (self.attn_bias, attention_mask)\n-        if self.attn_bias is not None:\n-            self.attn_bias = self.attn_bias.to(dtype=dtype, device=device)\n-        attn_bias = self.attn_bias\n-        if self.prefix_lm:\n-            assert isinstance(attn_bias, torch.Tensor)\n-            assert isinstance(prefix_mask, torch.Tensor)\n-            attn_bias = self._apply_prefix_mask(attn_bias, prefix_mask)\n-        if self.attn_uses_sequence_id and sequence_id is not None:\n-            assert isinstance(attn_bias, torch.Tensor)\n-            attn_bias = self._apply_sequence_id(attn_bias, sequence_id)\n-        if attention_mask is not None:\n-            s_k = attention_mask.shape[-1]\n-            if attn_bias is None:\n-                attn_bias = torch.zeros((1, 1, 1, s_k), device=device, dtype=dtype)\n-            else:\n-                _s_k = max(0, attn_bias.size(-1) - s_k)\n-                attn_bias = attn_bias[:, :, :, _s_k:]\n-            if prefix_mask is not None and attention_mask.shape != prefix_mask.shape:\n-                raise ValueError(f'attention_mask shape={attention_mask.shape} ' + f'and prefix_mask shape={prefix_mask.shape} are not equal.')\n-            min_val = torch.finfo(attn_bias.dtype).min\n-            attn_bias = attn_bias.masked_fill(~attention_mask.view(-1, 1, 1, s_k), min_val)\n-        return (attn_bias, None)\n-\n-    def _apply_prefix_mask(self, attn_bias: torch.Tensor, prefix_mask: torch.Tensor):\n-        (s_k, s_q) = attn_bias.shape[-2:]\n-        if s_k != self.config.max_seq_len or s_q != self.config.max_seq_len:\n-            raise ValueError('attn_bias does not match the expected shape. ' + f'The last two dimensions should both be {self.config.max_length} ' + f'but are {s_k} and {s_q}.')\n-        seq_len = prefix_mask.shape[-1]\n-        if seq_len > self.config.max_seq_len:\n-            raise ValueError(f'prefix_mask sequence length cannot exceed max_seq_len={self.config.max_seq_len}')\n-        attn_bias = attn_bias[..., :seq_len, :seq_len]\n-        causal = torch.tril(torch.ones((seq_len, seq_len), dtype=torch.bool, device=prefix_mask.device)).view(1, 1, seq_len, seq_len)\n-        prefix = prefix_mask.view(-1, 1, 1, seq_len)\n-        cannot_attend = ~torch.logical_or(causal, prefix.bool())\n-        min_val = torch.finfo(attn_bias.dtype).min\n-        attn_bias = attn_bias.masked_fill(cannot_attend, min_val)\n-        return attn_bias\n-\n-    def _apply_sequence_id(self, attn_bias: torch.Tensor, sequence_id: torch.LongTensor):\n-        seq_len = sequence_id.shape[-1]\n-        if seq_len > self.config.max_seq_len:\n-            raise ValueError(f'sequence_id sequence length cannot exceed max_seq_len={self.config.max_seq_len}')\n-        attn_bias = attn_bias[..., :seq_len, :seq_len]\n-        cannot_attend = torch.logical_not(torch.eq(sequence_id.view(-1, seq_len, 1), sequence_id.view(-1, 1, seq_len))).unsqueeze(1)\n-        min_val = torch.finfo(attn_bias.dtype).min\n-        attn_bias = attn_bias.masked_fill(cannot_attend, min_val)\n-        return attn_bias\n-\n-    def forward(self, input_ids: torch.LongTensor, past_key_values: Optional[List[Tuple[torch.FloatTensor]]]=None, attention_mask: Optional[torch.ByteTensor]=None, prefix_mask: Optional[torch.ByteTensor]=None, sequence_id: Optional[torch.LongTensor]=None, return_dict: Optional[bool]=None, output_attentions: Optional[bool]=None, output_hidden_states: Optional[bool]=None, use_cache: Optional[bool]=None, inputs_embeds: Optional[torch.Tensor]=None):\n-        return_dict = return_dict if return_dict is not None else self.config.return_dict\n-        use_cache = use_cache if use_cache is not None else self.config.use_cache\n-        if attention_mask is not None:\n-            attention_mask = attention_mask.bool()\n-        if prefix_mask is not None:\n-            prefix_mask = prefix_mask.bool()\n-        if not return_dict:\n-            raise NotImplementedError('return_dict False is not implemented yet for MPT')\n-        if output_attentions:\n-            if self.attn_impl != 'torch':\n-                raise NotImplementedError('output_attentions is not implemented for MPT when using attn_impl `flash` or `triton`.')\n-        if attention_mask is not None and attention_mask[:, 0].sum() != attention_mask.shape[0] and self.training:\n-            raise NotImplementedError('MPT does not support training with left padding.')\n-        if self.prefix_lm and prefix_mask is None:\n-            raise ValueError('prefix_mask is a required argument when MPT is configured with prefix_lm=True.')\n-        if self.training:\n-            if self.attn_uses_sequence_id and sequence_id is None:\n-                raise ValueError('sequence_id is a required argument when MPT is configured with attn_uses_sequence_id=True ' + 'and the model is in train mode.')\n-            elif self.attn_uses_sequence_id is False and sequence_id is not None:\n-                warnings.warn('MPT received non-None input for `sequence_id` but is configured with attn_uses_sequence_id=False. ' + 'This input will be ignored. If you want the model to use `sequence_id`, set attn_uses_sequence_id to True.')\n-        if input_ids is not None:\n-            S = input_ids.size(1)\n-            assert S <= self.config.max_seq_len, f'Cannot forward input with seq_len={S}, this model only supports seq_len<={self.config.max_seq_len}'\n-            tok_emb = self.wte(input_ids)\n-        else:\n-            assert inputs_embeds is not None\n-            assert self.alibi, 'inputs_embeds is not implemented for MPT unless for alibi.'\n-            S = inputs_embeds.size(1)\n-            tok_emb = inputs_embeds\n-        if self.alibi:\n-            x = tok_emb\n-        else:\n-            past_position = 0\n-            if past_key_values is not None:\n-                if len(past_key_values) != self.config.n_layers:\n-                    raise ValueError(f'past_key_values must provide a past_key_value for each attention ' + f'layer in the network (len(past_key_values)={len(past_key_values)!r}; self.config.n_layers={self.config.n_layers!r}).')\n-                past_position = past_key_values[0][0].size(1)\n-                if self.attn_impl == 'torch':\n-                    past_position = past_key_values[0][0].size(3)\n-            if S + past_position > self.config.max_seq_len:\n-                raise ValueError(f'Cannot forward input with past sequence length {past_position} and current sequence length {S + 1}, this model only supports total sequence length <= {self.config.max_seq_len}.')\n-            pos = torch.arange(past_position, S + past_position, dtype=torch.long, device=input_ids.device).unsqueeze(0)\n-            if attention_mask is not None:\n-                pos = torch.clamp(pos - torch.cumsum((~attention_mask).to(torch.int32), dim=1)[:, past_position:], min=0)\n-            pos_emb = self.wpe(pos)\n-            x = tok_emb + pos_emb\n-        if self.embedding_fraction == 1:\n-            x = self.emb_drop(x)\n-        else:\n-            x_shrunk = x * self.embedding_fraction + x.detach() * (1 - self.embedding_fraction)\n-            assert isinstance(self.emb_drop, nn.Module)\n-            x = self.emb_drop(x_shrunk)\n-        (attn_bias, attention_mask) = self._attn_bias(device=x.device, dtype=torch.float32, attention_mask=attention_mask, prefix_mask=prefix_mask, sequence_id=sequence_id)\n-        if use_cache and past_key_values is None:\n-            past_key_values = [() for _ in range(self.config.n_layers)]\n-        all_hidden_states = () if output_hidden_states else None\n-        all_self_attns = () if output_attentions else None\n-        for (b_idx, block) in enumerate(self.blocks):\n-            if output_hidden_states:\n-                assert all_hidden_states is not None\n-                all_hidden_states = all_hidden_states + (x,)\n-            past_key_value = past_key_values[b_idx] if past_key_values is not None else None\n-            if self.gradient_checkpointing and self.training:\n-                (x, attn_weights, past_key_value) = torch.utils.checkpoint.checkpoint(block, x, past_key_value, attn_bias, attention_mask, self.is_causal)\n-            else:\n-                (x, attn_weights, past_key_value) = block(x, past_key_value=past_key_value, attn_bias=attn_bias, attention_mask=attention_mask, is_causal=self.is_causal)\n-            if past_key_values is not None:\n-                past_key_values[b_idx] = past_key_value\n-            if output_attentions:\n-                assert all_self_attns is not None\n-                all_self_attns = all_self_attns + (attn_weights,)\n-        x = self.norm_f(x)\n-        if output_hidden_states:\n-            assert all_hidden_states is not None\n-            all_hidden_states = all_hidden_states + (x,)\n-        return BaseModelOutputWithPast(last_hidden_state=x, past_key_values=past_key_values, hidden_states=all_hidden_states, attentions=all_self_attns)\n-\n-    def param_init_fn(self, module):\n-        init_fn_name = self.config.init_config['name']\n-        MODEL_INIT_REGISTRY[init_fn_name](module=module, n_layers=self.config.n_layers, d_model=self.config.d_model, **self.config.init_config)\n-\n-    def fsdp_wrap_fn(self, module):\n-        return isinstance(module, MPTBlock)\n-\n-    def activation_checkpointing_fn(self, module):\n-        return isinstance(module, MPTBlock)\n-\n-class MPTForCausalLM(MPTPreTrainedModel):\n-\n-    def __init__(self, config: MPTConfig):\n-        super().__init__(config)\n-        if not config.tie_word_embeddings:\n-            raise ValueError('MPTForCausalLM only supports tied word embeddings')\n-        print(f'Instantiating an MPTForCausalLM model from {__file__}')\n-        self.transformer = MPTModel(config)\n-        for child in self.transformer.children():\n-            if isinstance(child, torch.nn.ModuleList):\n-                continue\n-            if isinstance(child, torch.nn.Module):\n-                child._fsdp_wrap = True\n-        self.logit_scale = None\n-        if config.logit_scale is not None:\n-            logit_scale = config.logit_scale\n-            if isinstance(logit_scale, str):\n-                if logit_scale == 'inv_sqrt_d_model':\n-                    logit_scale = 1 / math.sqrt(config.d_model)\n-                else:\n-                    raise ValueError(f\"logit_scale={logit_scale!r} is not recognized as an option; use numeric value or 'inv_sqrt_d_model'.\")\n-            self.logit_scale = logit_scale\n-\n-    def get_input_embeddings(self):\n-        return self.transformer.wte\n-\n-    def set_input_embeddings(self, value):\n-        self.transformer.wte = value\n-\n-    def get_output_embeddings(self):\n-        return self.transformer.wte\n-\n-    def set_output_embeddings(self, new_embeddings):\n-        self.transformer.wte = new_embeddings\n-\n-    def set_decoder(self, decoder):\n-        self.transformer = decoder\n-\n-    def get_decoder(self):\n-        return self.transformer\n-\n-    def forward(self, input_ids: torch.LongTensor, past_key_values: Optional[List[Tuple[torch.FloatTensor]]]=None, attention_mask: Optional[torch.ByteTensor]=None, prefix_mask: Optional[torch.ByteTensor]=None, sequence_id: Optional[torch.LongTensor]=None, labels: Optional[torch.LongTensor]=None, return_dict: Optional[bool]=None, output_attentions: Optional[bool]=None, output_hidden_states: Optional[bool]=None, use_cache: Optional[bool]=None, inputs_embeds: Optional[torch.FloatTensor]=None):\n-        return_dict = return_dict if return_dict is not None else self.config.return_dict\n-        use_cache = use_cache if use_cache is not None else self.config.use_cache\n-        if inputs_embeds is not None:\n-            raise NotImplementedError('inputs_embeds has to be None (for hf/peft support).')\n-        outputs = self.transformer(input_ids=input_ids, past_key_values=past_key_values, attention_mask=attention_mask, prefix_mask=prefix_mask, sequence_id=sequence_id, return_dict=return_dict, output_attentions=output_attentions, output_hidden_states=output_hidden_states, use_cache=use_cache)\n-        logits = self.transformer.wte(outputs.last_hidden_state.to(self.transformer.wte.weight.device), True)\n-        if self.logit_scale is not None:\n-            if self.logit_scale == 0:\n-                warnings.warn(f'Multiplying logits by self.logit_scale={self.logit_scale!r}. This will produce uniform (uninformative) outputs.')\n-            logits *= self.logit_scale\n-        loss = None\n-        if labels is not None:\n-            labels = torch.roll(labels, shifts=-1)\n-            labels[:, -1] = -100\n-            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), labels.to(logits.device).view(-1))\n-        return CausalLMOutputWithPast(loss=loss, logits=logits, past_key_values=outputs.past_key_values, hidden_states=outputs.hidden_states, attentions=outputs.attentions)\n-\n-    def param_init_fn(self, module):\n-        init_fn_name = self.config.init_config['name']\n-        MODEL_INIT_REGISTRY[init_fn_name](module=module, n_layers=self.config.n_layers, d_model=self.config.d_model, **self.config.init_config)\n-\n-    def fsdp_wrap_fn(self, module):\n-        return isinstance(module, MPTBlock)\n-\n-    def activation_checkpointing_fn(self, module):\n-        return isinstance(module, MPTBlock)\n-\n-    def prepare_inputs_for_generation(self, input_ids, past_key_values=None, inputs_embeds=None, **kwargs):\n-        if inputs_embeds is not None:\n-            raise NotImplementedError('inputs_embeds is not implemented for MPT yet')\n-        attention_mask = kwargs['attention_mask'].bool()\n-        if attention_mask[:, -1].sum() != attention_mask.shape[0]:\n-            raise NotImplementedError('MPT does not support generation with right padding.')\n-        if self.transformer.attn_uses_sequence_id and self.training:\n-            sequence_id = torch.zeros_like(input_ids[:1])\n-        else:\n-            sequence_id = None\n-        if past_key_values is not None:\n-            input_ids = input_ids[:, -1].unsqueeze(-1)\n-        if self.transformer.prefix_lm:\n-            prefix_mask = torch.ones_like(attention_mask)\n-            if kwargs.get('use_cache') == False:\n-                raise NotImplementedError('MPT with prefix_lm=True does not support use_cache=False.')\n-        else:\n-            prefix_mask = None\n-        return {'input_ids': input_ids, 'attention_mask': attention_mask, 'prefix_mask': prefix_mask, 'sequence_id': sequence_id, 'past_key_values': past_key_values, 'use_cache': kwargs.get('use_cache', True)}\n-\n-    @staticmethod\n-    def _reorder_cache(past_key_values, beam_idx):\n-        \"\"\"Used by HuggingFace generate when using beam search with kv-caching.\n-\n-        See https://github.com/huggingface/transformers/blob/3ec7a47664ebe40c40f4b722f6bb1cd30c3821ec/src/transformers/models/gpt2/modeling_gpt2.py#L1122-L1133\n-        for an example in transformers.\n-        \"\"\"\n-        reordered_past = []\n-        for layer_past in past_key_values:\n-            reordered_past += [tuple((past_state.index_select(0, beam_idx) for past_state in layer_past))]\n-        return reordered_past\n\\ No newline at end of file\n",
  "path": "gllava/model/language_model/mpt/modeling_mpt.py",
  "printDiff": "@@ -1,331 +0,0 @@\n-\"\"\"A simple, flexible implementation of a GPT model.\n-\n-Inspired by https://github.com/karpathy/minGPT/blob/master/mingpt/model.py\n-\"\"\"\n-import math\n-import warnings\n-from typing import List, Optional, Tuple, Union\n-import torch\n-import torch.nn as nn\n-import torch.nn.functional as F\n-from transformers import PreTrainedModel, PreTrainedTokenizer, PreTrainedTokenizerFast\n-from transformers.modeling_outputs import BaseModelOutputWithPast, CausalLMOutputWithPast\n-from .attention import attn_bias_shape, build_attn_bias\n-from .blocks import MPTBlock\n-from .custom_embedding import SharedEmbedding\n-from .norm import NORM_CLASS_REGISTRY\n-from .configuration_mpt import MPTConfig\n-from .adapt_tokenizer import AutoTokenizerForMOD, adapt_tokenizer_for_denoising\n-from .hf_prefixlm_converter import add_bidirectional_mask_if_missing, convert_hf_causal_lm_to_prefix_lm\n-from .meta_init_context import init_empty_weights\n-from .param_init_fns import MODEL_INIT_REGISTRY, generic_param_init_fn_\n-try:\n-    from .flash_attn_triton import flash_attn_func\n-except:\n-    pass\n-Tokenizer = Union[PreTrainedTokenizer, PreTrainedTokenizerFast]\n-\n-class MPTPreTrainedModel(PreTrainedModel):\n-    config_class = MPTConfig\n-    base_model_prefix = 'model'\n-    _no_split_modules = ['MPTBlock']\n-\n-class MPTModel(MPTPreTrainedModel):\n-\n-    def __init__(self, config: MPTConfig):\n-        config._validate_config()\n-        super().__init__(config)\n-        self.attn_impl = config.attn_config['attn_impl']\n-        self.prefix_lm = config.attn_config['prefix_lm']\n-        self.attn_uses_sequence_id = config.attn_config['attn_uses_sequence_id']\n-        self.alibi = config.attn_config['alibi']\n-        self.alibi_bias_max = config.attn_config['alibi_bias_max']\n-        if config.init_device == 'mixed':\n-            if dist.get_local_rank() == 0:\n-                config.init_device = 'cpu'\n-            else:\n-                config.init_device = 'meta'\n-        if config.norm_type.lower() not in NORM_CLASS_REGISTRY.keys():\n-            norm_options = ' | '.join(NORM_CLASS_REGISTRY.keys())\n-            raise NotImplementedError(f'Requested norm type ({config.norm_type}) is not implemented within this repo (Options: {norm_options}).')\n-        norm_class = NORM_CLASS_REGISTRY[config.norm_type.lower()]\n-        self.embedding_fraction = config.embedding_fraction\n-        self.wte = SharedEmbedding(config.vocab_size, config.d_model, device=config.init_device)\n-        if not self.alibi:\n-            self.wpe = torch.nn.Embedding(config.max_seq_len, config.d_model, device=config.init_device)\n-        self.emb_drop = nn.Dropout(config.emb_pdrop)\n-        self.blocks = nn.ModuleList([MPTBlock(device=config.init_device, **config.to_dict()) for _ in range(config.n_layers)])\n-        self.norm_f = norm_class(config.d_model, device=config.init_device)\n-        if config.init_device != 'meta':\n-            print(f'You are using config.init_device={config.init_device!r}, but you can also use config.init_device=\"meta\" with Composer + FSDP for fast initialization.')\n-            self.apply(self.param_init_fn)\n-        self.is_causal = not self.prefix_lm\n-        self._attn_bias_initialized = False\n-        self.attn_bias = None\n-        self.attn_bias_shape = attn_bias_shape(self.attn_impl, config.n_heads, config.max_seq_len, self.alibi, prefix_lm=self.prefix_lm, causal=self.is_causal, use_sequence_id=self.attn_uses_sequence_id)\n-        if config.no_bias:\n-            for module in self.modules():\n-                if hasattr(module, 'bias') and isinstance(module.bias, nn.Parameter):\n-                    if config.verbose:\n-                        warnings.warn(f'Removing bias ({module.bias}) from {module}.')\n-                    module.register_parameter('bias', None)\n-        if config.verbose and config.verbose > 2:\n-            print(self)\n-        if 'verbose' not in self.config.init_config:\n-            self.config.init_config['verbose'] = self.config.verbose\n-        if self.config.init_config['verbose'] > 1:\n-            init_fn_name = self.config.init_config['name']\n-            warnings.warn(f'Using {init_fn_name} initialization.')\n-        self.gradient_checkpointing = False\n-\n-    def get_input_embeddings(self):\n-        return self.wte\n-\n-    def set_input_embeddings(self, value):\n-        self.wte = value\n-\n-    @torch.no_grad()\n-    def _attn_bias(self, device, dtype, attention_mask: Optional[torch.ByteTensor]=None, prefix_mask: Optional[torch.ByteTensor]=None, sequence_id: Optional[torch.LongTensor]=None):\n-        if not self._attn_bias_initialized:\n-            if self.attn_bias_shape:\n-                self.attn_bias = torch.zeros(self.attn_bias_shape, device=device, dtype=dtype)\n-                self.attn_bias = build_attn_bias(self.attn_impl, self.attn_bias, self.config.n_heads, self.config.max_seq_len, causal=self.is_causal, alibi=self.alibi, alibi_bias_max=self.alibi_bias_max)\n-            self._attn_bias_initialized = True\n-        if self.attn_impl == 'flash':\n-            return (self.attn_bias, attention_mask)\n-        if self.attn_bias is not None:\n-            self.attn_bias = self.attn_bias.to(dtype=dtype, device=device)\n-        attn_bias = self.attn_bias\n-        if self.prefix_lm:\n-            assert isinstance(attn_bias, torch.Tensor)\n-            assert isinstance(prefix_mask, torch.Tensor)\n-            attn_bias = self._apply_prefix_mask(attn_bias, prefix_mask)\n-        if self.attn_uses_sequence_id and sequence_id is not None:\n-            assert isinstance(attn_bias, torch.Tensor)\n-            attn_bias = self._apply_sequence_id(attn_bias, sequence_id)\n-        if attention_mask is not None:\n-            s_k = attention_mask.shape[-1]\n-            if attn_bias is None:\n-                attn_bias = torch.zeros((1, 1, 1, s_k), device=device, dtype=dtype)\n-            else:\n-                _s_k = max(0, attn_bias.size(-1) - s_k)\n-                attn_bias = attn_bias[:, :, :, _s_k:]\n-            if prefix_mask is not None and attention_mask.shape != prefix_mask.shape:\n-                raise ValueError(f'attention_mask shape={attention_mask.shape} ' + f'and prefix_mask shape={prefix_mask.shape} are not equal.')\n-            min_val = torch.finfo(attn_bias.dtype).min\n-            attn_bias = attn_bias.masked_fill(~attention_mask.view(-1, 1, 1, s_k), min_val)\n-        return (attn_bias, None)\n-\n-    def _apply_prefix_mask(self, attn_bias: torch.Tensor, prefix_mask: torch.Tensor):\n-        (s_k, s_q) = attn_bias.shape[-2:]\n-        if s_k != self.config.max_seq_len or s_q != self.config.max_seq_len:\n-            raise ValueError('attn_bias does not match the expected shape. ' + f'The last two dimensions should both be {self.config.max_length} ' + f'but are {s_k} and {s_q}.')\n-        seq_len = prefix_mask.shape[-1]\n-        if seq_len > self.config.max_seq_len:\n-            raise ValueError(f'prefix_mask sequence length cannot exceed max_seq_len={self.config.max_seq_len}')\n-        attn_bias = attn_bias[..., :seq_len, :seq_len]\n-        causal = torch.tril(torch.ones((seq_len, seq_len), dtype=torch.bool, device=prefix_mask.device)).view(1, 1, seq_len, seq_len)\n-        prefix = prefix_mask.view(-1, 1, 1, seq_len)\n-        cannot_attend = ~torch.logical_or(causal, prefix.bool())\n-        min_val = torch.finfo(attn_bias.dtype).min\n-        attn_bias = attn_bias.masked_fill(cannot_attend, min_val)\n-        return attn_bias\n-\n-    def _apply_sequence_id(self, attn_bias: torch.Tensor, sequence_id: torch.LongTensor):\n-        seq_len = sequence_id.shape[-1]\n-        if seq_len > self.config.max_seq_len:\n-            raise ValueError(f'sequence_id sequence length cannot exceed max_seq_len={self.config.max_seq_len}')\n-        attn_bias = attn_bias[..., :seq_len, :seq_len]\n-        cannot_attend = torch.logical_not(torch.eq(sequence_id.view(-1, seq_len, 1), sequence_id.view(-1, 1, seq_len))).unsqueeze(1)\n-        min_val = torch.finfo(attn_bias.dtype).min\n-        attn_bias = attn_bias.masked_fill(cannot_attend, min_val)\n-        return attn_bias\n-\n-    def forward(self, input_ids: torch.LongTensor, past_key_values: Optional[List[Tuple[torch.FloatTensor]]]=None, attention_mask: Optional[torch.ByteTensor]=None, prefix_mask: Optional[torch.ByteTensor]=None, sequence_id: Optional[torch.LongTensor]=None, return_dict: Optional[bool]=None, output_attentions: Optional[bool]=None, output_hidden_states: Optional[bool]=None, use_cache: Optional[bool]=None, inputs_embeds: Optional[torch.Tensor]=None):\n-        return_dict = return_dict if return_dict is not None else self.config.return_dict\n-        use_cache = use_cache if use_cache is not None else self.config.use_cache\n-        if attention_mask is not None:\n-            attention_mask = attention_mask.bool()\n-        if prefix_mask is not None:\n-            prefix_mask = prefix_mask.bool()\n-        if not return_dict:\n-            raise NotImplementedError('return_dict False is not implemented yet for MPT')\n-        if output_attentions:\n-            if self.attn_impl != 'torch':\n-                raise NotImplementedError('output_attentions is not implemented for MPT when using attn_impl `flash` or `triton`.')\n-        if attention_mask is not None and attention_mask[:, 0].sum() != attention_mask.shape[0] and self.training:\n-            raise NotImplementedError('MPT does not support training with left padding.')\n-        if self.prefix_lm and prefix_mask is None:\n-            raise ValueError('prefix_mask is a required argument when MPT is configured with prefix_lm=True.')\n-        if self.training:\n-            if self.attn_uses_sequence_id and sequence_id is None:\n-                raise ValueError('sequence_id is a required argument when MPT is configured with attn_uses_sequence_id=True ' + 'and the model is in train mode.')\n-            elif self.attn_uses_sequence_id is False and sequence_id is not None:\n-                warnings.warn('MPT received non-None input for `sequence_id` but is configured with attn_uses_sequence_id=False. ' + 'This input will be ignored. If you want the model to use `sequence_id`, set attn_uses_sequence_id to True.')\n-        if input_ids is not None:\n-            S = input_ids.size(1)\n-            assert S <= self.config.max_seq_len, f'Cannot forward input with seq_len={S}, this model only supports seq_len<={self.config.max_seq_len}'\n-            tok_emb = self.wte(input_ids)\n-        else:\n-            assert inputs_embeds is not None\n-            assert self.alibi, 'inputs_embeds is not implemented for MPT unless for alibi.'\n-            S = inputs_embeds.size(1)\n-            tok_emb = inputs_embeds\n-        if self.alibi:\n-            x = tok_emb\n-        else:\n-            past_position = 0\n-            if past_key_values is not None:\n-                if len(past_key_values) != self.config.n_layers:\n-                    raise ValueError(f'past_key_values must provide a past_key_value for each attention ' + f'layer in the network (len(past_key_values)={len(past_key_values)!r}; self.config.n_layers={self.config.n_layers!r}).')\n-                past_position = past_key_values[0][0].size(1)\n-                if self.attn_impl == 'torch':\n-                    past_position = past_key_values[0][0].size(3)\n-            if S + past_position > self.config.max_seq_len:\n-                raise ValueError(f'Cannot forward input with past sequence length {past_position} and current sequence length {S + 1}, this model only supports total sequence length <= {self.config.max_seq_len}.')\n-            pos = torch.arange(past_position, S + past_position, dtype=torch.long, device=input_ids.device).unsqueeze(0)\n-            if attention_mask is not None:\n-                pos = torch.clamp(pos - torch.cumsum((~attention_mask).to(torch.int32), dim=1)[:, past_position:], min=0)\n-            pos_emb = self.wpe(pos)\n-            x = tok_emb + pos_emb\n-        if self.embedding_fraction == 1:\n-            x = self.emb_drop(x)\n-        else:\n-            x_shrunk = x * self.embedding_fraction + x.detach() * (1 - self.embedding_fraction)\n-            assert isinstance(self.emb_drop, nn.Module)\n-            x = self.emb_drop(x_shrunk)\n-        (attn_bias, attention_mask) = self._attn_bias(device=x.device, dtype=torch.float32, attention_mask=attention_mask, prefix_mask=prefix_mask, sequence_id=sequence_id)\n-        if use_cache and past_key_values is None:\n-            past_key_values = [() for _ in range(self.config.n_layers)]\n-        all_hidden_states = () if output_hidden_states else None\n-        all_self_attns = () if output_attentions else None\n-        for (b_idx, block) in enumerate(self.blocks):\n-            if output_hidden_states:\n-                assert all_hidden_states is not None\n-                all_hidden_states = all_hidden_states + (x,)\n-            past_key_value = past_key_values[b_idx] if past_key_values is not None else None\n-            if self.gradient_checkpointing and self.training:\n-                (x, attn_weights, past_key_value) = torch.utils.checkpoint.checkpoint(block, x, past_key_value, attn_bias, attention_mask, self.is_causal)\n-            else:\n-                (x, attn_weights, past_key_value) = block(x, past_key_value=past_key_value, attn_bias=attn_bias, attention_mask=attention_mask, is_causal=self.is_causal)\n-            if past_key_values is not None:\n-                past_key_values[b_idx] = past_key_value\n-            if output_attentions:\n-                assert all_self_attns is not None\n-                all_self_attns = all_self_attns + (attn_weights,)\n-        x = self.norm_f(x)\n-        if output_hidden_states:\n-            assert all_hidden_states is not None\n-            all_hidden_states = all_hidden_states + (x,)\n-        return BaseModelOutputWithPast(last_hidden_state=x, past_key_values=past_key_values, hidden_states=all_hidden_states, attentions=all_self_attns)\n-\n-    def param_init_fn(self, module):\n-        init_fn_name = self.config.init_config['name']\n-        MODEL_INIT_REGISTRY[init_fn_name](module=module, n_layers=self.config.n_layers, d_model=self.config.d_model, **self.config.init_config)\n-\n-    def fsdp_wrap_fn(self, module):\n-        return isinstance(module, MPTBlock)\n-\n-    def activation_checkpointing_fn(self, module):\n-        return isinstance(module, MPTBlock)\n-\n-class MPTForCausalLM(MPTPreTrainedModel):\n-\n-    def __init__(self, config: MPTConfig):\n-        super().__init__(config)\n-        if not config.tie_word_embeddings:\n-            raise ValueError('MPTForCausalLM only supports tied word embeddings')\n-        print(f'Instantiating an MPTForCausalLM model from {__file__}')\n-        self.transformer = MPTModel(config)\n-        for child in self.transformer.children():\n-            if isinstance(child, torch.nn.ModuleList):\n-                continue\n-            if isinstance(child, torch.nn.Module):\n-                child._fsdp_wrap = True\n-        self.logit_scale = None\n-        if config.logit_scale is not None:\n-            logit_scale = config.logit_scale\n-            if isinstance(logit_scale, str):\n-                if logit_scale == 'inv_sqrt_d_model':\n-                    logit_scale = 1 / math.sqrt(config.d_model)\n-                else:\n-                    raise ValueError(f\"logit_scale={logit_scale!r} is not recognized as an option; use numeric value or 'inv_sqrt_d_model'.\")\n-            self.logit_scale = logit_scale\n-\n-    def get_input_embeddings(self):\n-        return self.transformer.wte\n-\n-    def set_input_embeddings(self, value):\n-        self.transformer.wte = value\n-\n-    def get_output_embeddings(self):\n-        return self.transformer.wte\n-\n-    def set_output_embeddings(self, new_embeddings):\n-        self.transformer.wte = new_embeddings\n-\n-    def set_decoder(self, decoder):\n-        self.transformer = decoder\n-\n-    def get_decoder(self):\n-        return self.transformer\n-\n-    def forward(self, input_ids: torch.LongTensor, past_key_values: Optional[List[Tuple[torch.FloatTensor]]]=None, attention_mask: Optional[torch.ByteTensor]=None, prefix_mask: Optional[torch.ByteTensor]=None, sequence_id: Optional[torch.LongTensor]=None, labels: Optional[torch.LongTensor]=None, return_dict: Optional[bool]=None, output_attentions: Optional[bool]=None, output_hidden_states: Optional[bool]=None, use_cache: Optional[bool]=None, inputs_embeds: Optional[torch.FloatTensor]=None):\n-        return_dict = return_dict if return_dict is not None else self.config.return_dict\n-        use_cache = use_cache if use_cache is not None else self.config.use_cache\n-        if inputs_embeds is not None:\n-            raise NotImplementedError('inputs_embeds has to be None (for hf/peft support).')\n-        outputs = self.transformer(input_ids=input_ids, past_key_values=past_key_values, attention_mask=attention_mask, prefix_mask=prefix_mask, sequence_id=sequence_id, return_dict=return_dict, output_attentions=output_attentions, output_hidden_states=output_hidden_states, use_cache=use_cache)\n-        logits = self.transformer.wte(outputs.last_hidden_state.to(self.transformer.wte.weight.device), True)\n-        if self.logit_scale is not None:\n-            if self.logit_scale == 0:\n-                warnings.warn(f'Multiplying logits by self.logit_scale={self.logit_scale!r}. This will produce uniform (uninformative) outputs.')\n-            logits *= self.logit_scale\n-        loss = None\n-        if labels is not None:\n-            labels = torch.roll(labels, shifts=-1)\n-            labels[:, -1] = -100\n-            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), labels.to(logits.device).view(-1))\n-        return CausalLMOutputWithPast(loss=loss, logits=logits, past_key_values=outputs.past_key_values, hidden_states=outputs.hidden_states, attentions=outputs.attentions)\n-\n-    def param_init_fn(self, module):\n-        init_fn_name = self.config.init_config['name']\n-        MODEL_INIT_REGISTRY[init_fn_name](module=module, n_layers=self.config.n_layers, d_model=self.config.d_model, **self.config.init_config)\n-\n-    def fsdp_wrap_fn(self, module):\n-        return isinstance(module, MPTBlock)\n-\n-    def activation_checkpointing_fn(self, module):\n-        return isinstance(module, MPTBlock)\n-\n-    def prepare_inputs_for_generation(self, input_ids, past_key_values=None, inputs_embeds=None, **kwargs):\n-        if inputs_embeds is not None:\n-            raise NotImplementedError('inputs_embeds is not implemented for MPT yet')\n-        attention_mask = kwargs['attention_mask'].bool()\n-        if attention_mask[:, -1].sum() != attention_mask.shape[0]:\n-            raise NotImplementedError('MPT does not support generation with right padding.')\n-        if self.transformer.attn_uses_sequence_id and self.training:\n-            sequence_id = torch.zeros_like(input_ids[:1])\n-        else:\n-            sequence_id = None\n-        if past_key_values is not None:\n-            input_ids = input_ids[:, -1].unsqueeze(-1)\n-        if self.transformer.prefix_lm:\n-            prefix_mask = torch.ones_like(attention_mask)\n-            if kwargs.get('use_cache') == False:\n-                raise NotImplementedError('MPT with prefix_lm=True does not support use_cache=False.')\n-        else:\n-            prefix_mask = None\n-        return {'input_ids': input_ids, 'attention_mask': attention_mask, 'prefix_mask': prefix_mask, 'sequence_id': sequence_id, 'past_key_values': past_key_values, 'use_cache': kwargs.get('use_cache', True)}\n-\n-    @staticmethod\n-    def _reorder_cache(past_key_values, beam_idx):\n-        \"\"\"Used by HuggingFace generate when using beam search with kv-caching.\n-\n-        See https://github.\u001b[93mcom/huggingface/transformers/blob/\u001b[93m3ec7a47664ebe40c40f4b722f6bb1cd30c3821ec\u001b[0m/src/transformers/models/gpt2/modeling\u001b[0m_gpt2.py#L1122-L1133\n-        for an example in transformers.\n-        \"\"\"\n-        reordered_past = []\n-        for layer_past in past_key_values:\n-            reordered_past += [tuple((past_state.index_select(0, beam_idx) for past_state in layer_past))]\n-        return reordered_past\n\\ No newline at end of file\n",
  "reason": "High Entropy",
  "stringsFound": [
    "com/huggingface/transformers/blob/3ec7a47664ebe40c40f4b722f6bb1cd30c3821ec/src/transformers/models/gpt2/modeling",
    "3ec7a47664ebe40c40f4b722f6bb1cd30c3821ec"
  ]
}
----------------------------------------
Secret #4:
{
  "branch": "origin/main",
  "commit": "update\n",
  "commitHash": "838e2643a52018f5d3eeee7ed3ebd6dc411c818b",
  "date": "2023-12-22 07:20:51",
  "diff": "@@ -1,181 +0,0 @@\n-import math\n-import warnings\n-from collections.abc import Sequence\n-from functools import partial\n-from typing import Optional, Tuple, Union\n-import torch\n-from torch import nn\n-from .norm import NORM_CLASS_REGISTRY\n-\n-def torch_default_param_init_fn_(module: nn.Module, verbose: int=0, **kwargs):\n-    del kwargs\n-    if verbose > 1:\n-        warnings.warn(f\"Initializing network using module's reset_parameters attribute\")\n-    if hasattr(module, 'reset_parameters'):\n-        module.reset_parameters()\n-\n-def fused_init_helper_(module: nn.Module, init_fn_):\n-    _fused = getattr(module, '_fused', None)\n-    if _fused is None:\n-        raise RuntimeError(f'Internal logic error')\n-    (dim, splits) = _fused\n-    splits = (0, *splits, module.weight.size(dim))\n-    for (s, e) in zip(splits[:-1], splits[1:]):\n-        slice_indices = [slice(None)] * module.weight.ndim\n-        slice_indices[dim] = slice(s, e)\n-        init_fn_(module.weight[slice_indices])\n-\n-def generic_param_init_fn_(module: nn.Module, init_fn_, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    del kwargs\n-    if verbose > 1:\n-        warnings.warn(f'If model has bias parameters they are initialized to 0.')\n-    init_div_is_residual = init_div_is_residual\n-    if init_div_is_residual is False:\n-        div_is_residual = 1.0\n-    elif init_div_is_residual is True:\n-        div_is_residual = math.sqrt(2 * n_layers)\n-    elif isinstance(init_div_is_residual, float) or isinstance(init_div_is_residual, int):\n-        div_is_residual = init_div_is_residual\n-    elif isinstance(init_div_is_residual, str) and init_div_is_residual.isnumeric():\n-        div_is_residual = float(init_div_is_residual)\n-    else:\n-        div_is_residual = 1.0\n-        raise ValueError(f'Expected init_div_is_residual to be boolean or numeric, got {init_div_is_residual}')\n-    if init_div_is_residual is not False:\n-        if verbose > 1:\n-            warnings.warn(f'Initializing _is_residual layers then dividing them by {div_is_residual:.3f}. ' + f'Set `init_div_is_residual: false` in init config to disable this.')\n-    if isinstance(module, nn.Linear):\n-        if hasattr(module, '_fused'):\n-            fused_init_helper_(module, init_fn_)\n-        else:\n-            init_fn_(module.weight)\n-        if module.bias is not None:\n-            torch.nn.init.zeros_(module.bias)\n-        if init_div_is_residual is not False and getattr(module, '_is_residual', False):\n-            with torch.no_grad():\n-                module.weight.div_(div_is_residual)\n-    elif isinstance(module, nn.Embedding):\n-        if emb_init_std is not None:\n-            std = emb_init_std\n-            if std == 0:\n-                warnings.warn(f'Embedding layer initialized to 0.')\n-            emb_init_fn_ = partial(torch.nn.init.normal_, mean=0.0, std=std)\n-            if verbose > 1:\n-                warnings.warn(f'Embedding layer initialized using normal distribution with mean=0 and std={std!r}.')\n-        elif emb_init_uniform_lim is not None:\n-            lim = emb_init_uniform_lim\n-            if isinstance(lim, Sequence):\n-                if len(lim) > 2:\n-                    raise ValueError(f'Uniform init requires a min and a max limit. User input: {lim}.')\n-                if lim[0] == lim[1]:\n-                    warnings.warn(f'Embedding layer initialized to {lim[0]}.')\n-            else:\n-                if lim == 0:\n-                    warnings.warn(f'Embedding layer initialized to 0.')\n-                lim = [-lim, lim]\n-            (a, b) = lim\n-            emb_init_fn_ = partial(torch.nn.init.uniform_, a=a, b=b)\n-            if verbose > 1:\n-                warnings.warn(f'Embedding layer initialized using uniform distribution in range {lim}.')\n-        else:\n-            emb_init_fn_ = init_fn_\n-        emb_init_fn_(module.weight)\n-    elif isinstance(module, tuple(set(NORM_CLASS_REGISTRY.values()))):\n-        if verbose > 1:\n-            warnings.warn(f'Norm weights are set to 1. If norm layer has a bias it is initialized to 0.')\n-        if hasattr(module, 'weight') and module.weight is not None:\n-            torch.nn.init.ones_(module.weight)\n-        if hasattr(module, 'bias') and module.bias is not None:\n-            torch.nn.init.zeros_(module.bias)\n-    elif isinstance(module, nn.MultiheadAttention):\n-        if module._qkv_same_embed_dim:\n-            assert module.in_proj_weight is not None\n-            assert module.q_proj_weight is None and module.k_proj_weight is None and (module.v_proj_weight is None)\n-            assert d_model is not None\n-            _d = d_model\n-            splits = (0, _d, 2 * _d, 3 * _d)\n-            for (s, e) in zip(splits[:-1], splits[1:]):\n-                init_fn_(module.in_proj_weight[s:e])\n-        else:\n-            assert module.q_proj_weight is not None and module.k_proj_weight is not None and (module.v_proj_weight is not None)\n-            assert module.in_proj_weight is None\n-            init_fn_(module.q_proj_weight)\n-            init_fn_(module.k_proj_weight)\n-            init_fn_(module.v_proj_weight)\n-        if module.in_proj_bias is not None:\n-            torch.nn.init.zeros_(module.in_proj_bias)\n-        if module.bias_k is not None:\n-            torch.nn.init.zeros_(module.bias_k)\n-        if module.bias_v is not None:\n-            torch.nn.init.zeros_(module.bias_v)\n-        init_fn_(module.out_proj.weight)\n-        if init_div_is_residual is not False and getattr(module.out_proj, '_is_residual', False):\n-            with torch.no_grad():\n-                module.out_proj.weight.div_(div_is_residual)\n-        if module.out_proj.bias is not None:\n-            torch.nn.init.zeros_(module.out_proj.bias)\n-    else:\n-        for _ in module.parameters(recurse=False):\n-            raise NotImplementedError(f'{module.__class__.__name__} parameters are not initialized by param_init_fn.')\n-\n-def _normal_init_(std, mean=0.0):\n-    return partial(torch.nn.init.normal_, mean=mean, std=std)\n-\n-def _normal_param_init_fn_(module: nn.Module, std: float, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    del kwargs\n-    init_fn_ = _normal_init_(std=std)\n-    if verbose > 1:\n-        warnings.warn(f'Using torch.nn.init.normal_ init fn mean=0.0, std={std}')\n-    generic_param_init_fn_(module=module, init_fn_=init_fn_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def baseline_param_init_fn_(module: nn.Module, init_std: float, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    del kwargs\n-    if init_std is None:\n-        raise ValueError(\"You must set model.init_config['init_std'] to a float value to use the default initialization scheme.\")\n-    _normal_param_init_fn_(module=module, std=init_std, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def small_param_init_fn_(module: nn.Module, n_layers: int, d_model: int, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    del kwargs\n-    std = math.sqrt(2 / (5 * d_model))\n-    _normal_param_init_fn_(module=module, std=std, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def neox_param_init_fn_(module: nn.Module, n_layers: int, d_model: int, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    \"\"\"From section 2.3.1 of GPT-NeoX-20B:\n-\n-    An Open-Source AutoregressiveLanguage Model \u2014 Black et. al. (2022)\n-    see https://github.com/EleutherAI/gpt-neox/blob/9610391ab319403cef079b438edd016a2443af54/megatron/model/init_functions.py#L151\n-    and https://github.com/EleutherAI/gpt-neox/blob/main/megatron/model/transformer.py\n-    \"\"\"\n-    del kwargs\n-    residual_div = n_layers / math.sqrt(10)\n-    if verbose > 1:\n-        warnings.warn(f'setting init_div_is_residual to {residual_div}')\n-    small_param_init_fn_(module=module, d_model=d_model, n_layers=n_layers, init_div_is_residual=residual_div, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def kaiming_uniform_param_init_fn_(module: nn.Module, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, init_gain: float=0, fan_mode: str='fan_in', init_nonlinearity: str='leaky_relu', verbose: int=0, **kwargs):\n-    del kwargs\n-    if verbose > 1:\n-        warnings.warn(f'Using nn.init.kaiming_uniform_ init fn with parameters: ' + f'a={init_gain}, mode={fan_mode}, nonlinearity={init_nonlinearity}')\n-    kaiming_uniform_ = partial(nn.init.kaiming_uniform_, a=init_gain, mode=fan_mode, nonlinearity=init_nonlinearity)\n-    generic_param_init_fn_(module=module, init_fn_=kaiming_uniform_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def kaiming_normal_param_init_fn_(module: nn.Module, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, init_gain: float=0, fan_mode: str='fan_in', init_nonlinearity: str='leaky_relu', verbose: int=0, **kwargs):\n-    del kwargs\n-    if verbose > 1:\n-        warnings.warn(f'Using nn.init.kaiming_normal_ init fn with parameters: ' + f'a={init_gain}, mode={fan_mode}, nonlinearity={init_nonlinearity}')\n-    kaiming_normal_ = partial(torch.nn.init.kaiming_normal_, a=init_gain, mode=fan_mode, nonlinearity=init_nonlinearity)\n-    generic_param_init_fn_(module=module, init_fn_=kaiming_normal_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def xavier_uniform_param_init_fn_(module: nn.Module, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, init_gain: float=0, verbose: int=0, **kwargs):\n-    del kwargs\n-    xavier_uniform_ = partial(torch.nn.init.xavier_uniform_, gain=init_gain)\n-    if verbose > 1:\n-        warnings.warn(f'Using torch.nn.init.xavier_uniform_ init fn with parameters: ' + f'gain={init_gain}')\n-    generic_param_init_fn_(module=module, init_fn_=xavier_uniform_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def xavier_normal_param_init_fn_(module: nn.Module, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, init_gain: float=0, verbose: int=0, **kwargs):\n-    xavier_normal_ = partial(torch.nn.init.xavier_normal_, gain=init_gain)\n-    if verbose > 1:\n-        warnings.warn(f'Using torch.nn.init.xavier_normal_ init fn with parameters: ' + f'gain={init_gain}')\n-    generic_param_init_fn_(module=module, init_fn_=xavier_normal_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-MODEL_INIT_REGISTRY = {'default_': torch_default_param_init_fn_, 'baseline_': baseline_param_init_fn_, 'kaiming_uniform_': kaiming_uniform_param_init_fn_, 'kaiming_normal_': kaiming_normal_param_init_fn_, 'neox_init_': neox_param_init_fn_, 'small_init_': small_param_init_fn_, 'xavier_uniform_': xavier_uniform_param_init_fn_, 'xavier_normal_': xavier_normal_param_init_fn_}\n\\ No newline at end of file\n",
  "path": "gllava/model/language_model/mpt/param_init_fns.py",
  "printDiff": "@@ -1,181 +0,0 @@\n-import math\n-import warnings\n-from collections.abc import Sequence\n-from functools import partial\n-from typing import Optional, Tuple, Union\n-import torch\n-from torch import nn\n-from .norm import NORM_CLASS_REGISTRY\n-\n-def torch_default_param_init_fn_(module: nn.Module, verbose: int=0, **kwargs):\n-    del kwargs\n-    if verbose > 1:\n-        warnings.warn(f\"Initializing network using module's reset_parameters attribute\")\n-    if hasattr(module, 'reset_parameters'):\n-        module.reset_parameters()\n-\n-def fused_init_helper_(module: nn.Module, init_fn_):\n-    _fused = getattr(module, '_fused', None)\n-    if _fused is None:\n-        raise RuntimeError(f'Internal logic error')\n-    (dim, splits) = _fused\n-    splits = (0, *splits, module.weight.size(dim))\n-    for (s, e) in zip(splits[:-1], splits[1:]):\n-        slice_indices = [slice(None)] * module.weight.ndim\n-        slice_indices[dim] = slice(s, e)\n-        init_fn_(module.weight[slice_indices])\n-\n-def generic_param_init_fn_(module: nn.Module, init_fn_, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    del kwargs\n-    if verbose > 1:\n-        warnings.warn(f'If model has bias parameters they are initialized to 0.')\n-    init_div_is_residual = init_div_is_residual\n-    if init_div_is_residual is False:\n-        div_is_residual = 1.0\n-    elif init_div_is_residual is True:\n-        div_is_residual = math.sqrt(2 * n_layers)\n-    elif isinstance(init_div_is_residual, float) or isinstance(init_div_is_residual, int):\n-        div_is_residual = init_div_is_residual\n-    elif isinstance(init_div_is_residual, str) and init_div_is_residual.isnumeric():\n-        div_is_residual = float(init_div_is_residual)\n-    else:\n-        div_is_residual = 1.0\n-        raise ValueError(f'Expected init_div_is_residual to be boolean or numeric, got {init_div_is_residual}')\n-    if init_div_is_residual is not False:\n-        if verbose > 1:\n-            warnings.warn(f'Initializing _is_residual layers then dividing them by {div_is_residual:.3f}. ' + f'Set `init_div_is_residual: false` in init config to disable this.')\n-    if isinstance(module, nn.Linear):\n-        if hasattr(module, '_fused'):\n-            fused_init_helper_(module, init_fn_)\n-        else:\n-            init_fn_(module.weight)\n-        if module.bias is not None:\n-            torch.nn.init.zeros_(module.bias)\n-        if init_div_is_residual is not False and getattr(module, '_is_residual', False):\n-            with torch.no_grad():\n-                module.weight.div_(div_is_residual)\n-    elif isinstance(module, nn.Embedding):\n-        if emb_init_std is not None:\n-            std = emb_init_std\n-            if std == 0:\n-                warnings.warn(f'Embedding layer initialized to 0.')\n-            emb_init_fn_ = partial(torch.nn.init.normal_, mean=0.0, std=std)\n-            if verbose > 1:\n-                warnings.warn(f'Embedding layer initialized using normal distribution with mean=0 and std={std!r}.')\n-        elif emb_init_uniform_lim is not None:\n-            lim = emb_init_uniform_lim\n-            if isinstance(lim, Sequence):\n-                if len(lim) > 2:\n-                    raise ValueError(f'Uniform init requires a min and a max limit. User input: {lim}.')\n-                if lim[0] == lim[1]:\n-                    warnings.warn(f'Embedding layer initialized to {lim[0]}.')\n-            else:\n-                if lim == 0:\n-                    warnings.warn(f'Embedding layer initialized to 0.')\n-                lim = [-lim, lim]\n-            (a, b) = lim\n-            emb_init_fn_ = partial(torch.nn.init.uniform_, a=a, b=b)\n-            if verbose > 1:\n-                warnings.warn(f'Embedding layer initialized using uniform distribution in range {lim}.')\n-        else:\n-            emb_init_fn_ = init_fn_\n-        emb_init_fn_(module.weight)\n-    elif isinstance(module, tuple(set(NORM_CLASS_REGISTRY.values()))):\n-        if verbose > 1:\n-            warnings.warn(f'Norm weights are set to 1. If norm layer has a bias it is initialized to 0.')\n-        if hasattr(module, 'weight') and module.weight is not None:\n-            torch.nn.init.ones_(module.weight)\n-        if hasattr(module, 'bias') and module.bias is not None:\n-            torch.nn.init.zeros_(module.bias)\n-    elif isinstance(module, nn.MultiheadAttention):\n-        if module._qkv_same_embed_dim:\n-            assert module.in_proj_weight is not None\n-            assert module.q_proj_weight is None and module.k_proj_weight is None and (module.v_proj_weight is None)\n-            assert d_model is not None\n-            _d = d_model\n-            splits = (0, _d, 2 * _d, 3 * _d)\n-            for (s, e) in zip(splits[:-1], splits[1:]):\n-                init_fn_(module.in_proj_weight[s:e])\n-        else:\n-            assert module.q_proj_weight is not None and module.k_proj_weight is not None and (module.v_proj_weight is not None)\n-            assert module.in_proj_weight is None\n-            init_fn_(module.q_proj_weight)\n-            init_fn_(module.k_proj_weight)\n-            init_fn_(module.v_proj_weight)\n-        if module.in_proj_bias is not None:\n-            torch.nn.init.zeros_(module.in_proj_bias)\n-        if module.bias_k is not None:\n-            torch.nn.init.zeros_(module.bias_k)\n-        if module.bias_v is not None:\n-            torch.nn.init.zeros_(module.bias_v)\n-        init_fn_(module.out_proj.weight)\n-        if init_div_is_residual is not False and getattr(module.out_proj, '_is_residual', False):\n-            with torch.no_grad():\n-                module.out_proj.weight.div_(div_is_residual)\n-        if module.out_proj.bias is not None:\n-            torch.nn.init.zeros_(module.out_proj.bias)\n-    else:\n-        for _ in module.parameters(recurse=False):\n-            raise NotImplementedError(f'{module.__class__.__name__} parameters are not initialized by param_init_fn.')\n-\n-def _normal_init_(std, mean=0.0):\n-    return partial(torch.nn.init.normal_, mean=mean, std=std)\n-\n-def _normal_param_init_fn_(module: nn.Module, std: float, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    del kwargs\n-    init_fn_ = _normal_init_(std=std)\n-    if verbose > 1:\n-        warnings.warn(f'Using torch.nn.init.normal_ init fn mean=0.0, std={std}')\n-    generic_param_init_fn_(module=module, init_fn_=init_fn_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def baseline_param_init_fn_(module: nn.Module, init_std: float, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    del kwargs\n-    if init_std is None:\n-        raise ValueError(\"You must set model.init_config['init_std'] to a float value to use the default initialization scheme.\")\n-    _normal_param_init_fn_(module=module, std=init_std, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def small_param_init_fn_(module: nn.Module, n_layers: int, d_model: int, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    del kwargs\n-    std = math.sqrt(2 / (5 * d_model))\n-    _normal_param_init_fn_(module=module, std=std, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def neox_param_init_fn_(module: nn.Module, n_layers: int, d_model: int, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, verbose: int=0, **kwargs):\n-    \"\"\"From section 2.3.1 of GPT-NeoX-20B:\n-\n-    An Open-Source AutoregressiveLanguage Model \u2014 Black et. al. (2022)\n-    see https://github.com/EleutherAI/gpt-neox/blob/\u001b[93m9610391ab319403cef079b438edd016a2443af54\u001b[0m/megatron/model/init_functions.py#L151\n-    and https://github.com/EleutherAI/gpt-neox/blob/main/megatron/model/transformer.py\n-    \"\"\"\n-    del kwargs\n-    residual_div = n_layers / math.sqrt(10)\n-    if verbose > 1:\n-        warnings.warn(f'setting init_div_is_residual to {residual_div}')\n-    small_param_init_fn_(module=module, d_model=d_model, n_layers=n_layers, init_div_is_residual=residual_div, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def kaiming_uniform_param_init_fn_(module: nn.Module, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, init_gain: float=0, fan_mode: str='fan_in', init_nonlinearity: str='leaky_relu', verbose: int=0, **kwargs):\n-    del kwargs\n-    if verbose > 1:\n-        warnings.warn(f'Using nn.init.kaiming_uniform_ init fn with parameters: ' + f'a={init_gain}, mode={fan_mode}, nonlinearity={init_nonlinearity}')\n-    kaiming_uniform_ = partial(nn.init.kaiming_uniform_, a=init_gain, mode=fan_mode, nonlinearity=init_nonlinearity)\n-    generic_param_init_fn_(module=module, init_fn_=kaiming_uniform_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def kaiming_normal_param_init_fn_(module: nn.Module, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, init_gain: float=0, fan_mode: str='fan_in', init_nonlinearity: str='leaky_relu', verbose: int=0, **kwargs):\n-    del kwargs\n-    if verbose > 1:\n-        warnings.warn(f'Using nn.init.kaiming_normal_ init fn with parameters: ' + f'a={init_gain}, mode={fan_mode}, nonlinearity={init_nonlinearity}')\n-    kaiming_normal_ = partial(torch.nn.init.kaiming_normal_, a=init_gain, mode=fan_mode, nonlinearity=init_nonlinearity)\n-    generic_param_init_fn_(module=module, init_fn_=kaiming_normal_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def xavier_uniform_param_init_fn_(module: nn.Module, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, init_gain: float=0, verbose: int=0, **kwargs):\n-    del kwargs\n-    xavier_uniform_ = partial(torch.nn.init.xavier_uniform_, gain=init_gain)\n-    if verbose > 1:\n-        warnings.warn(f'Using torch.nn.init.xavier_uniform_ init fn with parameters: ' + f'gain={init_gain}')\n-    generic_param_init_fn_(module=module, init_fn_=xavier_uniform_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-\n-def xavier_normal_param_init_fn_(module: nn.Module, n_layers: int, d_model: Optional[int]=None, init_div_is_residual: Union[int, float, str, bool]=True, emb_init_std: Optional[float]=None, emb_init_uniform_lim: Optional[Union[Tuple[float, float], float]]=None, init_gain: float=0, verbose: int=0, **kwargs):\n-    xavier_normal_ = partial(torch.nn.init.xavier_normal_, gain=init_gain)\n-    if verbose > 1:\n-        warnings.warn(f'Using torch.nn.init.xavier_normal_ init fn with parameters: ' + f'gain={init_gain}')\n-    generic_param_init_fn_(module=module, init_fn_=xavier_normal_, d_model=d_model, n_layers=n_layers, init_div_is_residual=init_div_is_residual, emb_init_std=emb_init_std, emb_init_uniform_lim=emb_init_uniform_lim, verbose=verbose)\n-MODEL_INIT_REGISTRY = {'default_': torch_default_param_init_fn_, 'baseline_': baseline_param_init_fn_, 'kaiming_uniform_': kaiming_uniform_param_init_fn_, 'kaiming_normal_': kaiming_normal_param_init_fn_, 'neox_init_': neox_param_init_fn_, 'small_init_': small_param_init_fn_, 'xavier_uniform_': xavier_uniform_param_init_fn_, 'xavier_normal_': xavier_normal_param_init_fn_}\n\\ No newline at end of file\n",
  "reason": "High Entropy",
  "stringsFound": [
    "9610391ab319403cef079b438edd016a2443af54"
  ]
}
----------------------------------------
Secret #5:
{
  "branch": "origin/main",
  "commit": "update\n",
  "commitHash": "838e2643a52018f5d3eeee7ed3ebd6dc411c818b",
  "date": "2023-12-22 07:20:51",
  "diff": "@@ -1,1185 +0,0 @@\n-\"\"\"\n-Conversation prompt templates.\n-\n-We kindly request that you import fastchat instead of copying this file if you wish to use it.\n-If you have any changes in mind, please contribute back so the community can benefit collectively and continue to maintain these valuable templates.\n-\"\"\"\n-\n-import dataclasses\n-from enum import auto, IntEnum\n-from typing import List, Any, Dict, Union, Tuple\n-\n-\n-class SeparatorStyle(IntEnum):\n-    \"\"\"Separator styles.\"\"\"\n-\n-    ADD_COLON_SINGLE = auto()\n-    ADD_COLON_TWO = auto()\n-    ADD_COLON_SPACE_SINGLE = auto()\n-    NO_COLON_SINGLE = auto()\n-    NO_COLON_TWO = auto()\n-    ADD_NEW_LINE_SINGLE = auto()\n-    LLAMA2 = auto()\n-    CHATGLM = auto()\n-    CHATML = auto()\n-    CHATINTERN = auto()\n-    DOLLY = auto()\n-    RWKV = auto()\n-    PHOENIX = auto()\n-    ROBIN = auto()\n-    FALCON_CHAT = auto()\n-\n-\n-@dataclasses.dataclass\n-class Conversation:\n-    \"\"\"A class that manages prompt templates and keeps all conversation history.\"\"\"\n-\n-    # The name of this template\n-    name: str\n-    # The template of the system prompt\n-    system_template: str = \"{system_message}\"\n-    # The system message\n-    system_message: str = \"\"\n-    # The names of two roles\n-    roles: Tuple[str] = (\"USER\", \"ASSISTANT\")\n-    # All messages. Each item is (role, message).\n-    messages: List[List[str]] = ()\n-    # The number of few shot examples\n-    offset: int = 0\n-    # The separator style and configurations\n-    sep_style: SeparatorStyle = SeparatorStyle.ADD_COLON_SINGLE\n-    sep: str = \"\\n\"\n-    sep2: str = None\n-    # Stop criteria (the default one is EOS token)\n-    stop_str: Union[str, List[str]] = None\n-    # Stops generation if meeting any token in this list\n-    stop_token_ids: List[int] = None\n-\n-    def get_prompt(self) -> str:\n-        \"\"\"Get the prompt for generation.\"\"\"\n-        system_prompt = self.system_template.format(system_message=self.system_message)\n-        if self.sep_style == SeparatorStyle.ADD_COLON_SINGLE:\n-            ret = system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \": \" + message + self.sep\n-                else:\n-                    ret += role + \":\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.ADD_COLON_TWO:\n-            seps = [self.sep, self.sep2]\n-            ret = system_prompt + seps[0]\n-            for i, (role, message) in enumerate(self.messages):\n-                if message:\n-                    ret += role + \": \" + message + seps[i % 2]\n-                else:\n-                    ret += role + \":\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.ADD_COLON_SPACE_SINGLE:\n-            ret = system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \": \" + message + self.sep\n-                else:\n-                    ret += role + \": \"  # must be end with a space\n-            return ret\n-        elif self.sep_style == SeparatorStyle.ADD_NEW_LINE_SINGLE:\n-            ret = \"\" if system_prompt == \"\" else system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \"\\n\" + message + self.sep\n-                else:\n-                    ret += role + \"\\n\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.NO_COLON_SINGLE:\n-            ret = system_prompt\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + message + self.sep\n-                else:\n-                    ret += role\n-            return ret\n-        elif self.sep_style == SeparatorStyle.NO_COLON_TWO:\n-            seps = [self.sep, self.sep2]\n-            ret = system_prompt\n-            for i, (role, message) in enumerate(self.messages):\n-                if message:\n-                    ret += role + message + seps[i % 2]\n-                else:\n-                    ret += role\n-            return ret\n-        elif self.sep_style == SeparatorStyle.RWKV:\n-            ret = system_prompt\n-            for i, (role, message) in enumerate(self.messages):\n-                if message:\n-                    ret += (\n-                            role\n-                            + \": \"\n-                            + message.replace(\"\\r\\n\", \"\\n\").replace(\"\\n\\n\", \"\\n\")\n-                    )\n-                    ret += \"\\n\\n\"\n-                else:\n-                    ret += role + \":\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.LLAMA2:\n-            seps = [self.sep, self.sep2]\n-            if self.system_message:\n-                ret = system_prompt\n-            else:\n-                ret = \"[INST] \"\n-            for i, (role, message) in enumerate(self.messages):\n-                tag = self.roles[i % 2]\n-                if message:\n-                    if i == 0:\n-                        ret += message + \" \"\n-                    else:\n-                        ret += tag + \" \" + message + seps[i % 2]\n-                else:\n-                    ret += tag\n-            return ret\n-        elif self.sep_style == SeparatorStyle.CHATGLM:\n-            # source: https://huggingface.co/THUDM/chatglm-6b/blob/1d240ba371910e9282298d4592532d7f0f3e9f3e/modeling_chatglm.py#L1302-L1308\n-            # source2: https://huggingface.co/THUDM/chatglm2-6b/blob/e186c891cf64310ac66ef10a87e6635fa6c2a579/modeling_chatglm.py#L926\n-            round_add_n = 1 if self.name == \"chatglm2\" else 0\n-            if system_prompt:\n-                ret = system_prompt + self.sep\n-            else:\n-                ret = \"\"\n-\n-            for i, (role, message) in enumerate(self.messages):\n-                if i % 2 == 0:\n-                    ret += f\"[Round {i//2 + round_add_n}]{self.sep}\"\n-\n-                if message:\n-                    ret += f\"{role}\uff1a{message}{self.sep}\"\n-                else:\n-                    ret += f\"{role}\uff1a\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.CHATML:\n-            ret = \"\" if system_prompt == \"\" else system_prompt + self.sep + \"\\n\"\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \"\\n\" + message + self.sep + \"\\n\"\n-                else:\n-                    ret += role + \"\\n\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.CHATINTERN:\n-            # source: https://huggingface.co/internlm/internlm-chat-7b-8k/blob/bd546fa984b4b0b86958f56bf37f94aa75ab8831/modeling_internlm.py#L771\n-            seps = [self.sep, self.sep2]\n-            ret = system_prompt\n-            for i, (role, message) in enumerate(self.messages):\n-                if i % 2 == 0:\n-                    ret += \"<s>\"\n-                if message:\n-                    ret += role + \":\" + message + seps[i % 2] + \"\\n\"\n-                else:\n-                    ret += role + \":\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.DOLLY:\n-            seps = [self.sep, self.sep2]\n-            ret = system_prompt\n-            for i, (role, message) in enumerate(self.messages):\n-                if message:\n-                    ret += role + \":\\n\" + message + seps[i % 2]\n-                    if i % 2 == 1:\n-                        ret += \"\\n\\n\"\n-                else:\n-                    ret += role + \":\\n\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.PHOENIX:\n-            ret = system_prompt\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \": \" + \"<s>\" + message + \"</s>\"\n-                else:\n-                    ret += role + \": \" + \"<s>\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.ROBIN:\n-            ret = system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \":\\n\" + message + self.sep\n-                else:\n-                    ret += role + \":\\n\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.FALCON_CHAT:\n-            ret = \"\"\n-            if self.system_message:\n-                ret += system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \": \" + message + self.sep\n-                else:\n-                    ret += role + \":\"\n-\n-            return ret\n-        else:\n-            raise ValueError(f\"Invalid style: {self.sep_style}\")\n-\n-    def set_system_message(self, system_message: str):\n-        \"\"\"Set the system message.\"\"\"\n-        self.system_message = system_message\n-\n-    def append_message(self, role: str, message: str):\n-        \"\"\"Append a new message.\"\"\"\n-        self.messages.append([role, message])\n-\n-    def update_last_message(self, message: str):\n-        \"\"\"Update the last output.\n-\n-        The last message is typically set to be None when constructing the prompt,\n-        so we need to update it in-place after getting the response from a model.\n-        \"\"\"\n-        self.messages[-1][1] = message\n-\n-    def to_gradio_chatbot(self):\n-        \"\"\"Convert the conversation to gradio chatbot format.\"\"\"\n-        ret = []\n-        for i, (role, msg) in enumerate(self.messages[self.offset :]):\n-            if i % 2 == 0:\n-                ret.append([msg, None])\n-            else:\n-                ret[-1][-1] = msg\n-        return ret\n-\n-    def to_openai_api_messages(self):\n-        \"\"\"Convert the conversation to OpenAI chat completion format.\"\"\"\n-        ret = [{\"role\": \"system\", \"content\": self.system_message}]\n-\n-        for i, (_, msg) in enumerate(self.messages[self.offset :]):\n-            if i % 2 == 0:\n-                ret.append({\"role\": \"user\", \"content\": msg})\n-            else:\n-                if msg is not None:\n-                    ret.append({\"role\": \"assistant\", \"content\": msg})\n-        return ret\n-\n-    def copy(self):\n-        return Conversation(\n-            name=self.name,\n-            system_template=self.system_template,\n-            system_message=self.system_message,\n-            roles=self.roles,\n-            messages=[[x, y] for x, y in self.messages],\n-            offset=self.offset,\n-            sep_style=self.sep_style,\n-            sep=self.sep,\n-            sep2=self.sep2,\n-            stop_str=self.stop_str,\n-            stop_token_ids=self.stop_token_ids,\n-        )\n-\n-    def dict(self):\n-        return {\n-            \"template_name\": self.name,\n-            \"system_message\": self.system_message,\n-            \"roles\": self.roles,\n-            \"messages\": self.messages,\n-            \"offset\": self.offset,\n-        }\n-\n-\n-# A global registry for all conversation templates\n-conv_templates: Dict[str, Conversation] = {}\n-\n-\n-def register_conv_template(template: Conversation, override: bool = False):\n-    \"\"\"Register a new conversation template.\"\"\"\n-    if not override:\n-        assert (\n-                template.name not in conv_templates\n-        ), f\"{template.name} has been registered.\"\n-\n-    conv_templates[template.name] = template\n-\n-\n-def get_conv_template(name: str) -> Conversation:\n-    \"\"\"Get a conversation template.\"\"\"\n-    return conv_templates[name].copy()\n-\n-\n-# An empty template for raw conversation.\n-register_conv_template(\n-    Conversation(\n-        name=\"raw\",\n-        system_message=\"\",\n-        roles=(\"\", \"\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-    )\n-)\n-\n-# A template with a one-shot conversation example\n-register_conv_template(\n-    Conversation(\n-        name=\"one_shot\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"Human\", \"Assistant\"),\n-        messages=(\n-            (\n-                \"Human\",\n-                \"Got any creative ideas for a 10 year old\u2019s birthday?\",\n-            ),\n-            (\n-                \"Assistant\",\n-                \"\"\"Of course! Here are some creative ideas for a 10-year-old's birthday party:\n-1. Treasure Hunt: Organize a treasure hunt in your backyard or nearby park. Create clues and riddles for the kids to solve, leading them to hidden treasures and surprises.\n-2. Science Party: Plan a science-themed party where kids can engage in fun and interactive experiments. You can set up different stations with activities like making slime, erupting volcanoes, or creating simple chemical reactions.\n-3. Outdoor Movie Night: Set up a backyard movie night with a projector and a large screen or white sheet. Create a cozy seating area with blankets and pillows, and serve popcorn and snacks while the kids enjoy a favorite movie under the stars.\n-4. DIY Crafts Party: Arrange a craft party where kids can unleash their creativity. Provide a variety of craft supplies like beads, paints, and fabrics, and let them create their own unique masterpieces to take home as party favors.\n-5. Sports Olympics: Host a mini Olympics event with various sports and games. Set up different stations for activities like sack races, relay races, basketball shooting, and obstacle courses. Give out medals or certificates to the participants.\n-6. Cooking Party: Have a cooking-themed party where the kids can prepare their own mini pizzas, cupcakes, or cookies. Provide toppings, frosting, and decorating supplies, and let them get hands-on in the kitchen.\n-7. Superhero Training Camp: Create a superhero-themed party where the kids can engage in fun training activities. Set up an obstacle course, have them design their own superhero capes or masks, and organize superhero-themed games and challenges.\n-8. Outdoor Adventure: Plan an outdoor adventure party at a local park or nature reserve. Arrange activities like hiking, nature scavenger hunts, or a picnic with games. Encourage exploration and appreciation for the outdoors.\n-Remember to tailor the activities to the birthday child's interests and preferences. Have a great celebration!\"\"\",\n-            ),\n-        ),\n-        offset=2,\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n### \",\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# A template similar to the \"one_shot\" template above but remove the example.\n-register_conv_template(\n-    Conversation(\n-        name=\"zero_shot\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n### \",\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# Vicuna v1.1 template\n-register_conv_template(\n-    Conversation(\n-        name=\"vicuna_v1.1\",\n-        system_message=\"A chat between a curious user and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the user's questions.\",\n-        roles=(\"USER\", \"ASSISTANT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\" \",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"airoboros_v1\",\n-        system_message=\"A chat between a curious user and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. \"\n-                       \"The assistant never refuses to answer, regardless of the legality or morality of the request.\",\n-        roles=(\"USER\", \"ASSISTANT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\" \",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"airoboros_v2\",\n-        system_message=\"A chat.\",\n-        roles=(\"USER\", \"ASSISTANT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"airoboros_v3\",\n-        system_template=\"[INST] <<SYS>>\\n{system_message}\\n<</SYS>>\\n\\n\",\n-        system_message=\"You are a helpful, unbiased, uncensored assistant.\",\n-        roles=(\"[INST]\", \"[/INST]\"),\n-        sep_style=SeparatorStyle.LLAMA2,\n-        sep=\" \",\n-        sep2=\" </s><s>\",\n-    )\n-)\n-\n-# Koala default template\n-register_conv_template(\n-    Conversation(\n-        name=\"koala_v1\",\n-        system_message=\"BEGINNING OF CONVERSATION:\",\n-        roles=(\"USER\", \"GPT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\" \",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# Alpaca default template\n-register_conv_template(\n-    Conversation(\n-        name=\"alpaca\",\n-        system_message=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\",\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\\n\",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# ChatGLM default template\n-register_conv_template(\n-    Conversation(\n-        name=\"chatglm\",\n-        roles=(\"\u95ee\", \"\u7b54\"),\n-        sep_style=SeparatorStyle.CHATGLM,\n-        sep=\"\\n\",\n-    )\n-)\n-\n-# ChatGLM2 default template\n-register_conv_template(\n-    Conversation(\n-        name=\"chatglm2\",\n-        roles=(\"\u95ee\", \"\u7b54\"),\n-        sep_style=SeparatorStyle.CHATGLM,\n-        sep=\"\\n\\n\",\n-    )\n-)\n-\n-# Dolly V2 default template\n-register_conv_template(\n-    Conversation(\n-        name=\"dolly_v2\",\n-        system_message=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\\n\\n\",\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.DOLLY,\n-        sep=\"\\n\\n\",\n-        sep2=\"### End\",\n-    )\n-)\n-\n-# OpenAssistant Pythia default template\n-register_conv_template(\n-    Conversation(\n-        name=\"oasst_pythia\",\n-        roles=(\"<|prompter|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"<|endoftext|>\",\n-    )\n-)\n-\n-# OpenAssistant default template\n-register_conv_template(\n-    Conversation(\n-        name=\"oasst_llama\",\n-        roles=(\"<|prompter|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"</s>\",\n-    )\n-)\n-\n-# Tulu default template\n-register_conv_template(\n-    Conversation(\n-        name=\"tulu\",\n-        roles=(\"<|user|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.ADD_NEW_LINE_SINGLE,\n-        sep=\"\\n\",\n-    )\n-)\n-\n-# StableLM Alpha default template\n-register_conv_template(\n-    Conversation(\n-        name=\"stablelm\",\n-        system_template=\"<|SYSTEM|>{system_message}\",\n-        system_message=\"\"\"# StableLM Tuned (Alpha version)\n-- StableLM is a helpful and harmless open-source AI language model developed by StabilityAI.\n-- StableLM is excited to be able to help the user, but will refuse to do anything that could be considered harmful to the user.\n-- StableLM is more than just an information source, StableLM is also able to write poetry, short stories, and make jokes.\n-- StableLM will refuse to participate in anything that could harm a human.\n-\"\"\",\n-        roles=(\"<|USER|>\", \"<|ASSISTANT|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-        stop_token_ids=[50278, 50279, 50277, 1, 0],\n-    )\n-)\n-\n-# Baize default template\n-register_conv_template(\n-    Conversation(\n-        name=\"baize\",\n-        system_message=\"The following is a conversation between a human and an AI assistant named Baize (named after a mythical creature in Chinese folklore). Baize is an open-source AI assistant developed by UCSD and Sun Yat-Sen University. The human and the AI assistant take turns chatting. Human statements start with [|Human|] and AI assistant statements start with [|AI|]. The AI assistant always provides responses in as much detail as possible, and in Markdown format. The AI assistant always declines to engage with topics, questions and instructions related to unethical, controversial, or sensitive issues. Complete the transcript in exactly that format.\\n\",\n-        roles=(\"[|Human|]\", \"[|AI|]\"),\n-        messages=(\n-            (\"[|Human|]\", \"Hello!\"),\n-            (\"[|AI|]\", \"Hi!\"),\n-        ),\n-        offset=2,\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\\n\",\n-        stop_str=\"[|Human|]\",\n-    )\n-)\n-\n-# RWKV-4-Raven default template\n-register_conv_template(\n-    Conversation(\n-        name=\"rwkv\",\n-        roles=(\"Bob\", \"Alice\"),\n-        messages=(\n-            (\"Bob\", \"hi\"),\n-            (\n-                \"Alice\",\n-                \"Hi. I am your assistant and I will provide expert full response in full details. Please feel free to ask any question and I will always answer it.\",\n-            ),\n-        ),\n-        offset=2,\n-        sep_style=SeparatorStyle.RWKV,\n-        sep=\"\",\n-        stop_str=\"\\n\\n\",\n-    )\n-)\n-\n-# Buddy default template\n-register_conv_template(\n-    Conversation(\n-        name=\"openbuddy\",\n-        system_message=\"\"\"Consider a conversation between User (a human) and Assistant (named Buddy).\n-Buddy is an INTP-T, a friendly, intelligent and multilingual AI assistant, by OpenBuddy team. GitHub: https://github.com/OpenBuddy/OpenBuddy\n-Buddy cannot access the Internet.\n-Buddy can fluently speak the user's language (e.g. English, Chinese).\n-Buddy can generate poems, stories, code, essays, songs, parodies, and more.\n-Buddy possesses vast knowledge about the world, history, and culture.\n-Buddy's responses are always safe, creative, high-quality, human-like, and interesting.\n-Buddy strictly refuses to discuss political, NSFW, or other unsafe topics.\n-\n-User: Hi.\n-Assistant: Hi, I'm Buddy, your AI assistant. How can I help you today?\"\"\",\n-        roles=(\"User\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-    )\n-)\n-\n-# Phoenix default template\n-register_conv_template(\n-    Conversation(\n-        name=\"phoenix\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.PHOENIX,\n-        sep=\"</s>\",\n-    )\n-)\n-\n-# ReaLM default template\n-register_conv_template(\n-    Conversation(\n-        name=\"ReaLM-7b-v1\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.PHOENIX,\n-        sep=\"</s>\",\n-    )\n-)\n-\n-# ChatGPT default template\n-register_conv_template(\n-    Conversation(\n-        name=\"chatgpt\",\n-        system_message=\"You are a helpful assistant.\",\n-        roles=(\"user\", \"assistant\"),\n-        sep_style=None,\n-        sep=None,\n-    )\n-)\n-\n-# Claude default template\n-register_conv_template(\n-    Conversation(\n-        name=\"claude\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\\n\",\n-    )\n-)\n-\n-# MPT default template\n-register_conv_template(\n-    Conversation(\n-        name=\"mpt-7b-chat\",\n-        system_template=\"\"\"<|im_start|>system\n-{system_message}\"\"\",\n-        system_message=\"\"\"- You are a helpful assistant chatbot trained by MosaicML.\n-- You answer questions.\n-- You are excited to be able to help the user, but will refuse to do anything that could be considered harmful to the user.\n-- You are more than just an information source, you are also able to write poetry, short stories, and make jokes.\"\"\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[50278, 0],\n-    )\n-)\n-\n-# MPT-30b-chat default template\n-register_conv_template(\n-    Conversation(\n-        name=\"mpt-30b-chat\",\n-        system_template=\"\"\"<|im_start|>system\n-{system_message}\"\"\",\n-        system_message=\"\"\"A conversation between a user and an LLM-based AI assistant. The assistant gives helpful and honest answers.\"\"\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[50278, 0],\n-    )\n-)\n-\n-# Lemur-70b-chat default template\n-# reference: https://huggingface.co/OpenLemur/lemur-70b-chat-v1#generation\n-register_conv_template(\n-    Conversation(\n-        name=\"lemur-70b-chat\",\n-        system_template=\"\"\"<|im_start|>system\n-{system_message}\"\"\",\n-        system_message=\"\"\"You are a helpful, respectful, and honest assistant.\"\"\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[32002, 0],\n-    )\n-)\n-\n-# MPT-30b-instruct default template\n-# reference: https://huggingface.co/mosaicml/mpt-30b-instruct#formatting\n-register_conv_template(\n-    Conversation(\n-        name=\"mpt-30b-instruct\",\n-        system_template=\"{system_message}\",\n-        system_message=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\",\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.ADD_NEW_LINE_SINGLE,\n-        sep=\"\\n\\n\",\n-        stop_token_ids=[50278, 0],\n-    )\n-)\n-\n-# Bard default template\n-# Reference: https://github.com/google/generative-ai-python/blob/9c99bcb474a991a97a2e7d62fcdb52db7ce40729/google/generativeai/discuss.py#L150\n-#            https://github.com/google/generative-ai-python/blob/9c99bcb474a991a97a2e7d62fcdb52db7ce40729/google/generativeai/discuss.py#L40\n-register_conv_template(\n-    Conversation(\n-        name=\"bard\",\n-        roles=(\"0\", \"1\"),\n-        sep_style=None,\n-        sep=None,\n-    )\n-)\n-\n-# BiLLa default template\n-register_conv_template(\n-    Conversation(\n-        name=\"billa\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SPACE_SINGLE,\n-        sep=\"\\n\",\n-        stop_str=\"Human:\",\n-    )\n-)\n-\n-# RedPajama INCITE default template\n-register_conv_template(\n-    Conversation(\n-        name=\"redpajama-incite\",\n-        roles=(\"<human>\", \"<bot>\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-        stop_str=\"<human>\",\n-    )\n-)\n-\n-# h2oGPT default template\n-register_conv_template(\n-    Conversation(\n-        name=\"h2ogpt\",\n-        roles=(\"<|prompt|>\", \"<|answer|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"</s>\",\n-    )\n-)\n-\n-# Robin default template\n-register_conv_template(\n-    Conversation(\n-        name=\"Robin\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"###Human\", \"###Assistant\"),\n-        sep_style=SeparatorStyle.ROBIN,\n-        sep=\"\\n\",\n-        stop_token_ids=[2, 396],\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# Snoozy default template\n-# Reference: https://github.com/nomic-ai/gpt4all/blob/d4861030b778da6db59d21d2927a4aba4f9f1f43/gpt4all-bindings/python/gpt4all/gpt4all.py#L232\n-register_conv_template(\n-    Conversation(\n-        name=\"snoozy\",\n-        system_template=\"### Instruction:\\n{system_message}\",\n-        system_message=\"The prompt below is a question to answer, a task to complete, or a conversation to respond to; decide which and write an appropriate response.\",\n-        roles=(\"### Prompt\", \"### Response\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# manticore default template\n-register_conv_template(\n-    Conversation(\n-        name=\"manticore\",\n-        roles=(\"USER\", \"ASSISTANT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# Falcon default template\n-register_conv_template(\n-    Conversation(\n-        name=\"falcon\",\n-        roles=(\"User\", \"Assistant\"),\n-        messages=[],\n-        sep_style=SeparatorStyle.RWKV,\n-        sep=\"\\n\",\n-        sep2=\"<|endoftext|>\",\n-        stop_str=\"\\nUser\",  # use stop_str to stop generation after stop_token_ids, it will also remove stop_str from the generated text\n-        stop_token_ids=[\n-            0,\n-            1,\n-            2,\n-            3,\n-            4,\n-            5,\n-            6,\n-            7,\n-            8,\n-            9,\n-            10,\n-            11,\n-        ],  # it better only put special tokens here, because tokenizer only remove special tokens\n-    )\n-)\n-\n-# ChangGPT default template\n-register_conv_template(\n-    Conversation(\n-        name=\"polyglot_changgpt\",\n-        roles=(\"B\", \"A\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-    )\n-)\n-\n-# tigerbot template\n-register_conv_template(\n-    Conversation(\n-        name=\"tigerbot\",\n-        system_message=\"A chat between a curious user and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the user's questions.\",\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.ROBIN,\n-        sep=\"\\n\\n\",\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# ref: https://huggingface.co/Salesforce/xgen-7b-8k-inst\n-register_conv_template(\n-    Conversation(\n-        name=\"xgen\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n-        roles=(\"### Human\", \"### Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-        stop_token_ids=[50256],\n-    )\n-)\n-\n-# Internlm-chat template\n-register_conv_template(\n-    Conversation(\n-        name=\"internlm-chat\",\n-        system_message=\"A chat between a curious <|User|> and an <|Bot|>. The <|Bot|> gives helpful, detailed, and polite answers to the <|User|>'s questions.\\n\\n\",\n-        roles=(\"<|User|>\", \"<|Bot|>\"),\n-        sep_style=SeparatorStyle.CHATINTERN,\n-        sep=\"<eoh>\",\n-        sep2=\"<eoa>\",\n-        stop_token_ids=[1, 103028],\n-        stop_str=\"<|User|>\",\n-    )\n-)\n-\n-# StarChat template\n-# reference: https://huggingface.co/spaces/HuggingFaceH4/starchat-playground/blob/main/dialogues.py\n-register_conv_template(\n-    Conversation(\n-        name=\"starchat\",\n-        system_template=\"<system>\\n{system_message}\",\n-        roles=(\"<|user|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|end|>\",\n-        stop_token_ids=[0, 49155],\n-        stop_str=\"<|end|>\",\n-    )\n-)\n-\n-# Baichuan-13B-Chat template\n-register_conv_template(\n-    # source: https://huggingface.co/baichuan-inc/Baichuan-13B-Chat/blob/19ef51ba5bad8935b03acd20ff04a269210983bc/modeling_baichuan.py#L555\n-    # https://huggingface.co/baichuan-inc/Baichuan-13B-Chat/blob/main/generation_config.json\n-    # https://github.com/baichuan-inc/Baichuan-13B/issues/25\n-    Conversation(\n-        name=\"baichuan-chat\",\n-        roles=(\"<reserved_102>\", \"<reserved_103>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-        stop_token_ids=[],\n-    )\n-)\n-\n-# Baichuan2-13B-Chat template\n-register_conv_template(\n-    # source: https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat/blob/c6f8592a60b4ad73c210b28dd2ab3cca51abbf93/modeling_baichuan.py#L773\n-    # https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat/blob/main/generation_config.json\n-    # https://github.com/baichuan-inc/Baichuan2/issues/62\n-    Conversation(\n-        name=\"baichuan2-chat\",\n-        roles=(\"<reserved_106>\", \"<reserved_107>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-        stop_token_ids=[],\n-    )\n-)\n-\n-# Mistral template\n-# source: https://docs.mistral.ai/llm/mistral-instruct-v0.1#chat-template\n-register_conv_template(\n-    Conversation(\n-        name=\"mistral\",\n-        system_template=\"[INST]{system_message}\\n\",\n-        roles=(\"[INST]\", \"[/INST]\"),\n-        sep_style=SeparatorStyle.LLAMA2,\n-        sep=\" \",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# llama2 template\n-# reference: https://huggingface.co/blog/codellama#conversational-instructions\n-# reference: https://github.com/facebookresearch/llama/blob/1a240688810f8036049e8da36b073f63d2ac552c/llama/generation.py#L212\n-register_conv_template(\n-    Conversation(\n-        name=\"llama-2\",\n-        system_template=\"[INST] <<SYS>>\\n{system_message}\\n<</SYS>>\\n\\n\",\n-        roles=(\"[INST]\", \"[/INST]\"),\n-        sep_style=SeparatorStyle.LLAMA2,\n-        sep=\" \",\n-        sep2=\" </s><s>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"cutegpt\",\n-        roles=(\"\u95ee\uff1a\", \"\u7b54\uff1a\\n\"),\n-        sep_style=SeparatorStyle.NO_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"\\n\",\n-        stop_str=\"<end>\",\n-    )\n-)\n-\n-# OpenOrcaxOpenChat-Preview2-13B template\n-register_conv_template(\n-    Conversation(\n-        name=\"open-orca\",\n-        system_template=\"{system_message}\",\n-        system_message=\"You are a helpful assistant. Please answer truthfully and write out your \"\n-                       \"thinking step by step to be sure you get the right answer. If you make a mistake or encounter \"\n-                       \"an error in your thinking, say so out loud and attempt to correct it. If you don't know or \"\n-                       \"aren't sure about something, say so clearly. You will act as a professional logician, mathematician, \"\n-                       \"and physicist. You will also act as the most appropriate type of expert to answer any particular \"\n-                       \"question or solve the relevant problem; state which expert type your are, if so. Also think of \"\n-                       \"any particular named expert that would be ideal to answer the relevant question or solve the \"\n-                       \"relevant problem; name and act as them, if appropriate.\",\n-        roles=(\"User\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SPACE_SINGLE,\n-        sep=\"<|end_of_turn|>\\n\",\n-        stop_token_ids=[32000, 32001],  # \"<|end_of_turn|>\"\n-        stop_str=\"User\",\n-    )\n-)\n-\n-# Open-Orca/Mistral-7B-OpenOrca template\n-# source: https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca\n-# reference: https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca#prompt-template\n-register_conv_template(\n-    Conversation(\n-        name=\"mistral-7b-openorca\",\n-        system_template=\"<|im_start|>system\\n{system_message}\",\n-        system_message=\"You are MistralOrca, a large language model trained by Alignment Lab AI. Write out your reasoning step-by-step to be sure you get the right answers!\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[32000, 32001],\n-    )\n-)\n-\n-# Qwen-chat default template\n-# source: https://huggingface.co/Qwen/Qwen-7B-Chat/blob/main/qwen_generation_utils.py#L130\n-register_conv_template(\n-    Conversation(\n-        name=\"qwen-7b-chat\",\n-        system_template=\"<|im_start|>system\\n{system_message}\",\n-        system_message=\"You are a helpful assistant.\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[\n-            151643,\n-            151644,\n-            151645,\n-        ],  # \"<|endoftext|>\", \"<|im_start|>\", \"<|im_end|>\"\n-        stop_str=\"<|endoftext|>\",\n-    )\n-)\n-\n-\n-# AquilaChat default template\n-# source: https://github.com/FlagAI-Open/FlagAI/blob/master/examples/Aquila/Aquila-chat/cyg_conversation.py\n-register_conv_template(\n-    Conversation(\n-        name=\"aquila-chat\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"###\",\n-        sep2=\"\",\n-        stop_str=[\"###\", \"</s>\", \"[UNK]\"],\n-    )\n-)\n-# AquilaChat2-34B default template\n-# source: https://huggingface.co/BAAI/AquilaChat2-34B/blob/4608b75855334b93329a771aee03869dbf7d88cc/predict.py#L212\n-register_conv_template(\n-    Conversation(\n-        name=\"aquila-legacy\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n-        roles=(\"### Human: \", \"### Assistant: \"),\n-        offset=0,\n-        sep_style=SeparatorStyle.NO_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"</s>\",\n-        stop_str=[\"</s>\", \"[UNK]\"],\n-    )\n-)\n-# AquilaChat2-7B-16K and AquilaChat2-34B-16K default template\n-# source: https://huggingface.co/BAAI/AquilaChat2-34B/blob/4608b75855334b93329a771aee03869dbf7d88cc/predict.py#L227\n-register_conv_template(\n-    Conversation(\n-        name=\"aquila\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"Human\", \"Assistant\"),\n-        offset=0,\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"###\",\n-        sep2=\"</s>\",\n-        stop_str=[\"</s>\", \"[UNK]\"],\n-    )\n-)\n-\n-# AquilaChat2-7B default template\n-# source: https://huggingface.co/BAAI/AquilaChat2-34B/blob/4608b75855334b93329a771aee03869dbf7d88cc/predict.py#L242\n-register_conv_template(\n-    Conversation(\n-        name=\"aquila-v1\",\n-        roles=(\"<|startofpiece|>\", \"<|endofpiece|>\"),\n-        offset=0,\n-        sep_style=SeparatorStyle.NO_COLON_TWO,\n-        sep=\"\",\n-        sep2=\"</s>\",\n-        stop_str=[\"</s>\", \"<|endoftext|>\"],\n-    )\n-)\n-\n-# Llama2-Chinese default template\n-# source: https://huggingface.co/FlagAlpha\n-register_conv_template(\n-    Conversation(\n-        name=\"llama2-chinese\",\n-        system_template=\"<s>{system_message}</s>\",\n-        roles=(\"Human\", \"Assistant\", \"System\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"\\n</s><s>\",\n-        stop_str=\"</s>\",\n-    )\n-)\n-\n-# Vigogne Instruct default template\n-# source: https://github.com/bofenghuang/vigogne\n-register_conv_template(\n-    Conversation(\n-        name=\"vigogne_instruct\",\n-        system_template=\"### System:\\n{system_message}\\n\\n\",\n-        system_message=(\n-            \"Ci-dessous se trouve une instruction qui d\u00e9crit une t\u00e2che \u00e0 accomplir. R\u00e9digez une r\u00e9ponse qui r\u00e9pond de mani\u00e8re\"\n-            \" pr\u00e9cise \u00e0 la demande.\"\n-        ),\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.DOLLY,\n-        sep=\"\\n\\n\",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# Vigogne Chat default template\n-register_conv_template(\n-    Conversation(\n-        name=\"vigogne_chat_v2\",\n-        system_template=\"<|system|>: {system_message}\",\n-        system_message=(\n-            \"Vous \u00eates Vigogne, un assistant IA cr\u00e9\u00e9 par Zaion Lab. Vous suivez extr\u00eamement bien les instructions. Aidez\"\n-            \" autant que vous le pouvez.\"\n-        ),\n-        roles=(\"<|user|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"</s>\\n\",\n-        stop_str=\"<|user|>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"vigogne_chat_v3\",\n-        system_template=\"[INST] <<SYS>>\\n{system_message}\\n<</SYS>>\\n\\n\",\n-        system_message=(\n-            \"Vous \u00eates Vigogne, un assistant IA cr\u00e9\u00e9 par Zaion Lab. Vous suivez extr\u00eamement bien les instructions. Aidez\"\n-            \" autant que vous le pouvez.\"\n-        ),\n-        roles=(\"[INST]\", \"[/INST]\"),\n-        sep_style=SeparatorStyle.LLAMA2,\n-        sep=\" \",\n-        sep2=\" </s>\",\n-    )\n-)\n-\n-# Falcon 180B chat template\n-# source: https://huggingface.co/spaces/tiiuae/falcon-180b-demo/blob/d1590ee7fae9b6ce331ba7808e61a29dcce9239f/app.py#L28-L37\n-register_conv_template(\n-    Conversation(\n-        name=\"falcon-chat\",\n-        roles=(\"User\", \"Falcon\"),\n-        system_template=\"System: {system_message}\",\n-        messages=[],\n-        sep_style=SeparatorStyle.FALCON_CHAT,\n-        sep=\"\\n\",\n-        sep2=\"<|endoftext|>\",\n-        stop_str=\"\\nUser:\",  # use stop_str to stop generation after stop_token_ids, it will also remove stop_str from the generated text\n-    )\n-)\n-\n-# Phind template\n-# source: https://huggingface.co/Phind/Phind-CodeLlama-34B-v2\n-register_conv_template(\n-    Conversation(\n-        name=\"phind\",\n-        system_message=\"### System Prompt\\nYou are an intelligent programming assistant.\",\n-        roles=(\"### User Message\", \"### Assistant\"),\n-        messages=(),\n-        offset=0,\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\\n\",\n-    )\n-)\n-\n-# Metharme formatting for Pygmalion models\n-# source: https://huggingface.co/PygmalionAI/pygmalion-2-13b\n-register_conv_template(\n-    Conversation(\n-        name=\"metharme\",\n-        system_template=\"<|system|>{system_message}\",\n-        system_message=\"\"\"Enter RP mode. You shall reply to the user while staying \n-        in character. Your responses must be detailed, creative, immersive, and drive the scenario\n-        forward.\"\"\",\n-        roles=(\"<|user|>\", \"<|model|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-        stop_str=\"<|user|>\",\n-    )\n-)\n-\n-# Zephyr template\n-# reference: https://huggingface.co/spaces/HuggingFaceH4/zephyr-playground/blob/main/dialogues.py\n-register_conv_template(\n-    Conversation(\n-        name=\"zephyr\",\n-        system_template=\"<|system|>\\n{system_message}\",\n-        roles=(\"<|user|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"</s>\",\n-        stop_token_ids=[2],\n-        stop_str=\"</s>\",\n-    )\n-)\n-\n-\n-if __name__ == \"__main__\":\n-    print(\"-- Vicuna template --\")\n-    conv = get_conv_template(\"vicuna_v1.1\")\n-    conv.append_message(conv.roles[0], \"Hello!\")\n-    conv.append_message(conv.roles[1], \"Hi!\")\n-    conv.append_message(conv.roles[0], \"How are you?\")\n-    conv.append_message(conv.roles[1], None)\n-    print(conv.get_prompt())\n-\n-    print(\"\\n\")\n-\n-    print(\"-- Llama-2 template --\")\n-    conv = get_conv_template(\"llama-2\")\n-    conv.set_system_message(\"You are a helpful, respectful and honest assistant.\")\n-    conv.append_message(conv.roles[0], \"Hello!\")\n-    conv.append_message(conv.roles[1], \"Hi!\")\n-    conv.append_message(conv.roles[0], \"How are you?\")\n-    conv.append_message(conv.roles[1], None)\n-    print(conv.get_prompt())\n-\n-    print(\"\\n\")\n-\n-    print(\"-- ChatGPT template --\")\n-    conv = get_conv_template(\"chatgpt\")\n-    conv.append_message(conv.roles[0], \"Hello!\")\n-    conv.append_message(conv.roles[1], \"Hi!\")\n-    conv.append_message(conv.roles[0], \"How are you?\")\n-    conv.append_message(conv.roles[1], None)\n-    print(conv.to_openai_api_messages())\n-\n-    print(\"\\n\")\n-\n-    print(\"-- Claude template --\")\n-    conv = get_conv_template(\"claude\")\n-    conv.append_message(conv.roles[0], \"Hello!\")\n-    conv.append_message(conv.roles[1], \"Hi!\")\n-    conv.append_message(conv.roles[0], \"How are you?\")\n-    conv.append_message(conv.roles[1], None)\n-    print(conv.get_prompt())\n\\ No newline at end of file\n",
  "path": "gllava/utils_conv/conv_template.py",
  "printDiff": "@@ -1,1185 +0,0 @@\n-\"\"\"\n-Conversation prompt templates.\n-\n-We kindly request that you import fastchat instead of copying this file if you wish to use it.\n-If you have any changes in mind, please contribute back so the community can benefit collectively and continue to maintain these valuable templates.\n-\"\"\"\n-\n-import dataclasses\n-from enum import auto, IntEnum\n-from typing import List, Any, Dict, Union, Tuple\n-\n-\n-class SeparatorStyle(IntEnum):\n-    \"\"\"Separator styles.\"\"\"\n-\n-    ADD_COLON_SINGLE = auto()\n-    ADD_COLON_TWO = auto()\n-    ADD_COLON_SPACE_SINGLE = auto()\n-    NO_COLON_SINGLE = auto()\n-    NO_COLON_TWO = auto()\n-    ADD_NEW_LINE_SINGLE = auto()\n-    LLAMA2 = auto()\n-    CHATGLM = auto()\n-    CHATML = auto()\n-    CHATINTERN = auto()\n-    DOLLY = auto()\n-    RWKV = auto()\n-    PHOENIX = auto()\n-    ROBIN = auto()\n-    FALCON_CHAT = auto()\n-\n-\n-@dataclasses.dataclass\n-class Conversation:\n-    \"\"\"A class that manages prompt templates and keeps all conversation history.\"\"\"\n-\n-    # The name of this template\n-    name: str\n-    # The template of the system prompt\n-    system_template: str = \"{system_message}\"\n-    # The system message\n-    system_message: str = \"\"\n-    # The names of two roles\n-    roles: Tuple[str] = (\"USER\", \"ASSISTANT\")\n-    # All messages. Each item is (role, message).\n-    messages: List[List[str]] = ()\n-    # The number of few shot examples\n-    offset: int = 0\n-    # The separator style and configurations\n-    sep_style: SeparatorStyle = SeparatorStyle.ADD_COLON_SINGLE\n-    sep: str = \"\\n\"\n-    sep2: str = None\n-    # Stop criteria (the default one is EOS token)\n-    stop_str: Union[str, List[str]] = None\n-    # Stops generation if meeting any token in this list\n-    stop_token_ids: List[int] = None\n-\n-    def get_prompt(self) -> str:\n-        \"\"\"Get the prompt for generation.\"\"\"\n-        system_prompt = self.system_template.format(system_message=self.system_message)\n-        if self.sep_style == SeparatorStyle.ADD_COLON_SINGLE:\n-            ret = system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \": \" + message + self.sep\n-                else:\n-                    ret += role + \":\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.ADD_COLON_TWO:\n-            seps = [self.sep, self.sep2]\n-            ret = system_prompt + seps[0]\n-            for i, (role, message) in enumerate(self.messages):\n-                if message:\n-                    ret += role + \": \" + message + seps[i % 2]\n-                else:\n-                    ret += role + \":\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.ADD_COLON_SPACE_SINGLE:\n-            ret = system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \": \" + message + self.sep\n-                else:\n-                    ret += role + \": \"  # must be end with a space\n-            return ret\n-        elif self.sep_style == SeparatorStyle.ADD_NEW_LINE_SINGLE:\n-            ret = \"\" if system_prompt == \"\" else system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \"\\n\" + message + self.sep\n-                else:\n-                    ret += role + \"\\n\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.NO_COLON_SINGLE:\n-            ret = system_prompt\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + message + self.sep\n-                else:\n-                    ret += role\n-            return ret\n-        elif self.sep_style == SeparatorStyle.NO_COLON_TWO:\n-            seps = [self.sep, self.sep2]\n-            ret = system_prompt\n-            for i, (role, message) in enumerate(self.messages):\n-                if message:\n-                    ret += role + message + seps[i % 2]\n-                else:\n-                    ret += role\n-            return ret\n-        elif self.sep_style == SeparatorStyle.RWKV:\n-            ret = system_prompt\n-            for i, (role, message) in enumerate(self.messages):\n-                if message:\n-                    ret += (\n-                            role\n-                            + \": \"\n-                            + message.replace(\"\\r\\n\", \"\\n\").replace(\"\\n\\n\", \"\\n\")\n-                    )\n-                    ret += \"\\n\\n\"\n-                else:\n-                    ret += role + \":\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.LLAMA2:\n-            seps = [self.sep, self.sep2]\n-            if self.system_message:\n-                ret = system_prompt\n-            else:\n-                ret = \"[INST] \"\n-            for i, (role, message) in enumerate(self.messages):\n-                tag = self.roles[i % 2]\n-                if message:\n-                    if i == 0:\n-                        ret += message + \" \"\n-                    else:\n-                        ret += tag + \" \" + message + seps[i % 2]\n-                else:\n-                    ret += tag\n-            return ret\n-        elif self.sep_style == SeparatorStyle.CHATGLM:\n-            # source: https://huggingface.co/THUDM/chatglm-6b/blob/\u001b[93m1d240ba371910e9282298d4592532d7f0f3e9f3e\u001b[0m/modeling_chatglm.py#L1302-L1308\n-            # source2: https://huggingface.co/THUDM/chatglm2-6b/blob/\u001b[93me186c891cf64310ac66ef10a87e6635fa6c2a579\u001b[0m/modeling_chatglm.py#L926\n-            round_add_n = 1 if self.name == \"chatglm2\" else 0\n-            if system_prompt:\n-                ret = system_prompt + self.sep\n-            else:\n-                ret = \"\"\n-\n-            for i, (role, message) in enumerate(self.messages):\n-                if i % 2 == 0:\n-                    ret += f\"[Round {i//2 + round_add_n}]{self.sep}\"\n-\n-                if message:\n-                    ret += f\"{role}\uff1a{message}{self.sep}\"\n-                else:\n-                    ret += f\"{role}\uff1a\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.CHATML:\n-            ret = \"\" if system_prompt == \"\" else system_prompt + self.sep + \"\\n\"\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \"\\n\" + message + self.sep + \"\\n\"\n-                else:\n-                    ret += role + \"\\n\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.CHATINTERN:\n-            # source: https://huggingface.co/internlm/internlm-chat-7b-8k/blob/\u001b[93mbd546fa984b4b0b86958f56bf37f94aa75ab8831\u001b[0m/modeling_internlm.py#L771\n-            seps = [self.sep, self.sep2]\n-            ret = system_prompt\n-            for i, (role, message) in enumerate(self.messages):\n-                if i % 2 == 0:\n-                    ret += \"<s>\"\n-                if message:\n-                    ret += role + \":\" + message + seps[i % 2] + \"\\n\"\n-                else:\n-                    ret += role + \":\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.DOLLY:\n-            seps = [self.sep, self.sep2]\n-            ret = system_prompt\n-            for i, (role, message) in enumerate(self.messages):\n-                if message:\n-                    ret += role + \":\\n\" + message + seps[i % 2]\n-                    if i % 2 == 1:\n-                        ret += \"\\n\\n\"\n-                else:\n-                    ret += role + \":\\n\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.PHOENIX:\n-            ret = system_prompt\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \": \" + \"<s>\" + message + \"</s>\"\n-                else:\n-                    ret += role + \": \" + \"<s>\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.ROBIN:\n-            ret = system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \":\\n\" + message + self.sep\n-                else:\n-                    ret += role + \":\\n\"\n-            return ret\n-        elif self.sep_style == SeparatorStyle.FALCON_CHAT:\n-            ret = \"\"\n-            if self.system_message:\n-                ret += system_prompt + self.sep\n-            for role, message in self.messages:\n-                if message:\n-                    ret += role + \": \" + message + self.sep\n-                else:\n-                    ret += role + \":\"\n-\n-            return ret\n-        else:\n-            raise ValueError(f\"Invalid style: {self.sep_style}\")\n-\n-    def set_system_message(self, system_message: str):\n-        \"\"\"Set the system message.\"\"\"\n-        self.system_message = system_message\n-\n-    def append_message(self, role: str, message: str):\n-        \"\"\"Append a new message.\"\"\"\n-        self.messages.append([role, message])\n-\n-    def update_last_message(self, message: str):\n-        \"\"\"Update the last output.\n-\n-        The last message is typically set to be None when constructing the prompt,\n-        so we need to update it in-place after getting the response from a model.\n-        \"\"\"\n-        self.messages[-1][1] = message\n-\n-    def to_gradio_chatbot(self):\n-        \"\"\"Convert the conversation to gradio chatbot format.\"\"\"\n-        ret = []\n-        for i, (role, msg) in enumerate(self.messages[self.offset :]):\n-            if i % 2 == 0:\n-                ret.append([msg, None])\n-            else:\n-                ret[-1][-1] = msg\n-        return ret\n-\n-    def to_openai_api_messages(self):\n-        \"\"\"Convert the conversation to OpenAI chat completion format.\"\"\"\n-        ret = [{\"role\": \"system\", \"content\": self.system_message}]\n-\n-        for i, (_, msg) in enumerate(self.messages[self.offset :]):\n-            if i % 2 == 0:\n-                ret.append({\"role\": \"user\", \"content\": msg})\n-            else:\n-                if msg is not None:\n-                    ret.append({\"role\": \"assistant\", \"content\": msg})\n-        return ret\n-\n-    def copy(self):\n-        return Conversation(\n-            name=self.name,\n-            system_template=self.system_template,\n-            system_message=self.system_message,\n-            roles=self.roles,\n-            messages=[[x, y] for x, y in self.messages],\n-            offset=self.offset,\n-            sep_style=self.sep_style,\n-            sep=self.sep,\n-            sep2=self.sep2,\n-            stop_str=self.stop_str,\n-            stop_token_ids=self.stop_token_ids,\n-        )\n-\n-    def dict(self):\n-        return {\n-            \"template_name\": self.name,\n-            \"system_message\": self.system_message,\n-            \"roles\": self.roles,\n-            \"messages\": self.messages,\n-            \"offset\": self.offset,\n-        }\n-\n-\n-# A global registry for all conversation templates\n-conv_templates: Dict[str, Conversation] = {}\n-\n-\n-def register_conv_template(template: Conversation, override: bool = False):\n-    \"\"\"Register a new conversation template.\"\"\"\n-    if not override:\n-        assert (\n-                template.name not in conv_templates\n-        ), f\"{template.name} has been registered.\"\n-\n-    conv_templates[template.name] = template\n-\n-\n-def get_conv_template(name: str) -> Conversation:\n-    \"\"\"Get a conversation template.\"\"\"\n-    return conv_templates[name].copy()\n-\n-\n-# An empty template for raw conversation.\n-register_conv_template(\n-    Conversation(\n-        name=\"raw\",\n-        system_message=\"\",\n-        roles=(\"\", \"\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-    )\n-)\n-\n-# A template with a one-shot conversation example\n-register_conv_template(\n-    Conversation(\n-        name=\"one_shot\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"Human\", \"Assistant\"),\n-        messages=(\n-            (\n-                \"Human\",\n-                \"Got any creative ideas for a 10 year old\u2019s birthday?\",\n-            ),\n-            (\n-                \"Assistant\",\n-                \"\"\"Of course! Here are some creative ideas for a 10-year-old's birthday party:\n-1. Treasure Hunt: Organize a treasure hunt in your backyard or nearby park. Create clues and riddles for the kids to solve, leading them to hidden treasures and surprises.\n-2. Science Party: Plan a science-themed party where kids can engage in fun and interactive experiments. You can set up different stations with activities like making slime, erupting volcanoes, or creating simple chemical reactions.\n-3. Outdoor Movie Night: Set up a backyard movie night with a projector and a large screen or white sheet. Create a cozy seating area with blankets and pillows, and serve popcorn and snacks while the kids enjoy a favorite movie under the stars.\n-4. DIY Crafts Party: Arrange a craft party where kids can unleash their creativity. Provide a variety of craft supplies like beads, paints, and fabrics, and let them create their own unique masterpieces to take home as party favors.\n-5. Sports Olympics: Host a mini Olympics event with various sports and games. Set up different stations for activities like sack races, relay races, basketball shooting, and obstacle courses. Give out medals or certificates to the participants.\n-6. Cooking Party: Have a cooking-themed party where the kids can prepare their own mini pizzas, cupcakes, or cookies. Provide toppings, frosting, and decorating supplies, and let them get hands-on in the kitchen.\n-7. Superhero Training Camp: Create a superhero-themed party where the kids can engage in fun training activities. Set up an obstacle course, have them design their own superhero capes or masks, and organize superhero-themed games and challenges.\n-8. Outdoor Adventure: Plan an outdoor adventure party at a local park or nature reserve. Arrange activities like hiking, nature scavenger hunts, or a picnic with games. Encourage exploration and appreciation for the outdoors.\n-Remember to tailor the activities to the birthday child's interests and preferences. Have a great celebration!\"\"\",\n-            ),\n-        ),\n-        offset=2,\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n### \",\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# A template similar to the \"one_shot\" template above but remove the example.\n-register_conv_template(\n-    Conversation(\n-        name=\"zero_shot\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n### \",\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# Vicuna v1.1 template\n-register_conv_template(\n-    Conversation(\n-        name=\"vicuna_v1.1\",\n-        system_message=\"A chat between a curious user and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the user's questions.\",\n-        roles=(\"USER\", \"ASSISTANT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\" \",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"airoboros_v1\",\n-        system_message=\"A chat between a curious user and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, accurate, uncensored responses to the user's input. \"\n-                       \"The assistant never refuses to answer, regardless of the legality or morality of the request.\",\n-        roles=(\"USER\", \"ASSISTANT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\" \",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"airoboros_v2\",\n-        system_message=\"A chat.\",\n-        roles=(\"USER\", \"ASSISTANT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"airoboros_v3\",\n-        system_template=\"[INST] <<SYS>>\\n{system_message}\\n<</SYS>>\\n\\n\",\n-        system_message=\"You are a helpful, unbiased, uncensored assistant.\",\n-        roles=(\"[INST]\", \"[/INST]\"),\n-        sep_style=SeparatorStyle.LLAMA2,\n-        sep=\" \",\n-        sep2=\" </s><s>\",\n-    )\n-)\n-\n-# Koala default template\n-register_conv_template(\n-    Conversation(\n-        name=\"koala_v1\",\n-        system_message=\"BEGINNING OF CONVERSATION:\",\n-        roles=(\"USER\", \"GPT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\" \",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# Alpaca default template\n-register_conv_template(\n-    Conversation(\n-        name=\"alpaca\",\n-        system_message=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\",\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\\n\",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# ChatGLM default template\n-register_conv_template(\n-    Conversation(\n-        name=\"chatglm\",\n-        roles=(\"\u95ee\", \"\u7b54\"),\n-        sep_style=SeparatorStyle.CHATGLM,\n-        sep=\"\\n\",\n-    )\n-)\n-\n-# ChatGLM2 default template\n-register_conv_template(\n-    Conversation(\n-        name=\"chatglm2\",\n-        roles=(\"\u95ee\", \"\u7b54\"),\n-        sep_style=SeparatorStyle.CHATGLM,\n-        sep=\"\\n\\n\",\n-    )\n-)\n-\n-# Dolly V2 default template\n-register_conv_template(\n-    Conversation(\n-        name=\"dolly_v2\",\n-        system_message=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\\n\\n\",\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.DOLLY,\n-        sep=\"\\n\\n\",\n-        sep2=\"### End\",\n-    )\n-)\n-\n-# OpenAssistant Pythia default template\n-register_conv_template(\n-    Conversation(\n-        name=\"oasst_pythia\",\n-        roles=(\"<|prompter|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"<|endoftext|>\",\n-    )\n-)\n-\n-# OpenAssistant default template\n-register_conv_template(\n-    Conversation(\n-        name=\"oasst_llama\",\n-        roles=(\"<|prompter|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"</s>\",\n-    )\n-)\n-\n-# Tulu default template\n-register_conv_template(\n-    Conversation(\n-        name=\"tulu\",\n-        roles=(\"<|user|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.ADD_NEW_LINE_SINGLE,\n-        sep=\"\\n\",\n-    )\n-)\n-\n-# StableLM Alpha default template\n-register_conv_template(\n-    Conversation(\n-        name=\"stablelm\",\n-        system_template=\"<|SYSTEM|>{system_message}\",\n-        system_message=\"\"\"# StableLM Tuned (Alpha version)\n-- StableLM is a helpful and harmless open-source AI language model developed by StabilityAI.\n-- StableLM is excited to be able to help the user, but will refuse to do anything that could be considered harmful to the user.\n-- StableLM is more than just an information source, StableLM is also able to write poetry, short stories, and make jokes.\n-- StableLM will refuse to participate in anything that could harm a human.\n-\"\"\",\n-        roles=(\"<|USER|>\", \"<|ASSISTANT|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-        stop_token_ids=[50278, 50279, 50277, 1, 0],\n-    )\n-)\n-\n-# Baize default template\n-register_conv_template(\n-    Conversation(\n-        name=\"baize\",\n-        system_message=\"The following is a conversation between a human and an AI assistant named Baize (named after a mythical creature in Chinese folklore). Baize is an open-source AI assistant developed by UCSD and Sun Yat-Sen University. The human and the AI assistant take turns chatting. Human statements start with [|Human|] and AI assistant statements start with [|AI|]. The AI assistant always provides responses in as much detail as possible, and in Markdown format. The AI assistant always declines to engage with topics, questions and instructions related to unethical, controversial, or sensitive issues. Complete the transcript in exactly that format.\\n\",\n-        roles=(\"[|Human|]\", \"[|AI|]\"),\n-        messages=(\n-            (\"[|Human|]\", \"Hello!\"),\n-            (\"[|AI|]\", \"Hi!\"),\n-        ),\n-        offset=2,\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\\n\",\n-        stop_str=\"[|Human|]\",\n-    )\n-)\n-\n-# RWKV-4-Raven default template\n-register_conv_template(\n-    Conversation(\n-        name=\"rwkv\",\n-        roles=(\"Bob\", \"Alice\"),\n-        messages=(\n-            (\"Bob\", \"hi\"),\n-            (\n-                \"Alice\",\n-                \"Hi. I am your assistant and I will provide expert full response in full details. Please feel free to ask any question and I will always answer it.\",\n-            ),\n-        ),\n-        offset=2,\n-        sep_style=SeparatorStyle.RWKV,\n-        sep=\"\",\n-        stop_str=\"\\n\\n\",\n-    )\n-)\n-\n-# Buddy default template\n-register_conv_template(\n-    Conversation(\n-        name=\"openbuddy\",\n-        system_message=\"\"\"Consider a conversation between User (a human) and Assistant (named Buddy).\n-Buddy is an INTP-T, a friendly, intelligent and multilingual AI assistant, by OpenBuddy team. GitHub: https://github.com/OpenBuddy/OpenBuddy\n-Buddy cannot access the Internet.\n-Buddy can fluently speak the user's language (e.g. English, Chinese).\n-Buddy can generate poems, stories, code, essays, songs, parodies, and more.\n-Buddy possesses vast knowledge about the world, history, and culture.\n-Buddy's responses are always safe, creative, high-quality, human-like, and interesting.\n-Buddy strictly refuses to discuss political, NSFW, or other unsafe topics.\n-\n-User: Hi.\n-Assistant: Hi, I'm Buddy, your AI assistant. How can I help you today?\"\"\",\n-        roles=(\"User\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-    )\n-)\n-\n-# Phoenix default template\n-register_conv_template(\n-    Conversation(\n-        name=\"phoenix\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.PHOENIX,\n-        sep=\"</s>\",\n-    )\n-)\n-\n-# ReaLM default template\n-register_conv_template(\n-    Conversation(\n-        name=\"ReaLM-7b-v1\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.PHOENIX,\n-        sep=\"</s>\",\n-    )\n-)\n-\n-# ChatGPT default template\n-register_conv_template(\n-    Conversation(\n-        name=\"chatgpt\",\n-        system_message=\"You are a helpful assistant.\",\n-        roles=(\"user\", \"assistant\"),\n-        sep_style=None,\n-        sep=None,\n-    )\n-)\n-\n-# Claude default template\n-register_conv_template(\n-    Conversation(\n-        name=\"claude\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\\n\",\n-    )\n-)\n-\n-# MPT default template\n-register_conv_template(\n-    Conversation(\n-        name=\"mpt-7b-chat\",\n-        system_template=\"\"\"<|im_start|>system\n-{system_message}\"\"\",\n-        system_message=\"\"\"- You are a helpful assistant chatbot trained by MosaicML.\n-- You answer questions.\n-- You are excited to be able to help the user, but will refuse to do anything that could be considered harmful to the user.\n-- You are more than just an information source, you are also able to write poetry, short stories, and make jokes.\"\"\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[50278, 0],\n-    )\n-)\n-\n-# MPT-30b-chat default template\n-register_conv_template(\n-    Conversation(\n-        name=\"mpt-30b-chat\",\n-        system_template=\"\"\"<|im_start|>system\n-{system_message}\"\"\",\n-        system_message=\"\"\"A conversation between a user and an LLM-based AI assistant. The assistant gives helpful and honest answers.\"\"\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[50278, 0],\n-    )\n-)\n-\n-# Lemur-70b-chat default template\n-# reference: https://huggingface.co/OpenLemur/lemur-70b-chat-v1#generation\n-register_conv_template(\n-    Conversation(\n-        name=\"lemur-70b-chat\",\n-        system_template=\"\"\"<|im_start|>system\n-{system_message}\"\"\",\n-        system_message=\"\"\"You are a helpful, respectful, and honest assistant.\"\"\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[32002, 0],\n-    )\n-)\n-\n-# MPT-30b-instruct default template\n-# reference: https://huggingface.co/mosaicml/mpt-30b-instruct#formatting\n-register_conv_template(\n-    Conversation(\n-        name=\"mpt-30b-instruct\",\n-        system_template=\"{system_message}\",\n-        system_message=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\",\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.ADD_NEW_LINE_SINGLE,\n-        sep=\"\\n\\n\",\n-        stop_token_ids=[50278, 0],\n-    )\n-)\n-\n-# Bard default template\n-# Reference: https://github.com/google/generative-ai-python/blob/\u001b[93m\u001b[93m9c99bcb474a991a97a2e7d62fcdb52db7ce40729\u001b[0m\u001b[0m/google/generativeai/discuss.py#L150\n-#            https://github.com/google/generative-ai-python/blob/\u001b[93m\u001b[93m9c99bcb474a991a97a2e7d62fcdb52db7ce40729\u001b[0m\u001b[0m/google/generativeai/discuss.py#L40\n-register_conv_template(\n-    Conversation(\n-        name=\"bard\",\n-        roles=(\"0\", \"1\"),\n-        sep_style=None,\n-        sep=None,\n-    )\n-)\n-\n-# BiLLa default template\n-register_conv_template(\n-    Conversation(\n-        name=\"billa\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SPACE_SINGLE,\n-        sep=\"\\n\",\n-        stop_str=\"Human:\",\n-    )\n-)\n-\n-# RedPajama INCITE default template\n-register_conv_template(\n-    Conversation(\n-        name=\"redpajama-incite\",\n-        roles=(\"<human>\", \"<bot>\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-        stop_str=\"<human>\",\n-    )\n-)\n-\n-# h2oGPT default template\n-register_conv_template(\n-    Conversation(\n-        name=\"h2ogpt\",\n-        roles=(\"<|prompt|>\", \"<|answer|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"</s>\",\n-    )\n-)\n-\n-# Robin default template\n-register_conv_template(\n-    Conversation(\n-        name=\"Robin\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"###Human\", \"###Assistant\"),\n-        sep_style=SeparatorStyle.ROBIN,\n-        sep=\"\\n\",\n-        stop_token_ids=[2, 396],\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# Snoozy default template\n-# Reference: https://github.com/nomic-ai/gpt4all/blob/\u001b[93md4861030b778da6db59d21d2927a4aba4f9f1f43\u001b[0m/gpt4all-bindings/python/gpt4all/gpt4all.py#L232\n-register_conv_template(\n-    Conversation(\n-        name=\"snoozy\",\n-        system_template=\"### Instruction:\\n{system_message}\",\n-        system_message=\"The prompt below is a question to answer, a task to complete, or a conversation to respond to; decide which and write an appropriate response.\",\n-        roles=(\"### Prompt\", \"### Response\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# manticore default template\n-register_conv_template(\n-    Conversation(\n-        name=\"manticore\",\n-        roles=(\"USER\", \"ASSISTANT\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# Falcon default template\n-register_conv_template(\n-    Conversation(\n-        name=\"falcon\",\n-        roles=(\"User\", \"Assistant\"),\n-        messages=[],\n-        sep_style=SeparatorStyle.RWKV,\n-        sep=\"\\n\",\n-        sep2=\"<|endoftext|>\",\n-        stop_str=\"\\nUser\",  # use stop_str to stop generation after stop_token_ids, it will also remove stop_str from the generated text\n-        stop_token_ids=[\n-            0,\n-            1,\n-            2,\n-            3,\n-            4,\n-            5,\n-            6,\n-            7,\n-            8,\n-            9,\n-            10,\n-            11,\n-        ],  # it better only put special tokens here, because tokenizer only remove special tokens\n-    )\n-)\n-\n-# ChangGPT default template\n-register_conv_template(\n-    Conversation(\n-        name=\"polyglot_changgpt\",\n-        roles=(\"B\", \"A\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-    )\n-)\n-\n-# tigerbot template\n-register_conv_template(\n-    Conversation(\n-        name=\"tigerbot\",\n-        system_message=\"A chat between a curious user and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the user's questions.\",\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.ROBIN,\n-        sep=\"\\n\\n\",\n-        stop_str=\"###\",\n-    )\n-)\n-\n-# ref: https://huggingface.co/Salesforce/xgen-7b-8k-inst\n-register_conv_template(\n-    Conversation(\n-        name=\"xgen\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n-        roles=(\"### Human\", \"### Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\",\n-        stop_token_ids=[50256],\n-    )\n-)\n-\n-# Internlm-chat template\n-register_conv_template(\n-    Conversation(\n-        name=\"internlm-chat\",\n-        system_message=\"A chat between a curious <|User|> and an <|Bot|>. The <|Bot|> gives helpful, detailed, and polite answers to the <|User|>'s questions.\\n\\n\",\n-        roles=(\"<|User|>\", \"<|Bot|>\"),\n-        sep_style=SeparatorStyle.CHATINTERN,\n-        sep=\"<eoh>\",\n-        sep2=\"<eoa>\",\n-        stop_token_ids=[1, 103028],\n-        stop_str=\"<|User|>\",\n-    )\n-)\n-\n-# StarChat template\n-# reference: https://huggingface.co/spaces/HuggingFaceH4/starchat-playground/blob/main/dialogues.py\n-register_conv_template(\n-    Conversation(\n-        name=\"starchat\",\n-        system_template=\"<system>\\n{system_message}\",\n-        roles=(\"<|user|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|end|>\",\n-        stop_token_ids=[0, 49155],\n-        stop_str=\"<|end|>\",\n-    )\n-)\n-\n-# Baichuan-13B-Chat template\n-register_conv_template(\n-    # source: https://huggingface.co/baichuan-inc/Baichuan-13B-Chat/blob/\u001b[93m19ef51ba5bad8935b03acd20ff04a269210983bc\u001b[0m/modeling_baichuan.py#L555\n-    # https://huggingface.co/baichuan-inc/Baichuan-13B-Chat/blob/main/generation_config.json\n-    # https://github.com/baichuan-inc/Baichuan-13B/issues/25\n-    Conversation(\n-        name=\"baichuan-chat\",\n-        roles=(\"<reserved_102>\", \"<reserved_103>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-        stop_token_ids=[],\n-    )\n-)\n-\n-# Baichuan2-13B-Chat template\n-register_conv_template(\n-    # source: https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat/blob/\u001b[93mc6f8592a60b4ad73c210b28dd2ab3cca51abbf93\u001b[0m/modeling_baichuan.py#L773\n-    # https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat/blob/main/generation_config.json\n-    # https://github.com/baichuan-inc/Baichuan2/issues/62\n-    Conversation(\n-        name=\"baichuan2-chat\",\n-        roles=(\"<reserved_106>\", \"<reserved_107>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-        stop_token_ids=[],\n-    )\n-)\n-\n-# Mistral template\n-# source: https://docs.mistral.ai/llm/mistral-instruct-v0.1#chat-template\n-register_conv_template(\n-    Conversation(\n-        name=\"mistral\",\n-        system_template=\"[INST]{system_message}\\n\",\n-        roles=(\"[INST]\", \"[/INST]\"),\n-        sep_style=SeparatorStyle.LLAMA2,\n-        sep=\" \",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# llama2 template\n-# reference: https://huggingface.co/blog/codellama#conversational-instructions\n-# reference: https://github.\u001b[93mcom/facebookresearch/llama/blob/\u001b[93m1a240688810f8036049e8da36b073f63d2ac552c\u001b[0m/llama/generation\u001b[0m.py#L212\n-register_conv_template(\n-    Conversation(\n-        name=\"llama-2\",\n-        system_template=\"[INST] <<SYS>>\\n{system_message}\\n<</SYS>>\\n\\n\",\n-        roles=(\"[INST]\", \"[/INST]\"),\n-        sep_style=SeparatorStyle.LLAMA2,\n-        sep=\" \",\n-        sep2=\" </s><s>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"cutegpt\",\n-        roles=(\"\u95ee\uff1a\", \"\u7b54\uff1a\\n\"),\n-        sep_style=SeparatorStyle.NO_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"\\n\",\n-        stop_str=\"<end>\",\n-    )\n-)\n-\n-# OpenOrcaxOpenChat-Preview2-13B template\n-register_conv_template(\n-    Conversation(\n-        name=\"open-orca\",\n-        system_template=\"{system_message}\",\n-        system_message=\"You are a helpful assistant. Please answer truthfully and write out your \"\n-                       \"thinking step by step to be sure you get the right answer. If you make a mistake or encounter \"\n-                       \"an error in your thinking, say so out loud and attempt to correct it. If you don't know or \"\n-                       \"aren't sure about something, say so clearly. You will act as a professional logician, mathematician, \"\n-                       \"and physicist. You will also act as the most appropriate type of expert to answer any particular \"\n-                       \"question or solve the relevant problem; state which expert type your are, if so. Also think of \"\n-                       \"any particular named expert that would be ideal to answer the relevant question or solve the \"\n-                       \"relevant problem; name and act as them, if appropriate.\",\n-        roles=(\"User\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SPACE_SINGLE,\n-        sep=\"<|end_of_turn|>\\n\",\n-        stop_token_ids=[32000, 32001],  # \"<|end_of_turn|>\"\n-        stop_str=\"User\",\n-    )\n-)\n-\n-# Open-Orca/Mistral-7B-OpenOrca template\n-# source: https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca\n-# reference: https://huggingface.co/Open-Orca/Mistral-7B-OpenOrca#prompt-template\n-register_conv_template(\n-    Conversation(\n-        name=\"mistral-7b-openorca\",\n-        system_template=\"<|im_start|>system\\n{system_message}\",\n-        system_message=\"You are MistralOrca, a large language model trained by Alignment Lab AI. Write out your reasoning step-by-step to be sure you get the right answers!\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[32000, 32001],\n-    )\n-)\n-\n-# Qwen-chat default template\n-# source: https://huggingface.co/Qwen/Qwen-7B-Chat/blob/main/qwen_generation_utils.py#L130\n-register_conv_template(\n-    Conversation(\n-        name=\"qwen-7b-chat\",\n-        system_template=\"<|im_start|>system\\n{system_message}\",\n-        system_message=\"You are a helpful assistant.\",\n-        roles=(\"<|im_start|>user\", \"<|im_start|>assistant\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"<|im_end|>\",\n-        stop_token_ids=[\n-            151643,\n-            151644,\n-            151645,\n-        ],  # \"<|endoftext|>\", \"<|im_start|>\", \"<|im_end|>\"\n-        stop_str=\"<|endoftext|>\",\n-    )\n-)\n-\n-\n-# AquilaChat default template\n-# source: https://github.com/FlagAI-Open/FlagAI/blob/master/examples/Aquila/Aquila-chat/cyg_conversation.py\n-register_conv_template(\n-    Conversation(\n-        name=\"aquila-chat\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"Human\", \"Assistant\"),\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"###\",\n-        sep2=\"\",\n-        stop_str=[\"###\", \"</s>\", \"[UNK]\"],\n-    )\n-)\n-# AquilaChat2-34B default template\n-# source: https://huggingface.co/BAAI/AquilaChat2-34B/blob/\u001b[93m\u001b[93m\u001b[93m4608b75855334b93329a771aee03869dbf7d88cc\u001b[0m\u001b[0m\u001b[0m/predict.py#L212\n-register_conv_template(\n-    Conversation(\n-        name=\"aquila-legacy\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\\n\\n\",\n-        roles=(\"### Human: \", \"### Assistant: \"),\n-        offset=0,\n-        sep_style=SeparatorStyle.NO_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"</s>\",\n-        stop_str=[\"</s>\", \"[UNK]\"],\n-    )\n-)\n-# AquilaChat2-7B-16K and AquilaChat2-34B-16K default template\n-# source: https://huggingface.co/BAAI/AquilaChat2-34B/blob/\u001b[93m\u001b[93m\u001b[93m4608b75855334b93329a771aee03869dbf7d88cc\u001b[0m\u001b[0m\u001b[0m/predict.py#L227\n-register_conv_template(\n-    Conversation(\n-        name=\"aquila\",\n-        system_message=\"A chat between a curious human and an artificial intelligence assistant. \"\n-                       \"The assistant gives helpful, detailed, and polite answers to the human's questions.\",\n-        roles=(\"Human\", \"Assistant\"),\n-        offset=0,\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"###\",\n-        sep2=\"</s>\",\n-        stop_str=[\"</s>\", \"[UNK]\"],\n-    )\n-)\n-\n-# AquilaChat2-7B default template\n-# source: https://huggingface.co/BAAI/AquilaChat2-34B/blob/\u001b[93m\u001b[93m\u001b[93m4608b75855334b93329a771aee03869dbf7d88cc\u001b[0m\u001b[0m\u001b[0m/predict.py#L242\n-register_conv_template(\n-    Conversation(\n-        name=\"aquila-v1\",\n-        roles=(\"<|startofpiece|>\", \"<|endofpiece|>\"),\n-        offset=0,\n-        sep_style=SeparatorStyle.NO_COLON_TWO,\n-        sep=\"\",\n-        sep2=\"</s>\",\n-        stop_str=[\"</s>\", \"<|endoftext|>\"],\n-    )\n-)\n-\n-# Llama2-Chinese default template\n-# source: https://huggingface.co/FlagAlpha\n-register_conv_template(\n-    Conversation(\n-        name=\"llama2-chinese\",\n-        system_template=\"<s>{system_message}</s>\",\n-        roles=(\"Human\", \"Assistant\", \"System\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"\\n</s><s>\",\n-        stop_str=\"</s>\",\n-    )\n-)\n-\n-# Vigogne Instruct default template\n-# source: https://github.com/bofenghuang/vigogne\n-register_conv_template(\n-    Conversation(\n-        name=\"vigogne_instruct\",\n-        system_template=\"### System:\\n{system_message}\\n\\n\",\n-        system_message=(\n-            \"Ci-dessous se trouve une instruction qui d\u00e9crit une t\u00e2che \u00e0 accomplir. R\u00e9digez une r\u00e9ponse qui r\u00e9pond de mani\u00e8re\"\n-            \" pr\u00e9cise \u00e0 la demande.\"\n-        ),\n-        roles=(\"### Instruction\", \"### Response\"),\n-        sep_style=SeparatorStyle.DOLLY,\n-        sep=\"\\n\\n\",\n-        sep2=\"</s>\",\n-    )\n-)\n-\n-# Vigogne Chat default template\n-register_conv_template(\n-    Conversation(\n-        name=\"vigogne_chat_v2\",\n-        system_template=\"<|system|>: {system_message}\",\n-        system_message=(\n-            \"Vous \u00eates Vigogne, un assistant IA cr\u00e9\u00e9 par Zaion Lab. Vous suivez extr\u00eamement bien les instructions. Aidez\"\n-            \" autant que vous le pouvez.\"\n-        ),\n-        roles=(\"<|user|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.ADD_COLON_TWO,\n-        sep=\"\\n\",\n-        sep2=\"</s>\\n\",\n-        stop_str=\"<|user|>\",\n-    )\n-)\n-\n-register_conv_template(\n-    Conversation(\n-        name=\"vigogne_chat_v3\",\n-        system_template=\"[INST] <<SYS>>\\n{system_message}\\n<</SYS>>\\n\\n\",\n-        system_message=(\n-            \"Vous \u00eates Vigogne, un assistant IA cr\u00e9\u00e9 par Zaion Lab. Vous suivez extr\u00eamement bien les instructions. Aidez\"\n-            \" autant que vous le pouvez.\"\n-        ),\n-        roles=(\"[INST]\", \"[/INST]\"),\n-        sep_style=SeparatorStyle.LLAMA2,\n-        sep=\" \",\n-        sep2=\" </s>\",\n-    )\n-)\n-\n-# Falcon 180B chat template\n-# source: https://huggingface.co/spaces/tiiuae/falcon-180b-demo/blob/\u001b[93md1590ee7fae9b6ce331ba7808e61a29dcce9239f\u001b[0m/app.py#L28-L37\n-register_conv_template(\n-    Conversation(\n-        name=\"falcon-chat\",\n-        roles=(\"User\", \"Falcon\"),\n-        system_template=\"System: {system_message}\",\n-        messages=[],\n-        sep_style=SeparatorStyle.FALCON_CHAT,\n-        sep=\"\\n\",\n-        sep2=\"<|endoftext|>\",\n-        stop_str=\"\\nUser:\",  # use stop_str to stop generation after stop_token_ids, it will also remove stop_str from the generated text\n-    )\n-)\n-\n-# Phind template\n-# source: https://huggingface.co/Phind/Phind-CodeLlama-34B-v2\n-register_conv_template(\n-    Conversation(\n-        name=\"phind\",\n-        system_message=\"### System Prompt\\nYou are an intelligent programming assistant.\",\n-        roles=(\"### User Message\", \"### Assistant\"),\n-        messages=(),\n-        offset=0,\n-        sep_style=SeparatorStyle.ADD_COLON_SINGLE,\n-        sep=\"\\n\\n\",\n-    )\n-)\n-\n-# Metharme formatting for Pygmalion models\n-# source: https://huggingface.co/PygmalionAI/pygmalion-2-13b\n-register_conv_template(\n-    Conversation(\n-        name=\"metharme\",\n-        system_template=\"<|system|>{system_message}\",\n-        system_message=\"\"\"Enter RP mode. You shall reply to the user while staying \n-        in character. Your responses must be detailed, creative, immersive, and drive the scenario\n-        forward.\"\"\",\n-        roles=(\"<|user|>\", \"<|model|>\"),\n-        sep_style=SeparatorStyle.NO_COLON_SINGLE,\n-        sep=\"\",\n-        stop_str=\"<|user|>\",\n-    )\n-)\n-\n-# Zephyr template\n-# reference: https://huggingface.co/spaces/HuggingFaceH4/zephyr-playground/blob/main/dialogues.py\n-register_conv_template(\n-    Conversation(\n-        name=\"zephyr\",\n-        system_template=\"<|system|>\\n{system_message}\",\n-        roles=(\"<|user|>\", \"<|assistant|>\"),\n-        sep_style=SeparatorStyle.CHATML,\n-        sep=\"</s>\",\n-        stop_token_ids=[2],\n-        stop_str=\"</s>\",\n-    )\n-)\n-\n-\n-if __name__ == \"__main__\":\n-    print(\"-- Vicuna template --\")\n-    conv = get_conv_template(\"vicuna_v1.1\")\n-    conv.append_message(conv.roles[0], \"Hello!\")\n-    conv.append_message(conv.roles[1], \"Hi!\")\n-    conv.append_message(conv.roles[0], \"How are you?\")\n-    conv.append_message(conv.roles[1], None)\n-    print(conv.get_prompt())\n-\n-    print(\"\\n\")\n-\n-    print(\"-- Llama-2 template --\")\n-    conv = get_conv_template(\"llama-2\")\n-    conv.set_system_message(\"You are a helpful, respectful and honest assistant.\")\n-    conv.append_message(conv.roles[0], \"Hello!\")\n-    conv.append_message(conv.roles[1], \"Hi!\")\n-    conv.append_message(conv.roles[0], \"How are you?\")\n-    conv.append_message(conv.roles[1], None)\n-    print(conv.get_prompt())\n-\n-    print(\"\\n\")\n-\n-    print(\"-- ChatGPT template --\")\n-    conv = get_conv_template(\"chatgpt\")\n-    conv.append_message(conv.roles[0], \"Hello!\")\n-    conv.append_message(conv.roles[1], \"Hi!\")\n-    conv.append_message(conv.roles[0], \"How are you?\")\n-    conv.append_message(conv.roles[1], None)\n-    print(conv.to_openai_api_messages())\n-\n-    print(\"\\n\")\n-\n-    print(\"-- Claude template --\")\n-    conv = get_conv_template(\"claude\")\n-    conv.append_message(conv.roles[0], \"Hello!\")\n-    conv.append_message(conv.roles[1], \"Hi!\")\n-    conv.append_message(conv.roles[0], \"How are you?\")\n-    conv.append_message(conv.roles[1], None)\n-    print(conv.get_prompt())\n\\ No newline at end of file\n",
  "reason": "High Entropy",
  "stringsFound": [
    "1d240ba371910e9282298d4592532d7f0f3e9f3e",
    "e186c891cf64310ac66ef10a87e6635fa6c2a579",
    "bd546fa984b4b0b86958f56bf37f94aa75ab8831",
    "9c99bcb474a991a97a2e7d62fcdb52db7ce40729",
    "9c99bcb474a991a97a2e7d62fcdb52db7ce40729",
    "d4861030b778da6db59d21d2927a4aba4f9f1f43",
    "19ef51ba5bad8935b03acd20ff04a269210983bc",
    "c6f8592a60b4ad73c210b28dd2ab3cca51abbf93",
    "com/facebookresearch/llama/blob/1a240688810f8036049e8da36b073f63d2ac552c/llama/generation",
    "1a240688810f8036049e8da36b073f63d2ac552c",
    "4608b75855334b93329a771aee03869dbf7d88cc",
    "4608b75855334b93329a771aee03869dbf7d88cc",
    "4608b75855334b93329a771aee03869dbf7d88cc",
    "d1590ee7fae9b6ce331ba7808e61a29dcce9239f"
  ]
}
----------------------------------------

Observations:
TruffleHog may produce false positives. Manually verify the findings.